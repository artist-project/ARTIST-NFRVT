/*
* generated by Xtext
*/
package eu.artist.postmigration.nfrvt.lang.pml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import eu.artist.postmigration.nfrvt.lang.common.services.ARTISTCommonGrammarAccess;

@Singleton
public class PMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ARTISTModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARTISTModel");
		private final RuleCall cMeasurementModelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ARTISTModel returns common::ARTISTModel:
		//	MeasurementModel;
		public ParserRule getRule() { return rule; }

		//MeasurementModel
		public RuleCall getMeasurementModelParserRuleCall() { return cMeasurementModelParserRuleCall; }
	}

	public class MeasurementModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MeasurementModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMeasurementModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportNamespaceParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cObservationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObservationsObservationParserRuleCall_2_0 = (RuleCall)cObservationsAssignment_2.eContents().get(0);
		
		//MeasurementModel:
		//	{MeasurementModel} imports+=ImportNamespace* observations+=Observation*;
		public ParserRule getRule() { return rule; }

		//{MeasurementModel} imports+=ImportNamespace* observations+=Observation*
		public Group getGroup() { return cGroup; }

		//{MeasurementModel}
		public Action getMeasurementModelAction_0() { return cMeasurementModelAction_0; }

		//imports+=ImportNamespace*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//ImportNamespace
		public RuleCall getImportsImportNamespaceParserRuleCall_1_0() { return cImportsImportNamespaceParserRuleCall_1_0; }

		//observations+=Observation*
		public Assignment getObservationsAssignment_2() { return cObservationsAssignment_2; }

		//Observation
		public RuleCall getObservationsObservationParserRuleCall_2_0() { return cObservationsObservationParserRuleCall_2_0; }
	}

	public class ObservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Observation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObservationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cToolNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToolNameIDTerminalRuleCall_1_0 = (RuleCall)cToolNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTimeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDateTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDateTimeDATE_TIMETerminalRuleCall_4_0 = (RuleCall)cDateTimeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLevelKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cLevelAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cLevelSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cLevelAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cTypeKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMeasurementTypeAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMeasurementTypeSTRINGTerminalRuleCall_6_2_0 = (RuleCall)cMeasurementTypeAssignment_6_2.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cMeasurementsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cMeasurementsAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cMeasurementsMeasurementParserRuleCall_10_0_0 = (RuleCall)cMeasurementsAssignment_10_0.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Keyword cCommaKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cMeasurementsAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cMeasurementsMeasurementParserRuleCall_10_1_1_0 = (RuleCall)cMeasurementsAssignment_10_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Observation:
		//	"observation" toolName=ID "{" "time" dateTime=DATE_TIME ("," "level" level=STRING)? ("," "type"
		//	measurementType=STRING)? "," "measurements" "[" (measurements+=Measurement ("," measurements+=Measurement)*)? "]"
		//	"}";
		public ParserRule getRule() { return rule; }

		//"observation" toolName=ID "{" "time" dateTime=DATE_TIME ("," "level" level=STRING)? ("," "type" measurementType=STRING)?
		//"," "measurements" "[" (measurements+=Measurement ("," measurements+=Measurement)*)? "]" "}"
		public Group getGroup() { return cGroup; }

		//"observation"
		public Keyword getObservationKeyword_0() { return cObservationKeyword_0; }

		//toolName=ID
		public Assignment getToolNameAssignment_1() { return cToolNameAssignment_1; }

		//ID
		public RuleCall getToolNameIDTerminalRuleCall_1_0() { return cToolNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"time"
		public Keyword getTimeKeyword_3() { return cTimeKeyword_3; }

		//dateTime=DATE_TIME
		public Assignment getDateTimeAssignment_4() { return cDateTimeAssignment_4; }

		//DATE_TIME
		public RuleCall getDateTimeDATE_TIMETerminalRuleCall_4_0() { return cDateTimeDATE_TIMETerminalRuleCall_4_0; }

		//("," "level" level=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"level"
		public Keyword getLevelKeyword_5_1() { return cLevelKeyword_5_1; }

		//level=STRING
		public Assignment getLevelAssignment_5_2() { return cLevelAssignment_5_2; }

		//STRING
		public RuleCall getLevelSTRINGTerminalRuleCall_5_2_0() { return cLevelSTRINGTerminalRuleCall_5_2_0; }

		//("," "type" measurementType=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//"type"
		public Keyword getTypeKeyword_6_1() { return cTypeKeyword_6_1; }

		//measurementType=STRING
		public Assignment getMeasurementTypeAssignment_6_2() { return cMeasurementTypeAssignment_6_2; }

		//STRING
		public RuleCall getMeasurementTypeSTRINGTerminalRuleCall_6_2_0() { return cMeasurementTypeSTRINGTerminalRuleCall_6_2_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//"measurements"
		public Keyword getMeasurementsKeyword_8() { return cMeasurementsKeyword_8; }

		//"["
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }

		//(measurements+=Measurement ("," measurements+=Measurement)*)?
		public Group getGroup_10() { return cGroup_10; }

		//measurements+=Measurement
		public Assignment getMeasurementsAssignment_10_0() { return cMeasurementsAssignment_10_0; }

		//Measurement
		public RuleCall getMeasurementsMeasurementParserRuleCall_10_0_0() { return cMeasurementsMeasurementParserRuleCall_10_0_0; }

		//("," measurements+=Measurement)*
		public Group getGroup_10_1() { return cGroup_10_1; }

		//","
		public Keyword getCommaKeyword_10_1_0() { return cCommaKeyword_10_1_0; }

		//measurements+=Measurement
		public Assignment getMeasurementsAssignment_10_1_1() { return cMeasurementsAssignment_10_1_1; }

		//Measurement
		public RuleCall getMeasurementsMeasurementParserRuleCall_10_1_1_0() { return cMeasurementsMeasurementParserRuleCall_10_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class MeasurementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Measurement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cApplicationMeasurementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBenchmarkMeasurementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Measurement:
		//	ApplicationMeasurement | BenchmarkMeasurement;
		public ParserRule getRule() { return rule; }

		//ApplicationMeasurement | BenchmarkMeasurement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ApplicationMeasurement
		public RuleCall getApplicationMeasurementParserRuleCall_0() { return cApplicationMeasurementParserRuleCall_0; }

		//BenchmarkMeasurement
		public RuleCall getBenchmarkMeasurementParserRuleCall_1() { return cBenchmarkMeasurementParserRuleCall_1; }
	}

	public class ApplicationMeasurementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ApplicationMeasurement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataPointMeasurementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeSeriesMeasurementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ApplicationMeasurement:
		//	DataPointMeasurement | TimeSeriesMeasurement;
		public ParserRule getRule() { return rule; }

		//DataPointMeasurement | TimeSeriesMeasurement
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataPointMeasurement
		public RuleCall getDataPointMeasurementParserRuleCall_0() { return cDataPointMeasurementParserRuleCall_0; }

		//TimeSeriesMeasurement
		public RuleCall getTimeSeriesMeasurementParserRuleCall_1() { return cTimeSeriesMeasurementParserRuleCall_1; }
	}

	public class DataPointMeasurementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataPointMeasurement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataPointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPropertyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPropertyQuantitativePropertyCrossReference_4_0 = (CrossReference)cPropertyAssignment_4.eContents().get(0);
		private final RuleCall cPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cPropertyQuantitativePropertyCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cContextKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cContextAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cContextNamedElementCrossReference_7_0 = (CrossReference)cContextAssignment_7.eContents().get(0);
		private final RuleCall cContextNamedElementQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cContextNamedElementCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cWorkloadKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cWorkloadAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cWorkloadSimpleWorkloadParserRuleCall_8_2_0 = (RuleCall)cWorkloadAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cConfidenceKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cConfidenceAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cConfidencePOSITIVE_SMALL_DECIMALTerminalRuleCall_9_2_0 = (RuleCall)cConfidenceAssignment_9_2.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cValueKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cValueAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cValueValueSpecificationParserRuleCall_12_0 = (RuleCall)cValueAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cInfoKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cInfoAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cInfoSTRINGTerminalRuleCall_13_2_0 = (RuleCall)cInfoAssignment_13_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//DataPointMeasurement:
		//	"data-point" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] "," "context"
		//	context=[uml::NamedElement|QualifiedName] ("," "workload" workload=SimpleWorkload)? ("," "confidence"
		//	confidence=POSITIVE_SMALL_DECIMAL)? "," "value" value=ValueSpecification ("," "info" info=STRING)? "}";
		public ParserRule getRule() { return rule; }

		//"data-point" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] "," "context"
		//context=[uml::NamedElement|QualifiedName] ("," "workload" workload=SimpleWorkload)? ("," "confidence"
		//confidence=POSITIVE_SMALL_DECIMAL)? "," "value" value=ValueSpecification ("," "info" info=STRING)? "}"
		public Group getGroup() { return cGroup; }

		//"data-point"
		public Keyword getDataPointKeyword_0() { return cDataPointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"property"
		public Keyword getPropertyKeyword_3() { return cPropertyKeyword_3; }

		//property=[nsl::QuantitativeProperty|QualifiedName]
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }

		//[nsl::QuantitativeProperty|QualifiedName]
		public CrossReference getPropertyQuantitativePropertyCrossReference_4_0() { return cPropertyQuantitativePropertyCrossReference_4_0; }

		//QualifiedName
		public RuleCall getPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1() { return cPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"context"
		public Keyword getContextKeyword_6() { return cContextKeyword_6; }

		//context=[uml::NamedElement|QualifiedName]
		public Assignment getContextAssignment_7() { return cContextAssignment_7; }

		//[uml::NamedElement|QualifiedName]
		public CrossReference getContextNamedElementCrossReference_7_0() { return cContextNamedElementCrossReference_7_0; }

		//QualifiedName
		public RuleCall getContextNamedElementQualifiedNameParserRuleCall_7_0_1() { return cContextNamedElementQualifiedNameParserRuleCall_7_0_1; }

		//("," "workload" workload=SimpleWorkload)?
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//"workload"
		public Keyword getWorkloadKeyword_8_1() { return cWorkloadKeyword_8_1; }

		//workload=SimpleWorkload
		public Assignment getWorkloadAssignment_8_2() { return cWorkloadAssignment_8_2; }

		//SimpleWorkload
		public RuleCall getWorkloadSimpleWorkloadParserRuleCall_8_2_0() { return cWorkloadSimpleWorkloadParserRuleCall_8_2_0; }

		//("," "confidence" confidence=POSITIVE_SMALL_DECIMAL)?
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//"confidence"
		public Keyword getConfidenceKeyword_9_1() { return cConfidenceKeyword_9_1; }

		//confidence=POSITIVE_SMALL_DECIMAL
		public Assignment getConfidenceAssignment_9_2() { return cConfidenceAssignment_9_2; }

		//POSITIVE_SMALL_DECIMAL
		public RuleCall getConfidencePOSITIVE_SMALL_DECIMALTerminalRuleCall_9_2_0() { return cConfidencePOSITIVE_SMALL_DECIMALTerminalRuleCall_9_2_0; }

		//","
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }

		//"value"
		public Keyword getValueKeyword_11() { return cValueKeyword_11; }

		//value=ValueSpecification
		public Assignment getValueAssignment_12() { return cValueAssignment_12; }

		//ValueSpecification
		public RuleCall getValueValueSpecificationParserRuleCall_12_0() { return cValueValueSpecificationParserRuleCall_12_0; }

		//("," "info" info=STRING)?
		public Group getGroup_13() { return cGroup_13; }

		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }

		//"info"
		public Keyword getInfoKeyword_13_1() { return cInfoKeyword_13_1; }

		//info=STRING
		public Assignment getInfoAssignment_13_2() { return cInfoAssignment_13_2; }

		//STRING
		public RuleCall getInfoSTRINGTerminalRuleCall_13_2_0() { return cInfoSTRINGTerminalRuleCall_13_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class TimeSeriesMeasurementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeSeriesMeasurement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeSeriesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPropertyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPropertyQuantitativePropertyCrossReference_4_0 = (CrossReference)cPropertyAssignment_4.eContents().get(0);
		private final RuleCall cPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cPropertyQuantitativePropertyCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cContextKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cContextAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cContextNamedElementCrossReference_7_0 = (CrossReference)cContextAssignment_7.eContents().get(0);
		private final RuleCall cContextNamedElementQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cContextNamedElementCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cWorkloadKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cWorkloadAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cWorkloadSimpleWorkloadParserRuleCall_8_2_0 = (RuleCall)cWorkloadAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cConfidenceKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cConfidenceAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cConfidencePOSITIVE_SMALL_DECIMALTerminalRuleCall_9_2_0 = (RuleCall)cConfidenceAssignment_9_2.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cValuesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftSquareBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cValuesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cValuesTimeValuePairParserRuleCall_13_0 = (RuleCall)cValuesAssignment_13.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cCommaKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cValuesAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cValuesTimeValuePairParserRuleCall_14_1_0 = (RuleCall)cValuesAssignment_14_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cCommaKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Keyword cInfoKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Assignment cInfoAssignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final RuleCall cInfoSTRINGTerminalRuleCall_16_2_0 = (RuleCall)cInfoAssignment_16_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//TimeSeriesMeasurement:
		//	"time-series" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] "," "context"
		//	context=[uml::NamedElement|QualifiedName] ("," "workload" workload=SimpleWorkload)? ("," "confidence"
		//	confidence=POSITIVE_SMALL_DECIMAL)? "," "values" "[" values+=TimeValuePair ("," values+=TimeValuePair)* "]" (","
		//	"info" info=STRING)? "}";
		public ParserRule getRule() { return rule; }

		//"time-series" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] "," "context"
		//context=[uml::NamedElement|QualifiedName] ("," "workload" workload=SimpleWorkload)? ("," "confidence"
		//confidence=POSITIVE_SMALL_DECIMAL)? "," "values" "[" values+=TimeValuePair ("," values+=TimeValuePair)* "]" (","
		//"info" info=STRING)? "}"
		public Group getGroup() { return cGroup; }

		//"time-series"
		public Keyword getTimeSeriesKeyword_0() { return cTimeSeriesKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"property"
		public Keyword getPropertyKeyword_3() { return cPropertyKeyword_3; }

		//property=[nsl::QuantitativeProperty|QualifiedName]
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }

		//[nsl::QuantitativeProperty|QualifiedName]
		public CrossReference getPropertyQuantitativePropertyCrossReference_4_0() { return cPropertyQuantitativePropertyCrossReference_4_0; }

		//QualifiedName
		public RuleCall getPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1() { return cPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"context"
		public Keyword getContextKeyword_6() { return cContextKeyword_6; }

		//context=[uml::NamedElement|QualifiedName]
		public Assignment getContextAssignment_7() { return cContextAssignment_7; }

		//[uml::NamedElement|QualifiedName]
		public CrossReference getContextNamedElementCrossReference_7_0() { return cContextNamedElementCrossReference_7_0; }

		//QualifiedName
		public RuleCall getContextNamedElementQualifiedNameParserRuleCall_7_0_1() { return cContextNamedElementQualifiedNameParserRuleCall_7_0_1; }

		//("," "workload" workload=SimpleWorkload)?
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//"workload"
		public Keyword getWorkloadKeyword_8_1() { return cWorkloadKeyword_8_1; }

		//workload=SimpleWorkload
		public Assignment getWorkloadAssignment_8_2() { return cWorkloadAssignment_8_2; }

		//SimpleWorkload
		public RuleCall getWorkloadSimpleWorkloadParserRuleCall_8_2_0() { return cWorkloadSimpleWorkloadParserRuleCall_8_2_0; }

		//("," "confidence" confidence=POSITIVE_SMALL_DECIMAL)?
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//"confidence"
		public Keyword getConfidenceKeyword_9_1() { return cConfidenceKeyword_9_1; }

		//confidence=POSITIVE_SMALL_DECIMAL
		public Assignment getConfidenceAssignment_9_2() { return cConfidenceAssignment_9_2; }

		//POSITIVE_SMALL_DECIMAL
		public RuleCall getConfidencePOSITIVE_SMALL_DECIMALTerminalRuleCall_9_2_0() { return cConfidencePOSITIVE_SMALL_DECIMALTerminalRuleCall_9_2_0; }

		//","
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }

		//"values"
		public Keyword getValuesKeyword_11() { return cValuesKeyword_11; }

		//"["
		public Keyword getLeftSquareBracketKeyword_12() { return cLeftSquareBracketKeyword_12; }

		//values+=TimeValuePair
		public Assignment getValuesAssignment_13() { return cValuesAssignment_13; }

		//TimeValuePair
		public RuleCall getValuesTimeValuePairParserRuleCall_13_0() { return cValuesTimeValuePairParserRuleCall_13_0; }

		//("," values+=TimeValuePair)*
		public Group getGroup_14() { return cGroup_14; }

		//","
		public Keyword getCommaKeyword_14_0() { return cCommaKeyword_14_0; }

		//values+=TimeValuePair
		public Assignment getValuesAssignment_14_1() { return cValuesAssignment_14_1; }

		//TimeValuePair
		public RuleCall getValuesTimeValuePairParserRuleCall_14_1_0() { return cValuesTimeValuePairParserRuleCall_14_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_15() { return cRightSquareBracketKeyword_15; }

		//("," "info" info=STRING)?
		public Group getGroup_16() { return cGroup_16; }

		//","
		public Keyword getCommaKeyword_16_0() { return cCommaKeyword_16_0; }

		//"info"
		public Keyword getInfoKeyword_16_1() { return cInfoKeyword_16_1; }

		//info=STRING
		public Assignment getInfoAssignment_16_2() { return cInfoAssignment_16_2; }

		//STRING
		public RuleCall getInfoSTRINGTerminalRuleCall_16_2_0() { return cInfoSTRINGTerminalRuleCall_16_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}

	public class BenchmarkMeasurementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BenchmarkMeasurement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBenchmarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPropertyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPropertyQuantitativePropertyCrossReference_4_0 = (CrossReference)cPropertyAssignment_4.eContents().get(0);
		private final RuleCall cPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cPropertyQuantitativePropertyCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cProviderKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cProviderAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cProviderEnumerationLiteralCrossReference_7_0 = (CrossReference)cProviderAssignment_7.eContents().get(0);
		private final RuleCall cProviderEnumerationLiteralQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cProviderEnumerationLiteralCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cServiceKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cServiceAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cServiceSTRINGTerminalRuleCall_8_2_0 = (RuleCall)cServiceAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cTestKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cTestAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cTestSTRINGTerminalRuleCall_9_2_0 = (RuleCall)cTestAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cWorkloadKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cWorkloadAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cWorkloadSTRINGTerminalRuleCall_10_2_0 = (RuleCall)cWorkloadAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cConfidenceKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cConfidenceAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cConfidencePOSITIVE_SMALL_DECIMALTerminalRuleCall_11_2_0 = (RuleCall)cConfidenceAssignment_11_2.eContents().get(0);
		private final Keyword cCommaKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cValueKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cValueAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cValueValueSpecificationParserRuleCall_14_0 = (RuleCall)cValueAssignment_14.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cCommaKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cInfoKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Assignment cInfoAssignment_15_2 = (Assignment)cGroup_15.eContents().get(2);
		private final RuleCall cInfoSTRINGTerminalRuleCall_15_2_0 = (RuleCall)cInfoAssignment_15_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//BenchmarkMeasurement:
		//	"benchmark" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] "," "provider"
		//	provider=[uml::EnumerationLiteral|QualifiedName] ("," "service" service=STRING)? ("," "test" test=STRING)? (","
		//	"workload" workload=STRING)? ("," "confidence" confidence=POSITIVE_SMALL_DECIMAL)? "," "value"
		//	value=ValueSpecification ("," "info" info=STRING)? "}";
		public ParserRule getRule() { return rule; }

		//"benchmark" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] "," "provider"
		//provider=[uml::EnumerationLiteral|QualifiedName] ("," "service" service=STRING)? ("," "test" test=STRING)? (","
		//"workload" workload=STRING)? ("," "confidence" confidence=POSITIVE_SMALL_DECIMAL)? "," "value"
		//value=ValueSpecification ("," "info" info=STRING)? "}"
		public Group getGroup() { return cGroup; }

		//"benchmark"
		public Keyword getBenchmarkKeyword_0() { return cBenchmarkKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"property"
		public Keyword getPropertyKeyword_3() { return cPropertyKeyword_3; }

		//property=[nsl::QuantitativeProperty|QualifiedName]
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }

		//[nsl::QuantitativeProperty|QualifiedName]
		public CrossReference getPropertyQuantitativePropertyCrossReference_4_0() { return cPropertyQuantitativePropertyCrossReference_4_0; }

		//QualifiedName
		public RuleCall getPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1() { return cPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"provider"
		public Keyword getProviderKeyword_6() { return cProviderKeyword_6; }

		//provider=[uml::EnumerationLiteral|QualifiedName]
		public Assignment getProviderAssignment_7() { return cProviderAssignment_7; }

		//[uml::EnumerationLiteral|QualifiedName]
		public CrossReference getProviderEnumerationLiteralCrossReference_7_0() { return cProviderEnumerationLiteralCrossReference_7_0; }

		//QualifiedName
		public RuleCall getProviderEnumerationLiteralQualifiedNameParserRuleCall_7_0_1() { return cProviderEnumerationLiteralQualifiedNameParserRuleCall_7_0_1; }

		//("," "service" service=STRING)?
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//"service"
		public Keyword getServiceKeyword_8_1() { return cServiceKeyword_8_1; }

		//service=STRING
		public Assignment getServiceAssignment_8_2() { return cServiceAssignment_8_2; }

		//STRING
		public RuleCall getServiceSTRINGTerminalRuleCall_8_2_0() { return cServiceSTRINGTerminalRuleCall_8_2_0; }

		//("," "test" test=STRING)?
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//"test"
		public Keyword getTestKeyword_9_1() { return cTestKeyword_9_1; }

		//test=STRING
		public Assignment getTestAssignment_9_2() { return cTestAssignment_9_2; }

		//STRING
		public RuleCall getTestSTRINGTerminalRuleCall_9_2_0() { return cTestSTRINGTerminalRuleCall_9_2_0; }

		//("," "workload" workload=STRING)?
		public Group getGroup_10() { return cGroup_10; }

		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }

		//"workload"
		public Keyword getWorkloadKeyword_10_1() { return cWorkloadKeyword_10_1; }

		//workload=STRING
		public Assignment getWorkloadAssignment_10_2() { return cWorkloadAssignment_10_2; }

		//STRING
		public RuleCall getWorkloadSTRINGTerminalRuleCall_10_2_0() { return cWorkloadSTRINGTerminalRuleCall_10_2_0; }

		//("," "confidence" confidence=POSITIVE_SMALL_DECIMAL)?
		public Group getGroup_11() { return cGroup_11; }

		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }

		//"confidence"
		public Keyword getConfidenceKeyword_11_1() { return cConfidenceKeyword_11_1; }

		//confidence=POSITIVE_SMALL_DECIMAL
		public Assignment getConfidenceAssignment_11_2() { return cConfidenceAssignment_11_2; }

		//POSITIVE_SMALL_DECIMAL
		public RuleCall getConfidencePOSITIVE_SMALL_DECIMALTerminalRuleCall_11_2_0() { return cConfidencePOSITIVE_SMALL_DECIMALTerminalRuleCall_11_2_0; }

		//","
		public Keyword getCommaKeyword_12() { return cCommaKeyword_12; }

		//"value"
		public Keyword getValueKeyword_13() { return cValueKeyword_13; }

		//value=ValueSpecification
		public Assignment getValueAssignment_14() { return cValueAssignment_14; }

		//ValueSpecification
		public RuleCall getValueValueSpecificationParserRuleCall_14_0() { return cValueValueSpecificationParserRuleCall_14_0; }

		//("," "info" info=STRING)?
		public Group getGroup_15() { return cGroup_15; }

		//","
		public Keyword getCommaKeyword_15_0() { return cCommaKeyword_15_0; }

		//"info"
		public Keyword getInfoKeyword_15_1() { return cInfoKeyword_15_1; }

		//info=STRING
		public Assignment getInfoAssignment_15_2() { return cInfoAssignment_15_2; }

		//STRING
		public RuleCall getInfoSTRINGTerminalRuleCall_15_2_0() { return cInfoSTRINGTerminalRuleCall_15_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}

	public class TimeValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDateTimeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDateTimeDATE_TIMETerminalRuleCall_0_0 = (RuleCall)cDateTimeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueSpecificationParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//TimeValuePair:
		//	dateTime=DATE_TIME ":" value=ValueSpecification;
		public ParserRule getRule() { return rule; }

		//dateTime=DATE_TIME ":" value=ValueSpecification
		public Group getGroup() { return cGroup; }

		//dateTime=DATE_TIME
		public Assignment getDateTimeAssignment_0() { return cDateTimeAssignment_0; }

		//DATE_TIME
		public RuleCall getDateTimeDATE_TIMETerminalRuleCall_0_0() { return cDateTimeDATE_TIMETerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=ValueSpecification
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ValueSpecification
		public RuleCall getValueValueSpecificationParserRuleCall_2_0() { return cValueValueSpecificationParserRuleCall_2_0; }
	}

	public class SimpleWorkloadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleWorkload");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActivityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActivityActivityCrossReference_0_0 = (CrossReference)cActivityAssignment_0.eContents().get(0);
		private final RuleCall cActivityActivityQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cActivityActivityCrossReference_0_0.eContents().get(1);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternSTRINGTerminalRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		
		//SimpleWorkload returns common::Workload:
		//	activity=[uml::Activity|QualifiedName] "with" pattern=STRING;
		public ParserRule getRule() { return rule; }

		//activity=[uml::Activity|QualifiedName] "with" pattern=STRING
		public Group getGroup() { return cGroup; }

		//activity=[uml::Activity|QualifiedName]
		public Assignment getActivityAssignment_0() { return cActivityAssignment_0; }

		//[uml::Activity|QualifiedName]
		public CrossReference getActivityActivityCrossReference_0_0() { return cActivityActivityCrossReference_0_0; }

		//QualifiedName
		public RuleCall getActivityActivityQualifiedNameParserRuleCall_0_0_1() { return cActivityActivityQualifiedNameParserRuleCall_0_0_1; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//pattern=STRING
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_2_0() { return cPatternSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private ARTISTModelElements pARTISTModel;
	private MeasurementModelElements pMeasurementModel;
	private ObservationElements pObservation;
	private MeasurementElements pMeasurement;
	private ApplicationMeasurementElements pApplicationMeasurement;
	private DataPointMeasurementElements pDataPointMeasurement;
	private TimeSeriesMeasurementElements pTimeSeriesMeasurement;
	private BenchmarkMeasurementElements pBenchmarkMeasurement;
	private TimeValuePairElements pTimeValuePair;
	private SimpleWorkloadElements pSimpleWorkload;
	
	private final Grammar grammar;

	private ARTISTCommonGrammarAccess gaARTISTCommon;

	@Inject
	public PMLGrammarAccess(GrammarProvider grammarProvider,
		ARTISTCommonGrammarAccess gaARTISTCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaARTISTCommon = gaARTISTCommon;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.artist.postmigration.nfrvt.lang.pml.PML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ARTISTCommonGrammarAccess getARTISTCommonGrammarAccess() {
		return gaARTISTCommon;
	}

	
	//ARTISTModel returns common::ARTISTModel:
	//	MeasurementModel;
	public ARTISTModelElements getARTISTModelAccess() {
		return (pARTISTModel != null) ? pARTISTModel : (pARTISTModel = new ARTISTModelElements());
	}
	
	public ParserRule getARTISTModelRule() {
		return getARTISTModelAccess().getRule();
	}

	//MeasurementModel:
	//	{MeasurementModel} imports+=ImportNamespace* observations+=Observation*;
	public MeasurementModelElements getMeasurementModelAccess() {
		return (pMeasurementModel != null) ? pMeasurementModel : (pMeasurementModel = new MeasurementModelElements());
	}
	
	public ParserRule getMeasurementModelRule() {
		return getMeasurementModelAccess().getRule();
	}

	//Observation:
	//	"observation" toolName=ID "{" "time" dateTime=DATE_TIME ("," "level" level=STRING)? ("," "type"
	//	measurementType=STRING)? "," "measurements" "[" (measurements+=Measurement ("," measurements+=Measurement)*)? "]"
	//	"}";
	public ObservationElements getObservationAccess() {
		return (pObservation != null) ? pObservation : (pObservation = new ObservationElements());
	}
	
	public ParserRule getObservationRule() {
		return getObservationAccess().getRule();
	}

	//Measurement:
	//	ApplicationMeasurement | BenchmarkMeasurement;
	public MeasurementElements getMeasurementAccess() {
		return (pMeasurement != null) ? pMeasurement : (pMeasurement = new MeasurementElements());
	}
	
	public ParserRule getMeasurementRule() {
		return getMeasurementAccess().getRule();
	}

	//ApplicationMeasurement:
	//	DataPointMeasurement | TimeSeriesMeasurement;
	public ApplicationMeasurementElements getApplicationMeasurementAccess() {
		return (pApplicationMeasurement != null) ? pApplicationMeasurement : (pApplicationMeasurement = new ApplicationMeasurementElements());
	}
	
	public ParserRule getApplicationMeasurementRule() {
		return getApplicationMeasurementAccess().getRule();
	}

	//DataPointMeasurement:
	//	"data-point" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] "," "context"
	//	context=[uml::NamedElement|QualifiedName] ("," "workload" workload=SimpleWorkload)? ("," "confidence"
	//	confidence=POSITIVE_SMALL_DECIMAL)? "," "value" value=ValueSpecification ("," "info" info=STRING)? "}";
	public DataPointMeasurementElements getDataPointMeasurementAccess() {
		return (pDataPointMeasurement != null) ? pDataPointMeasurement : (pDataPointMeasurement = new DataPointMeasurementElements());
	}
	
	public ParserRule getDataPointMeasurementRule() {
		return getDataPointMeasurementAccess().getRule();
	}

	//TimeSeriesMeasurement:
	//	"time-series" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] "," "context"
	//	context=[uml::NamedElement|QualifiedName] ("," "workload" workload=SimpleWorkload)? ("," "confidence"
	//	confidence=POSITIVE_SMALL_DECIMAL)? "," "values" "[" values+=TimeValuePair ("," values+=TimeValuePair)* "]" (","
	//	"info" info=STRING)? "}";
	public TimeSeriesMeasurementElements getTimeSeriesMeasurementAccess() {
		return (pTimeSeriesMeasurement != null) ? pTimeSeriesMeasurement : (pTimeSeriesMeasurement = new TimeSeriesMeasurementElements());
	}
	
	public ParserRule getTimeSeriesMeasurementRule() {
		return getTimeSeriesMeasurementAccess().getRule();
	}

	//BenchmarkMeasurement:
	//	"benchmark" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] "," "provider"
	//	provider=[uml::EnumerationLiteral|QualifiedName] ("," "service" service=STRING)? ("," "test" test=STRING)? (","
	//	"workload" workload=STRING)? ("," "confidence" confidence=POSITIVE_SMALL_DECIMAL)? "," "value"
	//	value=ValueSpecification ("," "info" info=STRING)? "}";
	public BenchmarkMeasurementElements getBenchmarkMeasurementAccess() {
		return (pBenchmarkMeasurement != null) ? pBenchmarkMeasurement : (pBenchmarkMeasurement = new BenchmarkMeasurementElements());
	}
	
	public ParserRule getBenchmarkMeasurementRule() {
		return getBenchmarkMeasurementAccess().getRule();
	}

	//TimeValuePair:
	//	dateTime=DATE_TIME ":" value=ValueSpecification;
	public TimeValuePairElements getTimeValuePairAccess() {
		return (pTimeValuePair != null) ? pTimeValuePair : (pTimeValuePair = new TimeValuePairElements());
	}
	
	public ParserRule getTimeValuePairRule() {
		return getTimeValuePairAccess().getRule();
	}

	//SimpleWorkload returns common::Workload:
	//	activity=[uml::Activity|QualifiedName] "with" pattern=STRING;
	public SimpleWorkloadElements getSimpleWorkloadAccess() {
		return (pSimpleWorkload != null) ? pSimpleWorkload : (pSimpleWorkload = new SimpleWorkloadElements());
	}
	
	public ParserRule getSimpleWorkloadRule() {
		return getSimpleWorkloadAccess().getRule();
	}

	//Expression:
	//	Implication;
	public ARTISTCommonGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaARTISTCommon.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Implication:
	//	Disjunction ({Implication.left=current} operator=ImplicationOperator right=Disjunction)*;
	public ARTISTCommonGrammarAccess.ImplicationElements getImplicationAccess() {
		return gaARTISTCommon.getImplicationAccess();
	}
	
	public ParserRule getImplicationRule() {
		return getImplicationAccess().getRule();
	}

	//Disjunction:
	//	Conjunction ({Disjunction.left=current} operator=(OrOperator | XOrOperator) right=Conjunction)*;
	public ARTISTCommonGrammarAccess.DisjunctionElements getDisjunctionAccess() {
		return gaARTISTCommon.getDisjunctionAccess();
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}

	//Conjunction:
	//	Comparison ({Conjunction.left=current} operator=AndOperator right=Comparison)*;
	public ARTISTCommonGrammarAccess.ConjunctionElements getConjunctionAccess() {
		return gaARTISTCommon.getConjunctionAccess();
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Comparison:
	//	BooleanUnit ({Comparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=BooleanUnit)*;
	public ARTISTCommonGrammarAccess.ComparisonElements getComparisonAccess() {
		return gaARTISTCommon.getComparisonAccess();
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//BooleanUnit:
	//	Negation | RelationalExpression | BooleanLiteral;
	public ARTISTCommonGrammarAccess.BooleanUnitElements getBooleanUnitAccess() {
		return gaARTISTCommon.getBooleanUnitAccess();
	}
	
	public ParserRule getBooleanUnitRule() {
		return getBooleanUnitAccess().getRule();
	}

	//Negation:
	//	operator=NotOperator value=BooleanUnit;
	public ARTISTCommonGrammarAccess.NegationElements getNegationAccess() {
		return gaARTISTCommon.getNegationAccess();
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//RelationalExpression:
	//	ComparableExpression (({RelationalExpression.left=current} operator=GreaterThanOperator |
	//	{RelationalExpression.left=current} operator=GreaterOrEqualThanOperator | {RelationalExpression.left=current}
	//	operator=LessOrEqualThanOperator | {RelationalExpression.left=current} operator=LessThanOperator)
	//	right=ComparableExpression)*;
	public ARTISTCommonGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaARTISTCommon.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//ComparableExpression:
	//	ArithmeticExpression | InstanceSpecificationExpression | ObjectSpecificationExpression | NullLiteral | StringLiteral
	//	| UnlimitedLiteral | ParenthesizedExpression;
	public ARTISTCommonGrammarAccess.ComparableExpressionElements getComparableExpressionAccess() {
		return gaARTISTCommon.getComparableExpressionAccess();
	}
	
	public ParserRule getComparableExpressionRule() {
		return getComparableExpressionAccess().getRule();
	}

	//ArithmeticExpression:
	//	AdditiveExpression;
	public ARTISTCommonGrammarAccess.ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return gaARTISTCommon.getArithmeticExpressionAccess();
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}

	//AdditiveExpression:
	//	MultiplicativeExpression ({AdditiveExpression.left=current} operator=(SubstractionOperator | AdditionOperator)
	//	right=MultiplicativeExpression)*;
	public ARTISTCommonGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaARTISTCommon.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression:
	//	NumberExpression ({MultiplicativeExpression.left=current} operator=(MultiplicationOperator | DivisionOperator |
	//	ModulusOperator) right=NumberExpression)*;
	public ARTISTCommonGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaARTISTCommon.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//NumberExpression:
	//	NumberLiteral | NumberFunction;
	public ARTISTCommonGrammarAccess.NumberExpressionElements getNumberExpressionAccess() {
		return gaARTISTCommon.getNumberExpressionAccess();
	}
	
	public ParserRule getNumberExpressionRule() {
		return getNumberExpressionAccess().getRule();
	}

	//NumberFunction:
	//	MaximumFunction | MinimumFunction | AverageFunction | SumFunction | ExponentialFunction | AbsoluteFunction |
	//	NaturalLogarithmFunction | CommonLogarithmFunction;
	public ARTISTCommonGrammarAccess.NumberFunctionElements getNumberFunctionAccess() {
		return gaARTISTCommon.getNumberFunctionAccess();
	}
	
	public ParserRule getNumberFunctionRule() {
		return getNumberFunctionAccess().getRule();
	}

	//MaximumFunction:
	//	operator=MaxOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.MaximumFunctionElements getMaximumFunctionAccess() {
		return gaARTISTCommon.getMaximumFunctionAccess();
	}
	
	public ParserRule getMaximumFunctionRule() {
		return getMaximumFunctionAccess().getRule();
	}

	//MinimumFunction:
	//	operator=MinOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.MinimumFunctionElements getMinimumFunctionAccess() {
		return gaARTISTCommon.getMinimumFunctionAccess();
	}
	
	public ParserRule getMinimumFunctionRule() {
		return getMinimumFunctionAccess().getRule();
	}

	//AverageFunction:
	//	operator=AvgOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.AverageFunctionElements getAverageFunctionAccess() {
		return gaARTISTCommon.getAverageFunctionAccess();
	}
	
	public ParserRule getAverageFunctionRule() {
		return getAverageFunctionAccess().getRule();
	}

	//SumFunction:
	//	operator=SumOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.SumFunctionElements getSumFunctionAccess() {
		return gaARTISTCommon.getSumFunctionAccess();
	}
	
	public ParserRule getSumFunctionRule() {
		return getSumFunctionAccess().getRule();
	}

	//ExponentialFunction:
	//	operator=ExponentialOperator "(" base=NumberExpression "," exponent=NumberExpression ")";
	public ARTISTCommonGrammarAccess.ExponentialFunctionElements getExponentialFunctionAccess() {
		return gaARTISTCommon.getExponentialFunctionAccess();
	}
	
	public ParserRule getExponentialFunctionRule() {
		return getExponentialFunctionAccess().getRule();
	}

	//AbsoluteFunction:
	//	operator=AbsoluteOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.AbsoluteFunctionElements getAbsoluteFunctionAccess() {
		return gaARTISTCommon.getAbsoluteFunctionAccess();
	}
	
	public ParserRule getAbsoluteFunctionRule() {
		return getAbsoluteFunctionAccess().getRule();
	}

	//NaturalLogarithmFunction:
	//	operator=NaturalLogarithmOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.NaturalLogarithmFunctionElements getNaturalLogarithmFunctionAccess() {
		return gaARTISTCommon.getNaturalLogarithmFunctionAccess();
	}
	
	public ParserRule getNaturalLogarithmFunctionRule() {
		return getNaturalLogarithmFunctionAccess().getRule();
	}

	//CommonLogarithmFunction:
	//	operator=CommonLogarithmOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.CommonLogarithmFunctionElements getCommonLogarithmFunctionAccess() {
		return gaARTISTCommon.getCommonLogarithmFunctionAccess();
	}
	
	public ParserRule getCommonLogarithmFunctionRule() {
		return getCommonLogarithmFunctionAccess().getRule();
	}

	//ParenthesizedExpression:
	//	LeftParenthesis value=Expression RightParenthesis;
	public ARTISTCommonGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaARTISTCommon.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//ValueSpecification:
	//	LiteralValueExpression | InstanceSpecificationExpression | ObjectSpecificationExpression;
	public ARTISTCommonGrammarAccess.ValueSpecificationElements getValueSpecificationAccess() {
		return gaARTISTCommon.getValueSpecificationAccess();
	}
	
	public ParserRule getValueSpecificationRule() {
		return getValueSpecificationAccess().getRule();
	}

	//ObjectSpecificationExpression:
	//	type=[uml::DataType|QualifiedName] (value=Collection | value=Tuple);
	public ARTISTCommonGrammarAccess.ObjectSpecificationExpressionElements getObjectSpecificationExpressionAccess() {
		return gaARTISTCommon.getObjectSpecificationExpressionAccess();
	}
	
	public ParserRule getObjectSpecificationExpressionRule() {
		return getObjectSpecificationExpressionAccess().getRule();
	}

	//Collection:
	//	{Collection} "[" (values+=ValueSpecification ("," values+=ValueSpecification)*)? "]";
	public ARTISTCommonGrammarAccess.CollectionElements getCollectionAccess() {
		return gaARTISTCommon.getCollectionAccess();
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}

	//Tuple:
	//	{Tuple} "{" (tuples+=PropertyValuePair ("," tuples+=PropertyValuePair)*)? "}";
	public ARTISTCommonGrammarAccess.TupleElements getTupleAccess() {
		return gaARTISTCommon.getTupleAccess();
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}

	//PropertyValuePair:
	//	property=[uml::Property|QualifiedName] "=" value=ValueSpecification;
	public ARTISTCommonGrammarAccess.PropertyValuePairElements getPropertyValuePairAccess() {
		return gaARTISTCommon.getPropertyValuePairAccess();
	}
	
	public ParserRule getPropertyValuePairRule() {
		return getPropertyValuePairAccess().getRule();
	}

	//InstanceSpecificationExpression:
	//	value=[uml::InstanceSpecification|QualifiedName];
	public ARTISTCommonGrammarAccess.InstanceSpecificationExpressionElements getInstanceSpecificationExpressionAccess() {
		return gaARTISTCommon.getInstanceSpecificationExpressionAccess();
	}
	
	public ParserRule getInstanceSpecificationExpressionRule() {
		return getInstanceSpecificationExpressionAccess().getRule();
	}

	//LiteralValueExpression:
	//	NumberLiteral | BooleanLiteral | NullLiteral | StringLiteral | UnlimitedLiteral;
	public ARTISTCommonGrammarAccess.LiteralValueExpressionElements getLiteralValueExpressionAccess() {
		return gaARTISTCommon.getLiteralValueExpressionAccess();
	}
	
	public ParserRule getLiteralValueExpressionRule() {
		return getLiteralValueExpressionAccess().getRule();
	}

	//BooleanLiteral:
	//	value=EBOOLEAN;
	public ARTISTCommonGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaARTISTCommon.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NumberLiteral:
	//	value=Number;
	public ARTISTCommonGrammarAccess.NumberLiteralElements getNumberLiteralAccess() {
		return gaARTISTCommon.getNumberLiteralAccess();
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//NullLiteral:
	//	value=NULL;
	public ARTISTCommonGrammarAccess.NullLiteralElements getNullLiteralAccess() {
		return gaARTISTCommon.getNullLiteralAccess();
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public ARTISTCommonGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaARTISTCommon.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//UnlimitedLiteral:
	//	value="*";
	public ARTISTCommonGrammarAccess.UnlimitedLiteralElements getUnlimitedLiteralAccess() {
		return gaARTISTCommon.getUnlimitedLiteralAccess();
	}
	
	public ParserRule getUnlimitedLiteralRule() {
		return getUnlimitedLiteralAccess().getRule();
	}

	//OrOperator returns Operator:
	//	{OrOperator} ("or" | "||");
	public ARTISTCommonGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaARTISTCommon.getOrOperatorAccess();
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//XOrOperator returns Operator:
	//	{XOrOperator} ("xor" | "^");
	public ARTISTCommonGrammarAccess.XOrOperatorElements getXOrOperatorAccess() {
		return gaARTISTCommon.getXOrOperatorAccess();
	}
	
	public ParserRule getXOrOperatorRule() {
		return getXOrOperatorAccess().getRule();
	}

	//AndOperator returns Operator:
	//	{AndOperator} ("and" | "&&");
	public ARTISTCommonGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaARTISTCommon.getAndOperatorAccess();
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//ImplicationOperator returns Operator:
	//	{ImplicationOperator} ("=>" | "->");
	public ARTISTCommonGrammarAccess.ImplicationOperatorElements getImplicationOperatorAccess() {
		return gaARTISTCommon.getImplicationOperatorAccess();
	}
	
	public ParserRule getImplicationOperatorRule() {
		return getImplicationOperatorAccess().getRule();
	}

	//EqualsOperator returns Operator:
	//	{EqualsOperator} "==";
	public ARTISTCommonGrammarAccess.EqualsOperatorElements getEqualsOperatorAccess() {
		return gaARTISTCommon.getEqualsOperatorAccess();
	}
	
	public ParserRule getEqualsOperatorRule() {
		return getEqualsOperatorAccess().getRule();
	}

	//NotEqualsOperator returns Operator:
	//	{NotEqualsOperator} ("!=" | "<>");
	public ARTISTCommonGrammarAccess.NotEqualsOperatorElements getNotEqualsOperatorAccess() {
		return gaARTISTCommon.getNotEqualsOperatorAccess();
	}
	
	public ParserRule getNotEqualsOperatorRule() {
		return getNotEqualsOperatorAccess().getRule();
	}

	//NotOperator returns Operator:
	//	{NotOperator} ("!" | "not");
	public ARTISTCommonGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaARTISTCommon.getNotOperatorAccess();
	}
	
	public ParserRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//GreaterThanOperator returns Operator:
	//	{GreaterThanOperator} ">";
	public ARTISTCommonGrammarAccess.GreaterThanOperatorElements getGreaterThanOperatorAccess() {
		return gaARTISTCommon.getGreaterThanOperatorAccess();
	}
	
	public ParserRule getGreaterThanOperatorRule() {
		return getGreaterThanOperatorAccess().getRule();
	}

	//GreaterOrEqualThanOperator returns Operator:
	//	{GreaterOrEqualThanOperator} ">=";
	public ARTISTCommonGrammarAccess.GreaterOrEqualThanOperatorElements getGreaterOrEqualThanOperatorAccess() {
		return gaARTISTCommon.getGreaterOrEqualThanOperatorAccess();
	}
	
	public ParserRule getGreaterOrEqualThanOperatorRule() {
		return getGreaterOrEqualThanOperatorAccess().getRule();
	}

	//LessThanOperator returns Operator:
	//	{LessThanOperator} "<";
	public ARTISTCommonGrammarAccess.LessThanOperatorElements getLessThanOperatorAccess() {
		return gaARTISTCommon.getLessThanOperatorAccess();
	}
	
	public ParserRule getLessThanOperatorRule() {
		return getLessThanOperatorAccess().getRule();
	}

	//LessOrEqualThanOperator returns Operator:
	//	{LessOrEqualThanOperator} "<=";
	public ARTISTCommonGrammarAccess.LessOrEqualThanOperatorElements getLessOrEqualThanOperatorAccess() {
		return gaARTISTCommon.getLessOrEqualThanOperatorAccess();
	}
	
	public ParserRule getLessOrEqualThanOperatorRule() {
		return getLessOrEqualThanOperatorAccess().getRule();
	}

	//AdditionOperator returns Operator:
	//	{AdditionOperator} "+";
	public ARTISTCommonGrammarAccess.AdditionOperatorElements getAdditionOperatorAccess() {
		return gaARTISTCommon.getAdditionOperatorAccess();
	}
	
	public ParserRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}

	//SubstractionOperator returns Operator:
	//	{SubstractionOperator} "-";
	public ARTISTCommonGrammarAccess.SubstractionOperatorElements getSubstractionOperatorAccess() {
		return gaARTISTCommon.getSubstractionOperatorAccess();
	}
	
	public ParserRule getSubstractionOperatorRule() {
		return getSubstractionOperatorAccess().getRule();
	}

	//MultiplicationOperator returns Operator:
	//	{MultiplicationOperator} "*";
	public ARTISTCommonGrammarAccess.MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return gaARTISTCommon.getMultiplicationOperatorAccess();
	}
	
	public ParserRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}

	//DivisionOperator returns Operator:
	//	{DivisionOperator} "/";
	public ARTISTCommonGrammarAccess.DivisionOperatorElements getDivisionOperatorAccess() {
		return gaARTISTCommon.getDivisionOperatorAccess();
	}
	
	public ParserRule getDivisionOperatorRule() {
		return getDivisionOperatorAccess().getRule();
	}

	//ModulusOperator returns Operator:
	//	{ModulusOperator} "%";
	public ARTISTCommonGrammarAccess.ModulusOperatorElements getModulusOperatorAccess() {
		return gaARTISTCommon.getModulusOperatorAccess();
	}
	
	public ParserRule getModulusOperatorRule() {
		return getModulusOperatorAccess().getRule();
	}

	//MaxOperator returns Operator:
	//	{MaxOperator} "max";
	public ARTISTCommonGrammarAccess.MaxOperatorElements getMaxOperatorAccess() {
		return gaARTISTCommon.getMaxOperatorAccess();
	}
	
	public ParserRule getMaxOperatorRule() {
		return getMaxOperatorAccess().getRule();
	}

	//MinOperator returns Operator:
	//	{MinOperator} "min";
	public ARTISTCommonGrammarAccess.MinOperatorElements getMinOperatorAccess() {
		return gaARTISTCommon.getMinOperatorAccess();
	}
	
	public ParserRule getMinOperatorRule() {
		return getMinOperatorAccess().getRule();
	}

	//AvgOperator returns Operator:
	//	{AvgOperator} "avg";
	public ARTISTCommonGrammarAccess.AvgOperatorElements getAvgOperatorAccess() {
		return gaARTISTCommon.getAvgOperatorAccess();
	}
	
	public ParserRule getAvgOperatorRule() {
		return getAvgOperatorAccess().getRule();
	}

	//SumOperator returns Operator:
	//	{SumOperator} "sum";
	public ARTISTCommonGrammarAccess.SumOperatorElements getSumOperatorAccess() {
		return gaARTISTCommon.getSumOperatorAccess();
	}
	
	public ParserRule getSumOperatorRule() {
		return getSumOperatorAccess().getRule();
	}

	//ExponentialOperator returns Operator:
	//	{ExponentialOperator} "exp";
	public ARTISTCommonGrammarAccess.ExponentialOperatorElements getExponentialOperatorAccess() {
		return gaARTISTCommon.getExponentialOperatorAccess();
	}
	
	public ParserRule getExponentialOperatorRule() {
		return getExponentialOperatorAccess().getRule();
	}

	//AbsoluteOperator returns Operator:
	//	{AbsoluteOperator} "abs";
	public ARTISTCommonGrammarAccess.AbsoluteOperatorElements getAbsoluteOperatorAccess() {
		return gaARTISTCommon.getAbsoluteOperatorAccess();
	}
	
	public ParserRule getAbsoluteOperatorRule() {
		return getAbsoluteOperatorAccess().getRule();
	}

	//NaturalLogarithmOperator returns Operator:
	//	{NaturalLogarithmOperator} "ln";
	public ARTISTCommonGrammarAccess.NaturalLogarithmOperatorElements getNaturalLogarithmOperatorAccess() {
		return gaARTISTCommon.getNaturalLogarithmOperatorAccess();
	}
	
	public ParserRule getNaturalLogarithmOperatorRule() {
		return getNaturalLogarithmOperatorAccess().getRule();
	}

	//CommonLogarithmOperator returns Operator:
	//	{CommonLogarithmOperator} "log";
	public ARTISTCommonGrammarAccess.CommonLogarithmOperatorElements getCommonLogarithmOperatorAccess() {
		return gaARTISTCommon.getCommonLogarithmOperatorAccess();
	}
	
	public ParserRule getCommonLogarithmOperatorRule() {
		return getCommonLogarithmOperatorAccess().getRule();
	}

	//LeftParenthesis:
	//	"(";
	public ARTISTCommonGrammarAccess.LeftParenthesisElements getLeftParenthesisAccess() {
		return gaARTISTCommon.getLeftParenthesisAccess();
	}
	
	public ParserRule getLeftParenthesisRule() {
		return getLeftParenthesisAccess().getRule();
	}

	//RightParenthesis:
	//	")";
	public ARTISTCommonGrammarAccess.RightParenthesisElements getRightParenthesisAccess() {
		return gaARTISTCommon.getRightParenthesisAccess();
	}
	
	public ParserRule getRightParenthesisRule() {
		return getRightParenthesisAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public ARTISTCommonGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaARTISTCommon.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Workload:
	//	name=ID "{" "activity" activity=[uml::Activity|QualifiedName] "," "pattern" pattern=STRING "}";
	public ARTISTCommonGrammarAccess.WorkloadElements getWorkloadAccess() {
		return gaARTISTCommon.getWorkloadAccess();
	}
	
	public ParserRule getWorkloadRule() {
		return getWorkloadAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public ARTISTCommonGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaARTISTCommon.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ImportURIorNamespace:
	//	"import" (importURI=STRING | importedNamespace=QualifiedNameWithWildcard);
	public ARTISTCommonGrammarAccess.ImportURIorNamespaceElements getImportURIorNamespaceAccess() {
		return gaARTISTCommon.getImportURIorNamespaceAccess();
	}
	
	public ParserRule getImportURIorNamespaceRule() {
		return getImportURIorNamespaceAccess().getRule();
	}

	//ImportURI:
	//	"import" importURI=STRING;
	public ARTISTCommonGrammarAccess.ImportURIElements getImportURIAccess() {
		return gaARTISTCommon.getImportURIAccess();
	}
	
	public ParserRule getImportURIRule() {
		return getImportURIAccess().getRule();
	}

	//ImportNamespace:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ARTISTCommonGrammarAccess.ImportNamespaceElements getImportNamespaceAccess() {
		return gaARTISTCommon.getImportNamespaceAccess();
	}
	
	public ParserRule getImportNamespaceRule() {
		return getImportNamespaceAccess().getRule();
	}

	//Number returns ecore::EBigDecimal:
	//	INT | POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL | EBIGDECIMAL;
	public ARTISTCommonGrammarAccess.NumberElements getNumberAccess() {
		return gaARTISTCommon.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Impact returns ecore::EBigDecimal:
	//	POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL;
	public ARTISTCommonGrammarAccess.ImpactElements getImpactAccess() {
		return gaARTISTCommon.getImpactAccess();
	}
	
	public ParserRule getImpactRule() {
		return getImpactAccess().getRule();
	}

	//EBooleanObject returns ecore::EBooleanObject:
	//	NULL | EBOOLEAN;
	public ARTISTCommonGrammarAccess.EBooleanObjectElements getEBooleanObjectAccess() {
		return gaARTISTCommon.getEBooleanObjectAccess();
	}
	
	public ParserRule getEBooleanObjectRule() {
		return getEBooleanObjectAccess().getRule();
	}

	//terminal EBOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getEBOOLEANRule() {
		return gaARTISTCommon.getEBOOLEANRule();
	} 

	//terminal NULL:
	//	"null";
	public TerminalRule getNULLRule() {
		return gaARTISTCommon.getNULLRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaARTISTCommon.getINTRule();
	} 

	//terminal POSITIVE_SMALL_DECIMAL returns ecore::EBigDecimal:
	//	"1" ("." "0"+)? | "0" ("." "0".."9"+)? | "." "0".."9"+;
	public TerminalRule getPOSITIVE_SMALL_DECIMALRule() {
		return gaARTISTCommon.getPOSITIVE_SMALL_DECIMALRule();
	} 

	//terminal SMALL_DECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? POSITIVE_SMALL_DECIMAL;
	public TerminalRule getSMALL_DECIMALRule() {
		return gaARTISTCommon.getSMALL_DECIMALRule();
	} 

	//terminal EBIGDECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? (INT | "." INT | INT "." INT);
	public TerminalRule getEBIGDECIMALRule() {
		return gaARTISTCommon.getEBIGDECIMALRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "§") ("a".."z" | "A".."Z" |
	//	"_" | "0".."9" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "§")*;
	public TerminalRule getIDRule() {
		return gaARTISTCommon.getIDRule();
	} 

	//terminal DATE_TIME returns ecore::EDate: // time zone not working: (('+'|'-') INT ((':' INT) | INT)?)?
	//	INT "-" INT "-" INT ("T" INT ":" INT (":" INT ("." INT)?)?)?;
	public TerminalRule getDATE_TIMERule() {
		return gaARTISTCommon.getDATE_TIMERule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaARTISTCommon.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaARTISTCommon.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaARTISTCommon.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaARTISTCommon.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaARTISTCommon.getANY_OTHERRule();
	} 
}
