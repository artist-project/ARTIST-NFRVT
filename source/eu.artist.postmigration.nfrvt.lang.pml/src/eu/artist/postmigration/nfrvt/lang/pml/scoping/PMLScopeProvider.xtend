/*
 * generated by Xtext
 */
package eu.artist.postmigration.nfrvt.lang.pml.scoping

import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.SimpleScope
import eu.artist.postmigration.nfrvt.extensionpoint.RegisteredModelResources
import eu.artist.postmigration.nfrvt.lang.pml.pml.Measurement
import org.eclipse.emf.ecore.EReference

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class PMLScopeProvider extends eu.artist.postmigration.nfrvt.lang.common.scoping.ARTISTCommonScopeProvider {
	def IScope scope_Measurement_context(Measurement measurement, EReference ref) {
		var scope = delegate.getScope(measurement, ref);
		val converter = measurement.eResource.resourceSet.URIConverter;
		val preloadedURIs = RegisteredModelResources.getInstance.URIs.map[u | converter.normalize(u)].toSet;
		scope = new SimpleScope(scope.allElements.filter[desc | !preloadedURIs.contains(converter.normalize(desc.EObjectURI).trimFragment)]);
		return scope;
	}
}
