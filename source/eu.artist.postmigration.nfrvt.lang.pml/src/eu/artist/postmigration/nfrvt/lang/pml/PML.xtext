grammar eu.artist.postmigration.nfrvt.lang.pml.PML with eu.artist.postmigration.nfrvt.lang.common.ARTISTCommon

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/uml2/4.0.0/UML" as uml
import "http://www.artist.eu/postmigration/nfrvt/lang/common/ARTISTCommon" as common
import "http://www.artist.eu/postmigration/nfrvt/lang/nsl/NSL" as nsl

generate pml "http://www.artist.eu/postmigration/nfrvt/lang/pml/PML"

ARTISTModel returns common::ARTISTModel:
	MeasurementModel
;

MeasurementModel returns MeasurementModel:
	{MeasurementModel}
	imports += ImportNamespace*
	observations += Observation*
;

Observation:
	"observation" toolName = ID "{"
		"time" dateTime = DATE_TIME ("," 
		"level" level = STRING)? (","
		"type" measurementType = STRING)? ","		
		"measurements" "["
			(measurements += Measurement ("," measurements += Measurement)*)?
		"]"
	"}"
;
	
Measurement:
	ApplicationMeasurement | BenchmarkMeasurement
;

ApplicationMeasurement:
	DataPointMeasurement | TimeSeriesMeasurement
;

DataPointMeasurement:
	"data-point" name = ID "{"
		"property" property = [nsl::QuantitativeProperty | QualifiedName] ","
		"context" context = [uml::NamedElement | QualifiedName] (","
		"workload" workload = SimpleWorkload)?  (","
		"confidence" confidence = POSITIVE_SMALL_DECIMAL)? ","
		"value" value = ValueSpecification (","
		"info" info = STRING)?
	"}"	
;


TimeSeriesMeasurement:
	"time-series" name = ID "{"
		"property" property = [nsl::QuantitativeProperty | QualifiedName] ","
		"context" context = [uml::NamedElement | QualifiedName] (","
		"workload" workload = SimpleWorkload)? (","
		"confidence" confidence = POSITIVE_SMALL_DECIMAL)? ","
		"values" "["
			values += TimeValuePair ("," values += TimeValuePair)*
		"]" ("," 
		"info" info = STRING)?
	"}"
;

BenchmarkMeasurement:
	"benchmark" name = ID "{"
		"property" property = [nsl::QuantitativeProperty | QualifiedName] ","
		"provider" provider = [uml::EnumerationLiteral | QualifiedName] (","
		"service" service = STRING)? (","
		"test" test = STRING)? (","
		"workload" workload = STRING)? (","
		"confidence" confidence = POSITIVE_SMALL_DECIMAL)? ","
		"value" value = ValueSpecification (","
		"info" info = STRING)?
	"}"	
;

TimeValuePair:
	dateTime = DATE_TIME ":" value = ValueSpecification
;

SimpleWorkload returns common::Workload:
	activity = [uml::Activity | QualifiedName] "with" pattern = STRING
	;