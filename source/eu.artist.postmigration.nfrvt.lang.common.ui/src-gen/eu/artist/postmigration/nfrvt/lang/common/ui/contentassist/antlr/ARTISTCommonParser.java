/*
* generated by Xtext
*/
package eu.artist.postmigration.nfrvt.lang.common.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import eu.artist.postmigration.nfrvt.lang.common.services.ARTISTCommonGrammarAccess;

public class ARTISTCommonParser extends AbstractContentAssistParser {
	
	@Inject
	private ARTISTCommonGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected eu.artist.postmigration.nfrvt.lang.common.ui.contentassist.antlr.internal.InternalARTISTCommonParser createParser() {
		eu.artist.postmigration.nfrvt.lang.common.ui.contentassist.antlr.internal.InternalARTISTCommonParser result = new eu.artist.postmigration.nfrvt.lang.common.ui.contentassist.antlr.internal.InternalARTISTCommonParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDisjunctionAccess().getOperatorAlternatives_1_1_0(), "rule__Disjunction__OperatorAlternatives_1_1_0");
					put(grammarAccess.getComparisonAccess().getOperatorAlternatives_1_1_0(), "rule__Comparison__OperatorAlternatives_1_1_0");
					put(grammarAccess.getBooleanUnitAccess().getAlternatives(), "rule__BooleanUnit__Alternatives");
					put(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_0(), "rule__RelationalExpression__Alternatives_1_0");
					put(grammarAccess.getComparableExpressionAccess().getAlternatives(), "rule__ComparableExpression__Alternatives");
					put(grammarAccess.getAdditiveExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__AdditiveExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__MultiplicativeExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getNumberExpressionAccess().getAlternatives(), "rule__NumberExpression__Alternatives");
					put(grammarAccess.getNumberFunctionAccess().getAlternatives(), "rule__NumberFunction__Alternatives");
					put(grammarAccess.getValueSpecificationAccess().getAlternatives(), "rule__ValueSpecification__Alternatives");
					put(grammarAccess.getObjectSpecificationExpressionAccess().getAlternatives_1(), "rule__ObjectSpecificationExpression__Alternatives_1");
					put(grammarAccess.getLiteralValueExpressionAccess().getAlternatives(), "rule__LiteralValueExpression__Alternatives");
					put(grammarAccess.getOrOperatorAccess().getAlternatives_1(), "rule__OrOperator__Alternatives_1");
					put(grammarAccess.getXOrOperatorAccess().getAlternatives_1(), "rule__XOrOperator__Alternatives_1");
					put(grammarAccess.getAndOperatorAccess().getAlternatives_1(), "rule__AndOperator__Alternatives_1");
					put(grammarAccess.getImplicationOperatorAccess().getAlternatives_1(), "rule__ImplicationOperator__Alternatives_1");
					put(grammarAccess.getNotEqualsOperatorAccess().getAlternatives_1(), "rule__NotEqualsOperator__Alternatives_1");
					put(grammarAccess.getNotOperatorAccess().getAlternatives_1(), "rule__NotOperator__Alternatives_1");
					put(grammarAccess.getImportURIorNamespaceAccess().getAlternatives_1(), "rule__ImportURIorNamespace__Alternatives_1");
					put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
					put(grammarAccess.getImpactAccess().getAlternatives(), "rule__Impact__Alternatives");
					put(grammarAccess.getEBooleanObjectAccess().getAlternatives(), "rule__EBooleanObject__Alternatives");
					put(grammarAccess.getImplicationAccess().getGroup(), "rule__Implication__Group__0");
					put(grammarAccess.getImplicationAccess().getGroup_1(), "rule__Implication__Group_1__0");
					put(grammarAccess.getDisjunctionAccess().getGroup(), "rule__Disjunction__Group__0");
					put(grammarAccess.getDisjunctionAccess().getGroup_1(), "rule__Disjunction__Group_1__0");
					put(grammarAccess.getConjunctionAccess().getGroup(), "rule__Conjunction__Group__0");
					put(grammarAccess.getConjunctionAccess().getGroup_1(), "rule__Conjunction__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getNegationAccess().getGroup(), "rule__Negation__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0(), "rule__RelationalExpression__Group_1_0_0__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_1(), "rule__RelationalExpression__Group_1_0_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_2(), "rule__RelationalExpression__Group_1_0_2__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_3(), "rule__RelationalExpression__Group_1_0_3__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getMaximumFunctionAccess().getGroup(), "rule__MaximumFunction__Group__0");
					put(grammarAccess.getMaximumFunctionAccess().getGroup_3(), "rule__MaximumFunction__Group_3__0");
					put(grammarAccess.getMinimumFunctionAccess().getGroup(), "rule__MinimumFunction__Group__0");
					put(grammarAccess.getMinimumFunctionAccess().getGroup_3(), "rule__MinimumFunction__Group_3__0");
					put(grammarAccess.getAverageFunctionAccess().getGroup(), "rule__AverageFunction__Group__0");
					put(grammarAccess.getAverageFunctionAccess().getGroup_3(), "rule__AverageFunction__Group_3__0");
					put(grammarAccess.getSumFunctionAccess().getGroup(), "rule__SumFunction__Group__0");
					put(grammarAccess.getSumFunctionAccess().getGroup_3(), "rule__SumFunction__Group_3__0");
					put(grammarAccess.getExponentialFunctionAccess().getGroup(), "rule__ExponentialFunction__Group__0");
					put(grammarAccess.getAbsoluteFunctionAccess().getGroup(), "rule__AbsoluteFunction__Group__0");
					put(grammarAccess.getNaturalLogarithmFunctionAccess().getGroup(), "rule__NaturalLogarithmFunction__Group__0");
					put(grammarAccess.getCommonLogarithmFunctionAccess().getGroup(), "rule__CommonLogarithmFunction__Group__0");
					put(grammarAccess.getParenthesizedExpressionAccess().getGroup(), "rule__ParenthesizedExpression__Group__0");
					put(grammarAccess.getObjectSpecificationExpressionAccess().getGroup(), "rule__ObjectSpecificationExpression__Group__0");
					put(grammarAccess.getCollectionAccess().getGroup(), "rule__Collection__Group__0");
					put(grammarAccess.getCollectionAccess().getGroup_2(), "rule__Collection__Group_2__0");
					put(grammarAccess.getCollectionAccess().getGroup_2_1(), "rule__Collection__Group_2_1__0");
					put(grammarAccess.getTupleAccess().getGroup(), "rule__Tuple__Group__0");
					put(grammarAccess.getTupleAccess().getGroup_2(), "rule__Tuple__Group_2__0");
					put(grammarAccess.getTupleAccess().getGroup_2_1(), "rule__Tuple__Group_2_1__0");
					put(grammarAccess.getPropertyValuePairAccess().getGroup(), "rule__PropertyValuePair__Group__0");
					put(grammarAccess.getOrOperatorAccess().getGroup(), "rule__OrOperator__Group__0");
					put(grammarAccess.getXOrOperatorAccess().getGroup(), "rule__XOrOperator__Group__0");
					put(grammarAccess.getAndOperatorAccess().getGroup(), "rule__AndOperator__Group__0");
					put(grammarAccess.getImplicationOperatorAccess().getGroup(), "rule__ImplicationOperator__Group__0");
					put(grammarAccess.getEqualsOperatorAccess().getGroup(), "rule__EqualsOperator__Group__0");
					put(grammarAccess.getNotEqualsOperatorAccess().getGroup(), "rule__NotEqualsOperator__Group__0");
					put(grammarAccess.getNotOperatorAccess().getGroup(), "rule__NotOperator__Group__0");
					put(grammarAccess.getGreaterThanOperatorAccess().getGroup(), "rule__GreaterThanOperator__Group__0");
					put(grammarAccess.getGreaterOrEqualThanOperatorAccess().getGroup(), "rule__GreaterOrEqualThanOperator__Group__0");
					put(grammarAccess.getLessThanOperatorAccess().getGroup(), "rule__LessThanOperator__Group__0");
					put(grammarAccess.getLessOrEqualThanOperatorAccess().getGroup(), "rule__LessOrEqualThanOperator__Group__0");
					put(grammarAccess.getAdditionOperatorAccess().getGroup(), "rule__AdditionOperator__Group__0");
					put(grammarAccess.getSubstractionOperatorAccess().getGroup(), "rule__SubstractionOperator__Group__0");
					put(grammarAccess.getMultiplicationOperatorAccess().getGroup(), "rule__MultiplicationOperator__Group__0");
					put(grammarAccess.getDivisionOperatorAccess().getGroup(), "rule__DivisionOperator__Group__0");
					put(grammarAccess.getModulusOperatorAccess().getGroup(), "rule__ModulusOperator__Group__0");
					put(grammarAccess.getMaxOperatorAccess().getGroup(), "rule__MaxOperator__Group__0");
					put(grammarAccess.getMinOperatorAccess().getGroup(), "rule__MinOperator__Group__0");
					put(grammarAccess.getAvgOperatorAccess().getGroup(), "rule__AvgOperator__Group__0");
					put(grammarAccess.getSumOperatorAccess().getGroup(), "rule__SumOperator__Group__0");
					put(grammarAccess.getExponentialOperatorAccess().getGroup(), "rule__ExponentialOperator__Group__0");
					put(grammarAccess.getAbsoluteOperatorAccess().getGroup(), "rule__AbsoluteOperator__Group__0");
					put(grammarAccess.getNaturalLogarithmOperatorAccess().getGroup(), "rule__NaturalLogarithmOperator__Group__0");
					put(grammarAccess.getCommonLogarithmOperatorAccess().getGroup(), "rule__CommonLogarithmOperator__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getARTISTModelAccess().getGroup(), "rule__ARTISTModel__Group__0");
					put(grammarAccess.getWorkloadAccess().getGroup(), "rule__Workload__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getImportURIorNamespaceAccess().getGroup(), "rule__ImportURIorNamespace__Group__0");
					put(grammarAccess.getImportURIAccess().getGroup(), "rule__ImportURI__Group__0");
					put(grammarAccess.getImportNamespaceAccess().getGroup(), "rule__ImportNamespace__Group__0");
					put(grammarAccess.getImplicationAccess().getOperatorAssignment_1_1(), "rule__Implication__OperatorAssignment_1_1");
					put(grammarAccess.getImplicationAccess().getRightAssignment_1_2(), "rule__Implication__RightAssignment_1_2");
					put(grammarAccess.getDisjunctionAccess().getOperatorAssignment_1_1(), "rule__Disjunction__OperatorAssignment_1_1");
					put(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2(), "rule__Disjunction__RightAssignment_1_2");
					put(grammarAccess.getConjunctionAccess().getOperatorAssignment_1_1(), "rule__Conjunction__OperatorAssignment_1_1");
					put(grammarAccess.getConjunctionAccess().getRightAssignment_1_2(), "rule__Conjunction__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOperatorAssignment_1_1(), "rule__Comparison__OperatorAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getNegationAccess().getOperatorAssignment_0(), "rule__Negation__OperatorAssignment_0");
					put(grammarAccess.getNegationAccess().getValueAssignment_1(), "rule__Negation__ValueAssignment_1");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__RelationalExpression__OperatorAssignment_1_0_0_1");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_1_1(), "rule__RelationalExpression__OperatorAssignment_1_0_1_1");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_2_1(), "rule__RelationalExpression__OperatorAssignment_1_0_2_1");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_3_1(), "rule__RelationalExpression__OperatorAssignment_1_0_3_1");
					put(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1(), "rule__RelationalExpression__RightAssignment_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1(), "rule__AdditiveExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2(), "rule__AdditiveExpression__RightAssignment_1_2");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1(), "rule__MultiplicativeExpression__OperatorAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2(), "rule__MultiplicativeExpression__RightAssignment_1_2");
					put(grammarAccess.getMaximumFunctionAccess().getOperatorAssignment_0(), "rule__MaximumFunction__OperatorAssignment_0");
					put(grammarAccess.getMaximumFunctionAccess().getValuesAssignment_2(), "rule__MaximumFunction__ValuesAssignment_2");
					put(grammarAccess.getMaximumFunctionAccess().getValuesAssignment_3_1(), "rule__MaximumFunction__ValuesAssignment_3_1");
					put(grammarAccess.getMinimumFunctionAccess().getOperatorAssignment_0(), "rule__MinimumFunction__OperatorAssignment_0");
					put(grammarAccess.getMinimumFunctionAccess().getValuesAssignment_2(), "rule__MinimumFunction__ValuesAssignment_2");
					put(grammarAccess.getMinimumFunctionAccess().getValuesAssignment_3_1(), "rule__MinimumFunction__ValuesAssignment_3_1");
					put(grammarAccess.getAverageFunctionAccess().getOperatorAssignment_0(), "rule__AverageFunction__OperatorAssignment_0");
					put(grammarAccess.getAverageFunctionAccess().getValuesAssignment_2(), "rule__AverageFunction__ValuesAssignment_2");
					put(grammarAccess.getAverageFunctionAccess().getValuesAssignment_3_1(), "rule__AverageFunction__ValuesAssignment_3_1");
					put(grammarAccess.getSumFunctionAccess().getOperatorAssignment_0(), "rule__SumFunction__OperatorAssignment_0");
					put(grammarAccess.getSumFunctionAccess().getValuesAssignment_2(), "rule__SumFunction__ValuesAssignment_2");
					put(grammarAccess.getSumFunctionAccess().getValuesAssignment_3_1(), "rule__SumFunction__ValuesAssignment_3_1");
					put(grammarAccess.getExponentialFunctionAccess().getOperatorAssignment_0(), "rule__ExponentialFunction__OperatorAssignment_0");
					put(grammarAccess.getExponentialFunctionAccess().getBaseAssignment_2(), "rule__ExponentialFunction__BaseAssignment_2");
					put(grammarAccess.getExponentialFunctionAccess().getExponentAssignment_4(), "rule__ExponentialFunction__ExponentAssignment_4");
					put(grammarAccess.getAbsoluteFunctionAccess().getOperatorAssignment_0(), "rule__AbsoluteFunction__OperatorAssignment_0");
					put(grammarAccess.getAbsoluteFunctionAccess().getValueAssignment_2(), "rule__AbsoluteFunction__ValueAssignment_2");
					put(grammarAccess.getNaturalLogarithmFunctionAccess().getOperatorAssignment_0(), "rule__NaturalLogarithmFunction__OperatorAssignment_0");
					put(grammarAccess.getNaturalLogarithmFunctionAccess().getValueAssignment_2(), "rule__NaturalLogarithmFunction__ValueAssignment_2");
					put(grammarAccess.getCommonLogarithmFunctionAccess().getOperatorAssignment_0(), "rule__CommonLogarithmFunction__OperatorAssignment_0");
					put(grammarAccess.getCommonLogarithmFunctionAccess().getValueAssignment_2(), "rule__CommonLogarithmFunction__ValueAssignment_2");
					put(grammarAccess.getParenthesizedExpressionAccess().getValueAssignment_1(), "rule__ParenthesizedExpression__ValueAssignment_1");
					put(grammarAccess.getObjectSpecificationExpressionAccess().getTypeAssignment_0(), "rule__ObjectSpecificationExpression__TypeAssignment_0");
					put(grammarAccess.getObjectSpecificationExpressionAccess().getValueAssignment_1_0(), "rule__ObjectSpecificationExpression__ValueAssignment_1_0");
					put(grammarAccess.getObjectSpecificationExpressionAccess().getValueAssignment_1_1(), "rule__ObjectSpecificationExpression__ValueAssignment_1_1");
					put(grammarAccess.getCollectionAccess().getValuesAssignment_2_0(), "rule__Collection__ValuesAssignment_2_0");
					put(grammarAccess.getCollectionAccess().getValuesAssignment_2_1_1(), "rule__Collection__ValuesAssignment_2_1_1");
					put(grammarAccess.getTupleAccess().getTuplesAssignment_2_0(), "rule__Tuple__TuplesAssignment_2_0");
					put(grammarAccess.getTupleAccess().getTuplesAssignment_2_1_1(), "rule__Tuple__TuplesAssignment_2_1_1");
					put(grammarAccess.getPropertyValuePairAccess().getPropertyAssignment_0(), "rule__PropertyValuePair__PropertyAssignment_0");
					put(grammarAccess.getPropertyValuePairAccess().getValueAssignment_2(), "rule__PropertyValuePair__ValueAssignment_2");
					put(grammarAccess.getInstanceSpecificationExpressionAccess().getValueAssignment(), "rule__InstanceSpecificationExpression__ValueAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
					put(grammarAccess.getNullLiteralAccess().getValueAssignment(), "rule__NullLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getUnlimitedLiteralAccess().getValueAssignment(), "rule__UnlimitedLiteral__ValueAssignment");
					put(grammarAccess.getARTISTModelAccess().getImportsAssignment_1(), "rule__ARTISTModel__ImportsAssignment_1");
					put(grammarAccess.getWorkloadAccess().getNameAssignment_0(), "rule__Workload__NameAssignment_0");
					put(grammarAccess.getWorkloadAccess().getActivityAssignment_3(), "rule__Workload__ActivityAssignment_3");
					put(grammarAccess.getWorkloadAccess().getPatternAssignment_6(), "rule__Workload__PatternAssignment_6");
					put(grammarAccess.getImportURIorNamespaceAccess().getImportURIAssignment_1_0(), "rule__ImportURIorNamespace__ImportURIAssignment_1_0");
					put(grammarAccess.getImportURIorNamespaceAccess().getImportedNamespaceAssignment_1_1(), "rule__ImportURIorNamespace__ImportedNamespaceAssignment_1_1");
					put(grammarAccess.getImportURIAccess().getImportURIAssignment_1(), "rule__ImportURI__ImportURIAssignment_1");
					put(grammarAccess.getImportNamespaceAccess().getImportedNamespaceAssignment_1(), "rule__ImportNamespace__ImportedNamespaceAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			eu.artist.postmigration.nfrvt.lang.common.ui.contentassist.antlr.internal.InternalARTISTCommonParser typedParser = (eu.artist.postmigration.nfrvt.lang.common.ui.contentassist.antlr.internal.InternalARTISTCommonParser) parser;
			typedParser.entryRuleExpression();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ARTISTCommonGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ARTISTCommonGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
