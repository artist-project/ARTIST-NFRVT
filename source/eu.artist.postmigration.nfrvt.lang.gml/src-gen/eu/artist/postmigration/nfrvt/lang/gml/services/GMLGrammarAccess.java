/*
* generated by Xtext
*/
package eu.artist.postmigration.nfrvt.lang.gml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import eu.artist.postmigration.nfrvt.lang.common.services.ARTISTCommonGrammarAccess;

@Singleton
public class GMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ARTISTModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARTISTModel");
		private final RuleCall cGoalModelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ARTISTModel returns common::ARTISTModel:
		//	GoalModel;
		public ParserRule getRule() { return rule; }

		//GoalModel
		public RuleCall getGoalModelParserRuleCall() { return cGoalModelParserRuleCall; }
	}

	public class GoalModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportNamespaceParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cGoalmodelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWorkloadsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cWorkloadsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cWorkloadsWorkloadParserRuleCall_6_0_0 = (RuleCall)cWorkloadsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cWorkloadsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cWorkloadsWorkloadParserRuleCall_6_1_1_0 = (RuleCall)cWorkloadsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cAppliedPropertiesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cAppliedPropertiesAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cAppliedPropertiesAppliedPropertyParserRuleCall_10_0_0 = (RuleCall)cAppliedPropertiesAssignment_10_0.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Keyword cCommaKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cAppliedPropertiesAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cAppliedPropertiesAppliedPropertyParserRuleCall_10_1_1_0 = (RuleCall)cAppliedPropertiesAssignment_10_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cGoalsKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cLeftSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Assignment cGoalsAssignment_14_0 = (Assignment)cGroup_14.eContents().get(0);
		private final RuleCall cGoalsGoalParserRuleCall_14_0_0 = (RuleCall)cGoalsAssignment_14_0.eContents().get(0);
		private final Group cGroup_14_1 = (Group)cGroup_14.eContents().get(1);
		private final Keyword cCommaKeyword_14_1_0 = (Keyword)cGroup_14_1.eContents().get(0);
		private final Assignment cGoalsAssignment_14_1_1 = (Assignment)cGroup_14_1.eContents().get(1);
		private final RuleCall cGoalsGoalParserRuleCall_14_1_1_0 = (RuleCall)cGoalsAssignment_14_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//GoalModel:
		//	imports+=ImportNamespace* "goalmodel" name=QualifiedName "{" "workloads" "[" (workloads+=Workload (","
		//	workloads+=Workload)*)? "]" "applied-properties" "[" (appliedProperties+=AppliedProperty (","
		//	appliedProperties+=AppliedProperty)*)? "]" "goals" "[" (goals+=Goal ("," goals+=Goal)*)? "]" "}";
		public ParserRule getRule() { return rule; }

		//imports+=ImportNamespace* "goalmodel" name=QualifiedName "{" "workloads" "[" (workloads+=Workload (","
		//workloads+=Workload)*)? "]" "applied-properties" "[" (appliedProperties+=AppliedProperty (","
		//appliedProperties+=AppliedProperty)*)? "]" "goals" "[" (goals+=Goal ("," goals+=Goal)*)? "]" "}"
		public Group getGroup() { return cGroup; }

		//imports+=ImportNamespace*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//ImportNamespace
		public RuleCall getImportsImportNamespaceParserRuleCall_0_0() { return cImportsImportNamespaceParserRuleCall_0_0; }

		//"goalmodel"
		public Keyword getGoalmodelKeyword_1() { return cGoalmodelKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"workloads"
		public Keyword getWorkloadsKeyword_4() { return cWorkloadsKeyword_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//(workloads+=Workload ("," workloads+=Workload)*)?
		public Group getGroup_6() { return cGroup_6; }

		//workloads+=Workload
		public Assignment getWorkloadsAssignment_6_0() { return cWorkloadsAssignment_6_0; }

		//Workload
		public RuleCall getWorkloadsWorkloadParserRuleCall_6_0_0() { return cWorkloadsWorkloadParserRuleCall_6_0_0; }

		//("," workloads+=Workload)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//workloads+=Workload
		public Assignment getWorkloadsAssignment_6_1_1() { return cWorkloadsAssignment_6_1_1; }

		//Workload
		public RuleCall getWorkloadsWorkloadParserRuleCall_6_1_1_0() { return cWorkloadsWorkloadParserRuleCall_6_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }

		//"applied-properties"
		public Keyword getAppliedPropertiesKeyword_8() { return cAppliedPropertiesKeyword_8; }

		//"["
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }

		//(appliedProperties+=AppliedProperty ("," appliedProperties+=AppliedProperty)*)?
		public Group getGroup_10() { return cGroup_10; }

		//appliedProperties+=AppliedProperty
		public Assignment getAppliedPropertiesAssignment_10_0() { return cAppliedPropertiesAssignment_10_0; }

		//AppliedProperty
		public RuleCall getAppliedPropertiesAppliedPropertyParserRuleCall_10_0_0() { return cAppliedPropertiesAppliedPropertyParserRuleCall_10_0_0; }

		//("," appliedProperties+=AppliedProperty)*
		public Group getGroup_10_1() { return cGroup_10_1; }

		//","
		public Keyword getCommaKeyword_10_1_0() { return cCommaKeyword_10_1_0; }

		//appliedProperties+=AppliedProperty
		public Assignment getAppliedPropertiesAssignment_10_1_1() { return cAppliedPropertiesAssignment_10_1_1; }

		//AppliedProperty
		public RuleCall getAppliedPropertiesAppliedPropertyParserRuleCall_10_1_1_0() { return cAppliedPropertiesAppliedPropertyParserRuleCall_10_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }

		//"goals"
		public Keyword getGoalsKeyword_12() { return cGoalsKeyword_12; }

		//"["
		public Keyword getLeftSquareBracketKeyword_13() { return cLeftSquareBracketKeyword_13; }

		//(goals+=Goal ("," goals+=Goal)*)?
		public Group getGroup_14() { return cGroup_14; }

		//goals+=Goal
		public Assignment getGoalsAssignment_14_0() { return cGoalsAssignment_14_0; }

		//Goal
		public RuleCall getGoalsGoalParserRuleCall_14_0_0() { return cGoalsGoalParserRuleCall_14_0_0; }

		//("," goals+=Goal)*
		public Group getGroup_14_1() { return cGroup_14_1; }

		//","
		public Keyword getCommaKeyword_14_1_0() { return cCommaKeyword_14_1_0; }

		//goals+=Goal
		public Assignment getGoalsAssignment_14_1_1() { return cGoalsAssignment_14_1_1; }

		//Goal
		public RuleCall getGoalsGoalParserRuleCall_14_1_1_0() { return cGoalsGoalParserRuleCall_14_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_15() { return cRightSquareBracketKeyword_15; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}

	public class WorkloadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Workload");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cActivityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActivityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActivityActivityCrossReference_3_0 = (CrossReference)cActivityAssignment_3.eContents().get(0);
		private final RuleCall cActivityActivityQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cActivityActivityCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cPatternKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPatternAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPatternSTRINGTerminalRuleCall_6_0 = (RuleCall)cPatternAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Workload returns common::Workload:
		//	name=ID "{" "activity" activity=[uml::Activity|QualifiedName] "," "pattern" pattern=STRING "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" "activity" activity=[uml::Activity|QualifiedName] "," "pattern" pattern=STRING "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"activity"
		public Keyword getActivityKeyword_2() { return cActivityKeyword_2; }

		//activity=[uml::Activity|QualifiedName]
		public Assignment getActivityAssignment_3() { return cActivityAssignment_3; }

		//[uml::Activity|QualifiedName]
		public CrossReference getActivityActivityCrossReference_3_0() { return cActivityActivityCrossReference_3_0; }

		//QualifiedName
		public RuleCall getActivityActivityQualifiedNameParserRuleCall_3_0_1() { return cActivityActivityQualifiedNameParserRuleCall_3_0_1; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"pattern"
		public Keyword getPatternKeyword_5() { return cPatternKeyword_5; }

		//pattern=STRING
		public Assignment getPatternAssignment_6() { return cPatternAssignment_6; }

		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_6_0() { return cPatternSTRINGTerminalRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class AppliedPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AppliedProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAppliedQualitativePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAppliedQuantitativePropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AppliedProperty:
		//	AppliedQualitativeProperty | AppliedQuantitativeProperty;
		public ParserRule getRule() { return rule; }

		//AppliedQualitativeProperty | AppliedQuantitativeProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//AppliedQualitativeProperty
		public RuleCall getAppliedQualitativePropertyParserRuleCall_0() { return cAppliedQualitativePropertyParserRuleCall_0; }

		//AppliedQuantitativeProperty
		public RuleCall getAppliedQuantitativePropertyParserRuleCall_1() { return cAppliedQuantitativePropertyParserRuleCall_1; }
	}

	public class AppliedQualitativePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AppliedQualitativeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQualitativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPropertyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPropertyQualitativePropertyCrossReference_4_0 = (CrossReference)cPropertyAssignment_4.eContents().get(0);
		private final RuleCall cPropertyQualitativePropertyQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cPropertyQualitativePropertyCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cContextKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Assignment cContextAssignment_5_3_0 = (Assignment)cGroup_5_3.eContents().get(0);
		private final CrossReference cContextNamedElementCrossReference_5_3_0_0 = (CrossReference)cContextAssignment_5_3_0.eContents().get(0);
		private final RuleCall cContextNamedElementQualifiedNameParserRuleCall_5_3_0_0_1 = (RuleCall)cContextNamedElementCrossReference_5_3_0_0.eContents().get(1);
		private final Group cGroup_5_3_1 = (Group)cGroup_5_3.eContents().get(1);
		private final Keyword cCommaKeyword_5_3_1_0 = (Keyword)cGroup_5_3_1.eContents().get(0);
		private final Assignment cContextAssignment_5_3_1_1 = (Assignment)cGroup_5_3_1.eContents().get(1);
		private final CrossReference cContextNamedElementCrossReference_5_3_1_1_0 = (CrossReference)cContextAssignment_5_3_1_1.eContents().get(0);
		private final RuleCall cContextNamedElementQualifiedNameParserRuleCall_5_3_1_1_0_1 = (RuleCall)cContextNamedElementCrossReference_5_3_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AppliedQualitativeProperty:
		//	"qualitative" name=ID "{" "property" property=[nsl::QualitativeProperty|QualifiedName] ("," "context" "["
		//	(context+=[uml::NamedElement|QualifiedName] ("," context+=[uml::NamedElement|QualifiedName])*)? "]")? "}";
		public ParserRule getRule() { return rule; }

		//"qualitative" name=ID "{" "property" property=[nsl::QualitativeProperty|QualifiedName] ("," "context" "["
		//(context+=[uml::NamedElement|QualifiedName] ("," context+=[uml::NamedElement|QualifiedName])*)? "]")? "}"
		public Group getGroup() { return cGroup; }

		//"qualitative"
		public Keyword getQualitativeKeyword_0() { return cQualitativeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"property"
		public Keyword getPropertyKeyword_3() { return cPropertyKeyword_3; }

		//property=[nsl::QualitativeProperty|QualifiedName]
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }

		//[nsl::QualitativeProperty|QualifiedName]
		public CrossReference getPropertyQualitativePropertyCrossReference_4_0() { return cPropertyQualitativePropertyCrossReference_4_0; }

		//QualifiedName
		public RuleCall getPropertyQualitativePropertyQualifiedNameParserRuleCall_4_0_1() { return cPropertyQualitativePropertyQualifiedNameParserRuleCall_4_0_1; }

		//("," "context" "[" (context+=[uml::NamedElement|QualifiedName] ("," context+=[uml::NamedElement|QualifiedName])*)? "]")?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"context"
		public Keyword getContextKeyword_5_1() { return cContextKeyword_5_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_2() { return cLeftSquareBracketKeyword_5_2; }

		//(context+=[uml::NamedElement|QualifiedName] ("," context+=[uml::NamedElement|QualifiedName])*)?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//context+=[uml::NamedElement|QualifiedName]
		public Assignment getContextAssignment_5_3_0() { return cContextAssignment_5_3_0; }

		//[uml::NamedElement|QualifiedName]
		public CrossReference getContextNamedElementCrossReference_5_3_0_0() { return cContextNamedElementCrossReference_5_3_0_0; }

		//QualifiedName
		public RuleCall getContextNamedElementQualifiedNameParserRuleCall_5_3_0_0_1() { return cContextNamedElementQualifiedNameParserRuleCall_5_3_0_0_1; }

		//("," context+=[uml::NamedElement|QualifiedName])*
		public Group getGroup_5_3_1() { return cGroup_5_3_1; }

		//","
		public Keyword getCommaKeyword_5_3_1_0() { return cCommaKeyword_5_3_1_0; }

		//context+=[uml::NamedElement|QualifiedName]
		public Assignment getContextAssignment_5_3_1_1() { return cContextAssignment_5_3_1_1; }

		//[uml::NamedElement|QualifiedName]
		public CrossReference getContextNamedElementCrossReference_5_3_1_1_0() { return cContextNamedElementCrossReference_5_3_1_1_0; }

		//QualifiedName
		public RuleCall getContextNamedElementQualifiedNameParserRuleCall_5_3_1_1_0_1() { return cContextNamedElementQualifiedNameParserRuleCall_5_3_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_4() { return cRightSquareBracketKeyword_5_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AppliedQuantitativePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AppliedQuantitativeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuantitativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPropertyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPropertyQuantitativePropertyCrossReference_4_0 = (CrossReference)cPropertyAssignment_4.eContents().get(0);
		private final RuleCall cPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cPropertyQuantitativePropertyCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cFunctionKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cFunctionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final Alternatives cFunctionAlternatives_5_2_0 = (Alternatives)cFunctionAssignment_5_2.eContents().get(0);
		private final RuleCall cFunctionMinOperatorParserRuleCall_5_2_0_0 = (RuleCall)cFunctionAlternatives_5_2_0.eContents().get(0);
		private final RuleCall cFunctionMaxOperatorParserRuleCall_5_2_0_1 = (RuleCall)cFunctionAlternatives_5_2_0.eContents().get(1);
		private final RuleCall cFunctionAvgOperatorParserRuleCall_5_2_0_2 = (RuleCall)cFunctionAlternatives_5_2_0.eContents().get(2);
		private final RuleCall cFunctionSumOperatorParserRuleCall_5_2_0_3 = (RuleCall)cFunctionAlternatives_5_2_0.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cContextKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Assignment cContextAssignment_6_3_0 = (Assignment)cGroup_6_3.eContents().get(0);
		private final CrossReference cContextNamedElementCrossReference_6_3_0_0 = (CrossReference)cContextAssignment_6_3_0.eContents().get(0);
		private final RuleCall cContextNamedElementQualifiedNameParserRuleCall_6_3_0_0_1 = (RuleCall)cContextNamedElementCrossReference_6_3_0_0.eContents().get(1);
		private final Group cGroup_6_3_1 = (Group)cGroup_6_3.eContents().get(1);
		private final Keyword cCommaKeyword_6_3_1_0 = (Keyword)cGroup_6_3_1.eContents().get(0);
		private final Assignment cContextAssignment_6_3_1_1 = (Assignment)cGroup_6_3_1.eContents().get(1);
		private final CrossReference cContextNamedElementCrossReference_6_3_1_1_0 = (CrossReference)cContextAssignment_6_3_1_1.eContents().get(0);
		private final RuleCall cContextNamedElementQualifiedNameParserRuleCall_6_3_1_1_0_1 = (RuleCall)cContextNamedElementCrossReference_6_3_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cWorkloadKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cWorkloadAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cWorkloadWorkloadCrossReference_7_2_0 = (CrossReference)cWorkloadAssignment_7_2.eContents().get(0);
		private final RuleCall cWorkloadWorkloadQualifiedNameParserRuleCall_7_2_0_1 = (RuleCall)cWorkloadWorkloadCrossReference_7_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AppliedQuantitativeProperty:
		//	"quantitative" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] ("," "function"
		//	function=(MinOperator | MaxOperator | AvgOperator | SumOperator))? ("," "context" "["
		//	(context+=[uml::NamedElement|QualifiedName] ("," context+=[uml::NamedElement|QualifiedName])*)? "]")? ("," "workload"
		//	workload=[common::Workload|QualifiedName])? "}";
		public ParserRule getRule() { return rule; }

		//"quantitative" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] ("," "function"
		//function=(MinOperator | MaxOperator | AvgOperator | SumOperator))? ("," "context" "["
		//(context+=[uml::NamedElement|QualifiedName] ("," context+=[uml::NamedElement|QualifiedName])*)? "]")? ("," "workload"
		//workload=[common::Workload|QualifiedName])? "}"
		public Group getGroup() { return cGroup; }

		//"quantitative"
		public Keyword getQuantitativeKeyword_0() { return cQuantitativeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"property"
		public Keyword getPropertyKeyword_3() { return cPropertyKeyword_3; }

		//property=[nsl::QuantitativeProperty|QualifiedName]
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }

		//[nsl::QuantitativeProperty|QualifiedName]
		public CrossReference getPropertyQuantitativePropertyCrossReference_4_0() { return cPropertyQuantitativePropertyCrossReference_4_0; }

		//QualifiedName
		public RuleCall getPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1() { return cPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1; }

		//("," "function" function=(MinOperator | MaxOperator | AvgOperator | SumOperator))?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"function"
		public Keyword getFunctionKeyword_5_1() { return cFunctionKeyword_5_1; }

		//function=(MinOperator | MaxOperator | AvgOperator | SumOperator)
		public Assignment getFunctionAssignment_5_2() { return cFunctionAssignment_5_2; }

		//MinOperator | MaxOperator | AvgOperator | SumOperator
		public Alternatives getFunctionAlternatives_5_2_0() { return cFunctionAlternatives_5_2_0; }

		//MinOperator
		public RuleCall getFunctionMinOperatorParserRuleCall_5_2_0_0() { return cFunctionMinOperatorParserRuleCall_5_2_0_0; }

		//MaxOperator
		public RuleCall getFunctionMaxOperatorParserRuleCall_5_2_0_1() { return cFunctionMaxOperatorParserRuleCall_5_2_0_1; }

		//AvgOperator
		public RuleCall getFunctionAvgOperatorParserRuleCall_5_2_0_2() { return cFunctionAvgOperatorParserRuleCall_5_2_0_2; }

		//SumOperator
		public RuleCall getFunctionSumOperatorParserRuleCall_5_2_0_3() { return cFunctionSumOperatorParserRuleCall_5_2_0_3; }

		//("," "context" "[" (context+=[uml::NamedElement|QualifiedName] ("," context+=[uml::NamedElement|QualifiedName])*)? "]")?
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//"context"
		public Keyword getContextKeyword_6_1() { return cContextKeyword_6_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_2() { return cLeftSquareBracketKeyword_6_2; }

		//(context+=[uml::NamedElement|QualifiedName] ("," context+=[uml::NamedElement|QualifiedName])*)?
		public Group getGroup_6_3() { return cGroup_6_3; }

		//context+=[uml::NamedElement|QualifiedName]
		public Assignment getContextAssignment_6_3_0() { return cContextAssignment_6_3_0; }

		//[uml::NamedElement|QualifiedName]
		public CrossReference getContextNamedElementCrossReference_6_3_0_0() { return cContextNamedElementCrossReference_6_3_0_0; }

		//QualifiedName
		public RuleCall getContextNamedElementQualifiedNameParserRuleCall_6_3_0_0_1() { return cContextNamedElementQualifiedNameParserRuleCall_6_3_0_0_1; }

		//("," context+=[uml::NamedElement|QualifiedName])*
		public Group getGroup_6_3_1() { return cGroup_6_3_1; }

		//","
		public Keyword getCommaKeyword_6_3_1_0() { return cCommaKeyword_6_3_1_0; }

		//context+=[uml::NamedElement|QualifiedName]
		public Assignment getContextAssignment_6_3_1_1() { return cContextAssignment_6_3_1_1; }

		//[uml::NamedElement|QualifiedName]
		public CrossReference getContextNamedElementCrossReference_6_3_1_1_0() { return cContextNamedElementCrossReference_6_3_1_1_0; }

		//QualifiedName
		public RuleCall getContextNamedElementQualifiedNameParserRuleCall_6_3_1_1_0_1() { return cContextNamedElementQualifiedNameParserRuleCall_6_3_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_4() { return cRightSquareBracketKeyword_6_4; }

		//("," "workload" workload=[common::Workload|QualifiedName])?
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//"workload"
		public Keyword getWorkloadKeyword_7_1() { return cWorkloadKeyword_7_1; }

		//workload=[common::Workload|QualifiedName]
		public Assignment getWorkloadAssignment_7_2() { return cWorkloadAssignment_7_2; }

		//[common::Workload|QualifiedName]
		public CrossReference getWorkloadWorkloadCrossReference_7_2_0() { return cWorkloadWorkloadCrossReference_7_2_0; }

		//QualifiedName
		public RuleCall getWorkloadWorkloadQualifiedNameParserRuleCall_7_2_0_1() { return cWorkloadWorkloadQualifiedNameParserRuleCall_7_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSoftGoalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHardGoalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeGoalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Goal:
		//	SoftGoal | HardGoal | CompositeGoal;
		public ParserRule getRule() { return rule; }

		//SoftGoal | HardGoal | CompositeGoal
		public Alternatives getAlternatives() { return cAlternatives; }

		//SoftGoal
		public RuleCall getSoftGoalParserRuleCall_0() { return cSoftGoalParserRuleCall_0; }

		//HardGoal
		public RuleCall getHardGoalParserRuleCall_1() { return cHardGoalParserRuleCall_1; }

		//CompositeGoal
		public RuleCall getCompositeGoalParserRuleCall_2() { return cCompositeGoalParserRuleCall_2; }
	}

	public class SoftGoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SoftGoal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSoftgoalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cKindKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKindGoalKindEnumRuleCall_4_0 = (RuleCall)cKindAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cPriorityKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPriorityAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPriorityINTTerminalRuleCall_7_0 = (RuleCall)cPriorityAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cPropertyKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cDollarSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPropertyAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cPropertyAppliedQualitativePropertyCrossReference_11_0 = (CrossReference)cPropertyAssignment_11.eContents().get(0);
		private final RuleCall cPropertyAppliedQualitativePropertyQualifiedNameParserRuleCall_11_0_1 = (RuleCall)cPropertyAppliedQualitativePropertyCrossReference_11_0.eContents().get(1);
		private final Keyword cCommaKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cThresholdKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cThresholdAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cThresholdImpactParserRuleCall_14_0 = (RuleCall)cThresholdAssignment_14.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cCommaKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cImpactsKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cImpactsAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cImpactsSoftGoalImpactParserRuleCall_15_3_0 = (RuleCall)cImpactsAssignment_15_3.eContents().get(0);
		private final Group cGroup_15_4 = (Group)cGroup_15.eContents().get(4);
		private final Keyword cCommaKeyword_15_4_0 = (Keyword)cGroup_15_4.eContents().get(0);
		private final Assignment cImpactsAssignment_15_4_1 = (Assignment)cGroup_15_4.eContents().get(1);
		private final RuleCall cImpactsSoftGoalImpactParserRuleCall_15_4_1_0 = (RuleCall)cImpactsAssignment_15_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_15_5 = (Keyword)cGroup_15.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//SoftGoal:
		//	"softgoal" name=ID "{" "kind" kind=GoalKind "," "priority" priority=INT "," "property" "$"
		//	property=[AppliedQualitativeProperty|QualifiedName] //		"context" "[" context += [uml::NamedElement | QualifiedName] ("," context += [uml::NamedElement | QualifiedName])* "]" ","
		//	"," "threshold" threshold=Impact ("," "impacts" "[" impacts+=SoftGoalImpact ("," impacts+=SoftGoalImpact)* "]")? "}";
		public ParserRule getRule() { return rule; }

		//"softgoal" name=ID "{" "kind" kind=GoalKind "," "priority" priority=INT "," "property" "$"
		//property=[AppliedQualitativeProperty|QualifiedName] //		"context" "[" context += [uml::NamedElement | QualifiedName] ("," context += [uml::NamedElement | QualifiedName])* "]" ","
		//"," "threshold" threshold=Impact ("," "impacts" "[" impacts+=SoftGoalImpact ("," impacts+=SoftGoalImpact)* "]")? "}"
		public Group getGroup() { return cGroup; }

		//"softgoal"
		public Keyword getSoftgoalKeyword_0() { return cSoftgoalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"kind"
		public Keyword getKindKeyword_3() { return cKindKeyword_3; }

		//kind=GoalKind
		public Assignment getKindAssignment_4() { return cKindAssignment_4; }

		//GoalKind
		public RuleCall getKindGoalKindEnumRuleCall_4_0() { return cKindGoalKindEnumRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"priority"
		public Keyword getPriorityKeyword_6() { return cPriorityKeyword_6; }

		//priority=INT
		public Assignment getPriorityAssignment_7() { return cPriorityAssignment_7; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_7_0() { return cPriorityINTTerminalRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//"property"
		public Keyword getPropertyKeyword_9() { return cPropertyKeyword_9; }

		//"$"
		public Keyword getDollarSignKeyword_10() { return cDollarSignKeyword_10; }

		//property=[AppliedQualitativeProperty|QualifiedName]
		public Assignment getPropertyAssignment_11() { return cPropertyAssignment_11; }

		//[AppliedQualitativeProperty|QualifiedName]
		public CrossReference getPropertyAppliedQualitativePropertyCrossReference_11_0() { return cPropertyAppliedQualitativePropertyCrossReference_11_0; }

		//QualifiedName
		public RuleCall getPropertyAppliedQualitativePropertyQualifiedNameParserRuleCall_11_0_1() { return cPropertyAppliedQualitativePropertyQualifiedNameParserRuleCall_11_0_1; }

		////		"context" "[" context += [uml::NamedElement | QualifiedName] ("," context += [uml::NamedElement | QualifiedName])* "]" ","
		//","
		public Keyword getCommaKeyword_12() { return cCommaKeyword_12; }

		//"threshold"
		public Keyword getThresholdKeyword_13() { return cThresholdKeyword_13; }

		//threshold=Impact
		public Assignment getThresholdAssignment_14() { return cThresholdAssignment_14; }

		//Impact
		public RuleCall getThresholdImpactParserRuleCall_14_0() { return cThresholdImpactParserRuleCall_14_0; }

		//("," "impacts" "[" impacts+=SoftGoalImpact ("," impacts+=SoftGoalImpact)* "]")?
		public Group getGroup_15() { return cGroup_15; }

		//","
		public Keyword getCommaKeyword_15_0() { return cCommaKeyword_15_0; }

		//"impacts"
		public Keyword getImpactsKeyword_15_1() { return cImpactsKeyword_15_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_15_2() { return cLeftSquareBracketKeyword_15_2; }

		//impacts+=SoftGoalImpact
		public Assignment getImpactsAssignment_15_3() { return cImpactsAssignment_15_3; }

		//SoftGoalImpact
		public RuleCall getImpactsSoftGoalImpactParserRuleCall_15_3_0() { return cImpactsSoftGoalImpactParserRuleCall_15_3_0; }

		//("," impacts+=SoftGoalImpact)*
		public Group getGroup_15_4() { return cGroup_15_4; }

		//","
		public Keyword getCommaKeyword_15_4_0() { return cCommaKeyword_15_4_0; }

		//impacts+=SoftGoalImpact
		public Assignment getImpactsAssignment_15_4_1() { return cImpactsAssignment_15_4_1; }

		//SoftGoalImpact
		public RuleCall getImpactsSoftGoalImpactParserRuleCall_15_4_1_0() { return cImpactsSoftGoalImpactParserRuleCall_15_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_15_5() { return cRightSquareBracketKeyword_15_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}

	public class SoftGoalImpactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SoftGoalImpact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetSoftGoalCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetSoftGoalQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTargetSoftGoalCrossReference_0_0.eContents().get(1);
		private final Assignment cImpactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImpactImpactParserRuleCall_1_0 = (RuleCall)cImpactAssignment_1.eContents().get(0);
		
		//SoftGoalImpact:
		//	target=[SoftGoal|QualifiedName] impact=Impact;
		public ParserRule getRule() { return rule; }

		//target=[SoftGoal|QualifiedName] impact=Impact
		public Group getGroup() { return cGroup; }

		//target=[SoftGoal|QualifiedName]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[SoftGoal|QualifiedName]
		public CrossReference getTargetSoftGoalCrossReference_0_0() { return cTargetSoftGoalCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTargetSoftGoalQualifiedNameParserRuleCall_0_0_1() { return cTargetSoftGoalQualifiedNameParserRuleCall_0_0_1; }

		//impact=Impact
		public Assignment getImpactAssignment_1() { return cImpactAssignment_1; }

		//Impact
		public RuleCall getImpactImpactParserRuleCall_1_0() { return cImpactImpactParserRuleCall_1_0; }
	}

	public class HardGoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HardGoal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHardgoalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cKindKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKindGoalKindEnumRuleCall_4_0 = (RuleCall)cKindAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cPriorityKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPriorityAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPriorityINTTerminalRuleCall_7_0 = (RuleCall)cPriorityAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cConditionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cConditionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cConditionExpressionParserRuleCall_10_0 = (RuleCall)cConditionAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cSuccessRateKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cSuccessRateAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cSuccessRatePOSITIVE_SMALL_DECIMALTerminalRuleCall_11_2_0 = (RuleCall)cSuccessRateAssignment_11_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//HardGoal:
		//	"hardgoal" name=ID "{" "kind" kind=GoalKind "," "priority" priority=INT "," "condition" condition=Expression (","
		//	"successRate" successRate=POSITIVE_SMALL_DECIMAL)? "}";
		public ParserRule getRule() { return rule; }

		//"hardgoal" name=ID "{" "kind" kind=GoalKind "," "priority" priority=INT "," "condition" condition=Expression (","
		//"successRate" successRate=POSITIVE_SMALL_DECIMAL)? "}"
		public Group getGroup() { return cGroup; }

		//"hardgoal"
		public Keyword getHardgoalKeyword_0() { return cHardgoalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"kind"
		public Keyword getKindKeyword_3() { return cKindKeyword_3; }

		//kind=GoalKind
		public Assignment getKindAssignment_4() { return cKindAssignment_4; }

		//GoalKind
		public RuleCall getKindGoalKindEnumRuleCall_4_0() { return cKindGoalKindEnumRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"priority"
		public Keyword getPriorityKeyword_6() { return cPriorityKeyword_6; }

		//priority=INT
		public Assignment getPriorityAssignment_7() { return cPriorityAssignment_7; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_7_0() { return cPriorityINTTerminalRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//"condition"
		public Keyword getConditionKeyword_9() { return cConditionKeyword_9; }

		//condition=Expression
		public Assignment getConditionAssignment_10() { return cConditionAssignment_10; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_10_0() { return cConditionExpressionParserRuleCall_10_0; }

		//("," "successRate" successRate=POSITIVE_SMALL_DECIMAL)?
		public Group getGroup_11() { return cGroup_11; }

		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }

		//"successRate"
		public Keyword getSuccessRateKeyword_11_1() { return cSuccessRateKeyword_11_1; }

		//successRate=POSITIVE_SMALL_DECIMAL
		public Assignment getSuccessRateAssignment_11_2() { return cSuccessRateAssignment_11_2; }

		//POSITIVE_SMALL_DECIMAL
		public RuleCall getSuccessRatePOSITIVE_SMALL_DECIMALTerminalRuleCall_11_2_0() { return cSuccessRatePOSITIVE_SMALL_DECIMALTerminalRuleCall_11_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class CompositeGoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeGoal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cKindKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKindGoalKindEnumRuleCall_4_0 = (RuleCall)cKindAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cPriorityKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPriorityAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPriorityINTTerminalRuleCall_7_0 = (RuleCall)cPriorityAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cConditionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cConditionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cConditionGoalExpressionParserRuleCall_10_0 = (RuleCall)cConditionAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//CompositeGoal:
		//	"composite" name=ID "{" "kind" kind=GoalKind "," "priority" priority=INT "," "condition" condition=GoalExpression
		//	"}";
		public ParserRule getRule() { return rule; }

		//"composite" name=ID "{" "kind" kind=GoalKind "," "priority" priority=INT "," "condition" condition=GoalExpression "}"
		public Group getGroup() { return cGroup; }

		//"composite"
		public Keyword getCompositeKeyword_0() { return cCompositeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"kind"
		public Keyword getKindKeyword_3() { return cKindKeyword_3; }

		//kind=GoalKind
		public Assignment getKindAssignment_4() { return cKindAssignment_4; }

		//GoalKind
		public RuleCall getKindGoalKindEnumRuleCall_4_0() { return cKindGoalKindEnumRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"priority"
		public Keyword getPriorityKeyword_6() { return cPriorityKeyword_6; }

		//priority=INT
		public Assignment getPriorityAssignment_7() { return cPriorityAssignment_7; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_7_0() { return cPriorityINTTerminalRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//"condition"
		public Keyword getConditionKeyword_9() { return cConditionKeyword_9; }

		//condition=GoalExpression
		public Assignment getConditionAssignment_10() { return cConditionAssignment_10; }

		//GoalExpression
		public RuleCall getConditionGoalExpressionParserRuleCall_10_0() { return cConditionGoalExpressionParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class GoalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalExpression");
		private final RuleCall cGoalImplicationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//GoalExpression:
		//	GoalImplication;
		public ParserRule getRule() { return rule; }

		//GoalImplication
		public RuleCall getGoalImplicationParserRuleCall() { return cGoalImplicationParserRuleCall; }
	}

	public class GoalImplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalImplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGoalDisjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGoalImplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorImplicationOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightGoalDisjunctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//GoalImplication:
		//	GoalDisjunction ({GoalImplication.left=current} operator=ImplicationOperator right=GoalDisjunction)*;
		public ParserRule getRule() { return rule; }

		//GoalDisjunction ({GoalImplication.left=current} operator=ImplicationOperator right=GoalDisjunction)*
		public Group getGroup() { return cGroup; }

		//GoalDisjunction
		public RuleCall getGoalDisjunctionParserRuleCall_0() { return cGoalDisjunctionParserRuleCall_0; }

		//({GoalImplication.left=current} operator=ImplicationOperator right=GoalDisjunction)*
		public Group getGroup_1() { return cGroup_1; }

		//{GoalImplication.left=current}
		public Action getGoalImplicationLeftAction_1_0() { return cGoalImplicationLeftAction_1_0; }

		//operator=ImplicationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//ImplicationOperator
		public RuleCall getOperatorImplicationOperatorParserRuleCall_1_1_0() { return cOperatorImplicationOperatorParserRuleCall_1_1_0; }

		//right=GoalDisjunction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//GoalDisjunction
		public RuleCall getRightGoalDisjunctionParserRuleCall_1_2_0() { return cRightGoalDisjunctionParserRuleCall_1_2_0; }
	}

	public class GoalDisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalDisjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGoalConjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGoalDisjunctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cOperatorOrOperatorParserRuleCall_1_1_0_0 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOperatorXOrOperatorParserRuleCall_1_1_0_1 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightGoalConjunctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//GoalDisjunction:
		//	GoalConjunction ({GoalDisjunction.left=current} operator=(OrOperator | XOrOperator) right=GoalConjunction)*;
		public ParserRule getRule() { return rule; }

		//GoalConjunction ({GoalDisjunction.left=current} operator=(OrOperator | XOrOperator) right=GoalConjunction)*
		public Group getGroup() { return cGroup; }

		//GoalConjunction
		public RuleCall getGoalConjunctionParserRuleCall_0() { return cGoalConjunctionParserRuleCall_0; }

		//({GoalDisjunction.left=current} operator=(OrOperator | XOrOperator) right=GoalConjunction)*
		public Group getGroup_1() { return cGroup_1; }

		//{GoalDisjunction.left=current}
		public Action getGoalDisjunctionLeftAction_1_0() { return cGoalDisjunctionLeftAction_1_0; }

		//operator=(OrOperator | XOrOperator)
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//OrOperator | XOrOperator
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//OrOperator
		public RuleCall getOperatorOrOperatorParserRuleCall_1_1_0_0() { return cOperatorOrOperatorParserRuleCall_1_1_0_0; }

		//XOrOperator
		public RuleCall getOperatorXOrOperatorParserRuleCall_1_1_0_1() { return cOperatorXOrOperatorParserRuleCall_1_1_0_1; }

		//right=GoalConjunction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//GoalConjunction
		public RuleCall getRightGoalConjunctionParserRuleCall_1_2_0() { return cRightGoalConjunctionParserRuleCall_1_2_0; }
	}

	public class GoalConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalConjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGoalComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGoalConjunctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAndOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightGoalComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//GoalConjunction:
		//	GoalComparison ({GoalConjunction.left=current} operator=AndOperator right=GoalComparison)*;
		public ParserRule getRule() { return rule; }

		//GoalComparison ({GoalConjunction.left=current} operator=AndOperator right=GoalComparison)*
		public Group getGroup() { return cGroup; }

		//GoalComparison
		public RuleCall getGoalComparisonParserRuleCall_0() { return cGoalComparisonParserRuleCall_0; }

		//({GoalConjunction.left=current} operator=AndOperator right=GoalComparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{GoalConjunction.left=current}
		public Action getGoalConjunctionLeftAction_1_0() { return cGoalConjunctionLeftAction_1_0; }

		//operator=AndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AndOperator
		public RuleCall getOperatorAndOperatorParserRuleCall_1_1_0() { return cOperatorAndOperatorParserRuleCall_1_1_0; }

		//right=GoalComparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//GoalComparison
		public RuleCall getRightGoalComparisonParserRuleCall_1_2_0() { return cRightGoalComparisonParserRuleCall_1_2_0; }
	}

	public class GoalComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGoalBooleanUnitParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGoalComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cOperatorEqualsOperatorParserRuleCall_1_1_0_0 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOperatorNotEqualsOperatorParserRuleCall_1_1_0_1 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightGoalBooleanUnitParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//GoalComparison:
		//	GoalBooleanUnit ({GoalComparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=GoalBooleanUnit)*;
		public ParserRule getRule() { return rule; }

		//GoalBooleanUnit ({GoalComparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=GoalBooleanUnit)*
		public Group getGroup() { return cGroup; }

		//GoalBooleanUnit
		public RuleCall getGoalBooleanUnitParserRuleCall_0() { return cGoalBooleanUnitParserRuleCall_0; }

		//({GoalComparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=GoalBooleanUnit)*
		public Group getGroup_1() { return cGroup_1; }

		//{GoalComparison.left=current}
		public Action getGoalComparisonLeftAction_1_0() { return cGoalComparisonLeftAction_1_0; }

		//operator=(EqualsOperator | NotEqualsOperator)
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//EqualsOperator | NotEqualsOperator
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//EqualsOperator
		public RuleCall getOperatorEqualsOperatorParserRuleCall_1_1_0_0() { return cOperatorEqualsOperatorParserRuleCall_1_1_0_0; }

		//NotEqualsOperator
		public RuleCall getOperatorNotEqualsOperatorParserRuleCall_1_1_0_1() { return cOperatorNotEqualsOperatorParserRuleCall_1_1_0_1; }

		//right=GoalBooleanUnit
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//GoalBooleanUnit
		public RuleCall getRightGoalBooleanUnitParserRuleCall_1_2_0() { return cRightGoalBooleanUnitParserRuleCall_1_2_0; }
	}

	public class GoalBooleanUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalBooleanUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoalNegationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGoalBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGoalReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesizedGoalExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//GoalBooleanUnit:
		//	GoalNegation | GoalBooleanLiteral | GoalReference | ParenthesizedGoalExpression;
		public ParserRule getRule() { return rule; }

		//GoalNegation | GoalBooleanLiteral | GoalReference | ParenthesizedGoalExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//GoalNegation
		public RuleCall getGoalNegationParserRuleCall_0() { return cGoalNegationParserRuleCall_0; }

		//GoalBooleanLiteral
		public RuleCall getGoalBooleanLiteralParserRuleCall_1() { return cGoalBooleanLiteralParserRuleCall_1; }

		//GoalReference
		public RuleCall getGoalReferenceParserRuleCall_2() { return cGoalReferenceParserRuleCall_2; }

		//ParenthesizedGoalExpression
		public RuleCall getParenthesizedGoalExpressionParserRuleCall_3() { return cParenthesizedGoalExpressionParserRuleCall_3; }
	}

	public class GoalNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalNegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorNotOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueGoalBooleanUnitParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//GoalNegation:
		//	operator=NotOperator value=GoalBooleanUnit;
		public ParserRule getRule() { return rule; }

		//operator=NotOperator value=GoalBooleanUnit
		public Group getGroup() { return cGroup; }

		//operator=NotOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//NotOperator
		public RuleCall getOperatorNotOperatorParserRuleCall_0_0() { return cOperatorNotOperatorParserRuleCall_0_0; }

		//value=GoalBooleanUnit
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//GoalBooleanUnit
		public RuleCall getValueGoalBooleanUnitParserRuleCall_1_0() { return cValueGoalBooleanUnitParserRuleCall_1_0; }
	}

	public class GoalBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalBooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//GoalBooleanLiteral:
		//	value=EBOOLEAN;
		public ParserRule getRule() { return rule; }

		//value=EBOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EBOOLEAN
		public RuleCall getValueEBOOLEANTerminalRuleCall_0() { return cValueEBOOLEANTerminalRuleCall_0; }
	}

	public class GoalReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoalReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGoalReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueGoalCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueGoalQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cValueGoalCrossReference_2_0.eContents().get(1);
		
		//GoalReference:
		//	{GoalReference} "$" value=[Goal|QualifiedName];
		public ParserRule getRule() { return rule; }

		//{GoalReference} "$" value=[Goal|QualifiedName]
		public Group getGroup() { return cGroup; }

		//{GoalReference}
		public Action getGoalReferenceAction_0() { return cGoalReferenceAction_0; }

		//"$"
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }

		//value=[Goal|QualifiedName]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[Goal|QualifiedName]
		public CrossReference getValueGoalCrossReference_2_0() { return cValueGoalCrossReference_2_0; }

		//QualifiedName
		public RuleCall getValueGoalQualifiedNameParserRuleCall_2_0_1() { return cValueGoalQualifiedNameParserRuleCall_2_0_1; }
	}

	public class ParenthesizedGoalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedGoalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParenthesizedGoalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLeftParenthesisParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueGoalExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final RuleCall cRightParenthesisParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ParenthesizedGoalExpression:
		//	{ParenthesizedGoalExpression} LeftParenthesis value=GoalExpression RightParenthesis;
		public ParserRule getRule() { return rule; }

		//{ParenthesizedGoalExpression} LeftParenthesis value=GoalExpression RightParenthesis
		public Group getGroup() { return cGroup; }

		//{ParenthesizedGoalExpression}
		public Action getParenthesizedGoalExpressionAction_0() { return cParenthesizedGoalExpressionAction_0; }

		//LeftParenthesis
		public RuleCall getLeftParenthesisParserRuleCall_1() { return cLeftParenthesisParserRuleCall_1; }

		//value=GoalExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//GoalExpression
		public RuleCall getValueGoalExpressionParserRuleCall_2_0() { return cValueGoalExpressionParserRuleCall_2_0; }

		//RightParenthesis
		public RuleCall getRightParenthesisParserRuleCall_3() { return cRightParenthesisParserRuleCall_3; }
	}

	public class NumberExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAppliedQuantitativePropertyExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NumberExpression returns common::NumberExpression:
		//	NumberLiteral | NumberFunction | AppliedQuantitativePropertyExpression;
		public ParserRule getRule() { return rule; }

		//NumberLiteral | NumberFunction | AppliedQuantitativePropertyExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//NumberFunction
		public RuleCall getNumberFunctionParserRuleCall_1() { return cNumberFunctionParserRuleCall_1; }

		//AppliedQuantitativePropertyExpression
		public RuleCall getAppliedQuantitativePropertyExpressionParserRuleCall_2() { return cAppliedQuantitativePropertyExpressionParserRuleCall_2; }
	}

	public class AppliedQuantitativePropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AppliedQuantitativePropertyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAppliedQuantitativePropertyExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueAppliedQuantitativePropertyCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueAppliedQuantitativePropertyQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cValueAppliedQuantitativePropertyCrossReference_2_0.eContents().get(1);
		
		//AppliedQuantitativePropertyExpression returns common::NumberExpression:
		//	{AppliedQuantitativePropertyExpression} "$" value=[AppliedQuantitativeProperty|QualifiedName];
		public ParserRule getRule() { return rule; }

		//{AppliedQuantitativePropertyExpression} "$" value=[AppliedQuantitativeProperty|QualifiedName]
		public Group getGroup() { return cGroup; }

		//{AppliedQuantitativePropertyExpression}
		public Action getAppliedQuantitativePropertyExpressionAction_0() { return cAppliedQuantitativePropertyExpressionAction_0; }

		//"$"
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }

		//value=[AppliedQuantitativeProperty|QualifiedName]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[AppliedQuantitativeProperty|QualifiedName]
		public CrossReference getValueAppliedQuantitativePropertyCrossReference_2_0() { return cValueAppliedQuantitativePropertyCrossReference_2_0; }

		//QualifiedName
		public RuleCall getValueAppliedQuantitativePropertyQualifiedNameParserRuleCall_2_0_1() { return cValueAppliedQuantitativePropertyQualifiedNameParserRuleCall_2_0_1; }
	}
	
	
	public class GoalKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GoalKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREQUIREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREQUIREDRequiredKeyword_0_0 = (Keyword)cREQUIREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOFFEREDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOFFEREDOfferedKeyword_1_0 = (Keyword)cOFFEREDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONTRACTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONTRACTContractKeyword_2_0 = (Keyword)cCONTRACTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum GoalKind:
		//	REQUIRED="required" | OFFERED="offered" | CONTRACT="contract";
		public EnumRule getRule() { return rule; }

		//REQUIRED="required" | OFFERED="offered" | CONTRACT="contract"
		public Alternatives getAlternatives() { return cAlternatives; }

		//REQUIRED="required"
		public EnumLiteralDeclaration getREQUIREDEnumLiteralDeclaration_0() { return cREQUIREDEnumLiteralDeclaration_0; }

		//"required"
		public Keyword getREQUIREDRequiredKeyword_0_0() { return cREQUIREDRequiredKeyword_0_0; }

		//OFFERED="offered"
		public EnumLiteralDeclaration getOFFEREDEnumLiteralDeclaration_1() { return cOFFEREDEnumLiteralDeclaration_1; }

		//"offered"
		public Keyword getOFFEREDOfferedKeyword_1_0() { return cOFFEREDOfferedKeyword_1_0; }

		//CONTRACT="contract"
		public EnumLiteralDeclaration getCONTRACTEnumLiteralDeclaration_2() { return cCONTRACTEnumLiteralDeclaration_2; }

		//"contract"
		public Keyword getCONTRACTContractKeyword_2_0() { return cCONTRACTContractKeyword_2_0; }
	}
	
	private ARTISTModelElements pARTISTModel;
	private GoalModelElements pGoalModel;
	private WorkloadElements pWorkload;
	private AppliedPropertyElements pAppliedProperty;
	private AppliedQualitativePropertyElements pAppliedQualitativeProperty;
	private AppliedQuantitativePropertyElements pAppliedQuantitativeProperty;
	private GoalElements pGoal;
	private GoalKindElements unknownRuleGoalKind;
	private SoftGoalElements pSoftGoal;
	private SoftGoalImpactElements pSoftGoalImpact;
	private HardGoalElements pHardGoal;
	private CompositeGoalElements pCompositeGoal;
	private GoalExpressionElements pGoalExpression;
	private GoalImplicationElements pGoalImplication;
	private GoalDisjunctionElements pGoalDisjunction;
	private GoalConjunctionElements pGoalConjunction;
	private GoalComparisonElements pGoalComparison;
	private GoalBooleanUnitElements pGoalBooleanUnit;
	private GoalNegationElements pGoalNegation;
	private GoalBooleanLiteralElements pGoalBooleanLiteral;
	private GoalReferenceElements pGoalReference;
	private ParenthesizedGoalExpressionElements pParenthesizedGoalExpression;
	private NumberExpressionElements pNumberExpression;
	private AppliedQuantitativePropertyExpressionElements pAppliedQuantitativePropertyExpression;
	
	private final Grammar grammar;

	private ARTISTCommonGrammarAccess gaARTISTCommon;

	@Inject
	public GMLGrammarAccess(GrammarProvider grammarProvider,
		ARTISTCommonGrammarAccess gaARTISTCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaARTISTCommon = gaARTISTCommon;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.artist.postmigration.nfrvt.lang.gml.GML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ARTISTCommonGrammarAccess getARTISTCommonGrammarAccess() {
		return gaARTISTCommon;
	}

	
	//ARTISTModel returns common::ARTISTModel:
	//	GoalModel;
	public ARTISTModelElements getARTISTModelAccess() {
		return (pARTISTModel != null) ? pARTISTModel : (pARTISTModel = new ARTISTModelElements());
	}
	
	public ParserRule getARTISTModelRule() {
		return getARTISTModelAccess().getRule();
	}

	//GoalModel:
	//	imports+=ImportNamespace* "goalmodel" name=QualifiedName "{" "workloads" "[" (workloads+=Workload (","
	//	workloads+=Workload)*)? "]" "applied-properties" "[" (appliedProperties+=AppliedProperty (","
	//	appliedProperties+=AppliedProperty)*)? "]" "goals" "[" (goals+=Goal ("," goals+=Goal)*)? "]" "}";
	public GoalModelElements getGoalModelAccess() {
		return (pGoalModel != null) ? pGoalModel : (pGoalModel = new GoalModelElements());
	}
	
	public ParserRule getGoalModelRule() {
		return getGoalModelAccess().getRule();
	}

	//Workload returns common::Workload:
	//	name=ID "{" "activity" activity=[uml::Activity|QualifiedName] "," "pattern" pattern=STRING "}";
	public WorkloadElements getWorkloadAccess() {
		return (pWorkload != null) ? pWorkload : (pWorkload = new WorkloadElements());
	}
	
	public ParserRule getWorkloadRule() {
		return getWorkloadAccess().getRule();
	}

	//AppliedProperty:
	//	AppliedQualitativeProperty | AppliedQuantitativeProperty;
	public AppliedPropertyElements getAppliedPropertyAccess() {
		return (pAppliedProperty != null) ? pAppliedProperty : (pAppliedProperty = new AppliedPropertyElements());
	}
	
	public ParserRule getAppliedPropertyRule() {
		return getAppliedPropertyAccess().getRule();
	}

	//AppliedQualitativeProperty:
	//	"qualitative" name=ID "{" "property" property=[nsl::QualitativeProperty|QualifiedName] ("," "context" "["
	//	(context+=[uml::NamedElement|QualifiedName] ("," context+=[uml::NamedElement|QualifiedName])*)? "]")? "}";
	public AppliedQualitativePropertyElements getAppliedQualitativePropertyAccess() {
		return (pAppliedQualitativeProperty != null) ? pAppliedQualitativeProperty : (pAppliedQualitativeProperty = new AppliedQualitativePropertyElements());
	}
	
	public ParserRule getAppliedQualitativePropertyRule() {
		return getAppliedQualitativePropertyAccess().getRule();
	}

	//AppliedQuantitativeProperty:
	//	"quantitative" name=ID "{" "property" property=[nsl::QuantitativeProperty|QualifiedName] ("," "function"
	//	function=(MinOperator | MaxOperator | AvgOperator | SumOperator))? ("," "context" "["
	//	(context+=[uml::NamedElement|QualifiedName] ("," context+=[uml::NamedElement|QualifiedName])*)? "]")? ("," "workload"
	//	workload=[common::Workload|QualifiedName])? "}";
	public AppliedQuantitativePropertyElements getAppliedQuantitativePropertyAccess() {
		return (pAppliedQuantitativeProperty != null) ? pAppliedQuantitativeProperty : (pAppliedQuantitativeProperty = new AppliedQuantitativePropertyElements());
	}
	
	public ParserRule getAppliedQuantitativePropertyRule() {
		return getAppliedQuantitativePropertyAccess().getRule();
	}

	//Goal:
	//	SoftGoal | HardGoal | CompositeGoal;
	public GoalElements getGoalAccess() {
		return (pGoal != null) ? pGoal : (pGoal = new GoalElements());
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	//enum GoalKind:
	//	REQUIRED="required" | OFFERED="offered" | CONTRACT="contract";
	public GoalKindElements getGoalKindAccess() {
		return (unknownRuleGoalKind != null) ? unknownRuleGoalKind : (unknownRuleGoalKind = new GoalKindElements());
	}
	
	public EnumRule getGoalKindRule() {
		return getGoalKindAccess().getRule();
	}

	//SoftGoal:
	//	"softgoal" name=ID "{" "kind" kind=GoalKind "," "priority" priority=INT "," "property" "$"
	//	property=[AppliedQualitativeProperty|QualifiedName] //		"context" "[" context += [uml::NamedElement | QualifiedName] ("," context += [uml::NamedElement | QualifiedName])* "]" ","
	//	"," "threshold" threshold=Impact ("," "impacts" "[" impacts+=SoftGoalImpact ("," impacts+=SoftGoalImpact)* "]")? "}";
	public SoftGoalElements getSoftGoalAccess() {
		return (pSoftGoal != null) ? pSoftGoal : (pSoftGoal = new SoftGoalElements());
	}
	
	public ParserRule getSoftGoalRule() {
		return getSoftGoalAccess().getRule();
	}

	//SoftGoalImpact:
	//	target=[SoftGoal|QualifiedName] impact=Impact;
	public SoftGoalImpactElements getSoftGoalImpactAccess() {
		return (pSoftGoalImpact != null) ? pSoftGoalImpact : (pSoftGoalImpact = new SoftGoalImpactElements());
	}
	
	public ParserRule getSoftGoalImpactRule() {
		return getSoftGoalImpactAccess().getRule();
	}

	//HardGoal:
	//	"hardgoal" name=ID "{" "kind" kind=GoalKind "," "priority" priority=INT "," "condition" condition=Expression (","
	//	"successRate" successRate=POSITIVE_SMALL_DECIMAL)? "}";
	public HardGoalElements getHardGoalAccess() {
		return (pHardGoal != null) ? pHardGoal : (pHardGoal = new HardGoalElements());
	}
	
	public ParserRule getHardGoalRule() {
		return getHardGoalAccess().getRule();
	}

	//CompositeGoal:
	//	"composite" name=ID "{" "kind" kind=GoalKind "," "priority" priority=INT "," "condition" condition=GoalExpression
	//	"}";
	public CompositeGoalElements getCompositeGoalAccess() {
		return (pCompositeGoal != null) ? pCompositeGoal : (pCompositeGoal = new CompositeGoalElements());
	}
	
	public ParserRule getCompositeGoalRule() {
		return getCompositeGoalAccess().getRule();
	}

	//GoalExpression:
	//	GoalImplication;
	public GoalExpressionElements getGoalExpressionAccess() {
		return (pGoalExpression != null) ? pGoalExpression : (pGoalExpression = new GoalExpressionElements());
	}
	
	public ParserRule getGoalExpressionRule() {
		return getGoalExpressionAccess().getRule();
	}

	//GoalImplication:
	//	GoalDisjunction ({GoalImplication.left=current} operator=ImplicationOperator right=GoalDisjunction)*;
	public GoalImplicationElements getGoalImplicationAccess() {
		return (pGoalImplication != null) ? pGoalImplication : (pGoalImplication = new GoalImplicationElements());
	}
	
	public ParserRule getGoalImplicationRule() {
		return getGoalImplicationAccess().getRule();
	}

	//GoalDisjunction:
	//	GoalConjunction ({GoalDisjunction.left=current} operator=(OrOperator | XOrOperator) right=GoalConjunction)*;
	public GoalDisjunctionElements getGoalDisjunctionAccess() {
		return (pGoalDisjunction != null) ? pGoalDisjunction : (pGoalDisjunction = new GoalDisjunctionElements());
	}
	
	public ParserRule getGoalDisjunctionRule() {
		return getGoalDisjunctionAccess().getRule();
	}

	//GoalConjunction:
	//	GoalComparison ({GoalConjunction.left=current} operator=AndOperator right=GoalComparison)*;
	public GoalConjunctionElements getGoalConjunctionAccess() {
		return (pGoalConjunction != null) ? pGoalConjunction : (pGoalConjunction = new GoalConjunctionElements());
	}
	
	public ParserRule getGoalConjunctionRule() {
		return getGoalConjunctionAccess().getRule();
	}

	//GoalComparison:
	//	GoalBooleanUnit ({GoalComparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=GoalBooleanUnit)*;
	public GoalComparisonElements getGoalComparisonAccess() {
		return (pGoalComparison != null) ? pGoalComparison : (pGoalComparison = new GoalComparisonElements());
	}
	
	public ParserRule getGoalComparisonRule() {
		return getGoalComparisonAccess().getRule();
	}

	//GoalBooleanUnit:
	//	GoalNegation | GoalBooleanLiteral | GoalReference | ParenthesizedGoalExpression;
	public GoalBooleanUnitElements getGoalBooleanUnitAccess() {
		return (pGoalBooleanUnit != null) ? pGoalBooleanUnit : (pGoalBooleanUnit = new GoalBooleanUnitElements());
	}
	
	public ParserRule getGoalBooleanUnitRule() {
		return getGoalBooleanUnitAccess().getRule();
	}

	//GoalNegation:
	//	operator=NotOperator value=GoalBooleanUnit;
	public GoalNegationElements getGoalNegationAccess() {
		return (pGoalNegation != null) ? pGoalNegation : (pGoalNegation = new GoalNegationElements());
	}
	
	public ParserRule getGoalNegationRule() {
		return getGoalNegationAccess().getRule();
	}

	//GoalBooleanLiteral:
	//	value=EBOOLEAN;
	public GoalBooleanLiteralElements getGoalBooleanLiteralAccess() {
		return (pGoalBooleanLiteral != null) ? pGoalBooleanLiteral : (pGoalBooleanLiteral = new GoalBooleanLiteralElements());
	}
	
	public ParserRule getGoalBooleanLiteralRule() {
		return getGoalBooleanLiteralAccess().getRule();
	}

	//GoalReference:
	//	{GoalReference} "$" value=[Goal|QualifiedName];
	public GoalReferenceElements getGoalReferenceAccess() {
		return (pGoalReference != null) ? pGoalReference : (pGoalReference = new GoalReferenceElements());
	}
	
	public ParserRule getGoalReferenceRule() {
		return getGoalReferenceAccess().getRule();
	}

	//ParenthesizedGoalExpression:
	//	{ParenthesizedGoalExpression} LeftParenthesis value=GoalExpression RightParenthesis;
	public ParenthesizedGoalExpressionElements getParenthesizedGoalExpressionAccess() {
		return (pParenthesizedGoalExpression != null) ? pParenthesizedGoalExpression : (pParenthesizedGoalExpression = new ParenthesizedGoalExpressionElements());
	}
	
	public ParserRule getParenthesizedGoalExpressionRule() {
		return getParenthesizedGoalExpressionAccess().getRule();
	}

	//NumberExpression returns common::NumberExpression:
	//	NumberLiteral | NumberFunction | AppliedQuantitativePropertyExpression;
	public NumberExpressionElements getNumberExpressionAccess() {
		return (pNumberExpression != null) ? pNumberExpression : (pNumberExpression = new NumberExpressionElements());
	}
	
	public ParserRule getNumberExpressionRule() {
		return getNumberExpressionAccess().getRule();
	}

	//AppliedQuantitativePropertyExpression returns common::NumberExpression:
	//	{AppliedQuantitativePropertyExpression} "$" value=[AppliedQuantitativeProperty|QualifiedName];
	public AppliedQuantitativePropertyExpressionElements getAppliedQuantitativePropertyExpressionAccess() {
		return (pAppliedQuantitativePropertyExpression != null) ? pAppliedQuantitativePropertyExpression : (pAppliedQuantitativePropertyExpression = new AppliedQuantitativePropertyExpressionElements());
	}
	
	public ParserRule getAppliedQuantitativePropertyExpressionRule() {
		return getAppliedQuantitativePropertyExpressionAccess().getRule();
	}

	//Expression:
	//	Implication;
	public ARTISTCommonGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaARTISTCommon.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Implication:
	//	Disjunction ({Implication.left=current} operator=ImplicationOperator right=Disjunction)*;
	public ARTISTCommonGrammarAccess.ImplicationElements getImplicationAccess() {
		return gaARTISTCommon.getImplicationAccess();
	}
	
	public ParserRule getImplicationRule() {
		return getImplicationAccess().getRule();
	}

	//Disjunction:
	//	Conjunction ({Disjunction.left=current} operator=(OrOperator | XOrOperator) right=Conjunction)*;
	public ARTISTCommonGrammarAccess.DisjunctionElements getDisjunctionAccess() {
		return gaARTISTCommon.getDisjunctionAccess();
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}

	//Conjunction:
	//	Comparison ({Conjunction.left=current} operator=AndOperator right=Comparison)*;
	public ARTISTCommonGrammarAccess.ConjunctionElements getConjunctionAccess() {
		return gaARTISTCommon.getConjunctionAccess();
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Comparison:
	//	BooleanUnit ({Comparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=BooleanUnit)*;
	public ARTISTCommonGrammarAccess.ComparisonElements getComparisonAccess() {
		return gaARTISTCommon.getComparisonAccess();
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//BooleanUnit:
	//	Negation | RelationalExpression | BooleanLiteral;
	public ARTISTCommonGrammarAccess.BooleanUnitElements getBooleanUnitAccess() {
		return gaARTISTCommon.getBooleanUnitAccess();
	}
	
	public ParserRule getBooleanUnitRule() {
		return getBooleanUnitAccess().getRule();
	}

	//Negation:
	//	operator=NotOperator value=BooleanUnit;
	public ARTISTCommonGrammarAccess.NegationElements getNegationAccess() {
		return gaARTISTCommon.getNegationAccess();
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//RelationalExpression:
	//	ComparableExpression (({RelationalExpression.left=current} operator=GreaterThanOperator |
	//	{RelationalExpression.left=current} operator=GreaterOrEqualThanOperator | {RelationalExpression.left=current}
	//	operator=LessOrEqualThanOperator | {RelationalExpression.left=current} operator=LessThanOperator)
	//	right=ComparableExpression)*;
	public ARTISTCommonGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaARTISTCommon.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//ComparableExpression:
	//	ArithmeticExpression | InstanceSpecificationExpression | ObjectSpecificationExpression | NullLiteral | StringLiteral
	//	| UnlimitedLiteral | ParenthesizedExpression;
	public ARTISTCommonGrammarAccess.ComparableExpressionElements getComparableExpressionAccess() {
		return gaARTISTCommon.getComparableExpressionAccess();
	}
	
	public ParserRule getComparableExpressionRule() {
		return getComparableExpressionAccess().getRule();
	}

	//ArithmeticExpression:
	//	AdditiveExpression;
	public ARTISTCommonGrammarAccess.ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return gaARTISTCommon.getArithmeticExpressionAccess();
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}

	//AdditiveExpression:
	//	MultiplicativeExpression ({AdditiveExpression.left=current} operator=(SubstractionOperator | AdditionOperator)
	//	right=MultiplicativeExpression)*;
	public ARTISTCommonGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaARTISTCommon.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression:
	//	NumberExpression ({MultiplicativeExpression.left=current} operator=(MultiplicationOperator | DivisionOperator |
	//	ModulusOperator) right=NumberExpression)*;
	public ARTISTCommonGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaARTISTCommon.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//NumberFunction:
	//	MaximumFunction | MinimumFunction | AverageFunction | SumFunction | ExponentialFunction | AbsoluteFunction |
	//	NaturalLogarithmFunction | CommonLogarithmFunction;
	public ARTISTCommonGrammarAccess.NumberFunctionElements getNumberFunctionAccess() {
		return gaARTISTCommon.getNumberFunctionAccess();
	}
	
	public ParserRule getNumberFunctionRule() {
		return getNumberFunctionAccess().getRule();
	}

	//MaximumFunction:
	//	operator=MaxOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.MaximumFunctionElements getMaximumFunctionAccess() {
		return gaARTISTCommon.getMaximumFunctionAccess();
	}
	
	public ParserRule getMaximumFunctionRule() {
		return getMaximumFunctionAccess().getRule();
	}

	//MinimumFunction:
	//	operator=MinOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.MinimumFunctionElements getMinimumFunctionAccess() {
		return gaARTISTCommon.getMinimumFunctionAccess();
	}
	
	public ParserRule getMinimumFunctionRule() {
		return getMinimumFunctionAccess().getRule();
	}

	//AverageFunction:
	//	operator=AvgOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.AverageFunctionElements getAverageFunctionAccess() {
		return gaARTISTCommon.getAverageFunctionAccess();
	}
	
	public ParserRule getAverageFunctionRule() {
		return getAverageFunctionAccess().getRule();
	}

	//SumFunction:
	//	operator=SumOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.SumFunctionElements getSumFunctionAccess() {
		return gaARTISTCommon.getSumFunctionAccess();
	}
	
	public ParserRule getSumFunctionRule() {
		return getSumFunctionAccess().getRule();
	}

	//ExponentialFunction:
	//	operator=ExponentialOperator "(" base=NumberExpression "," exponent=NumberExpression ")";
	public ARTISTCommonGrammarAccess.ExponentialFunctionElements getExponentialFunctionAccess() {
		return gaARTISTCommon.getExponentialFunctionAccess();
	}
	
	public ParserRule getExponentialFunctionRule() {
		return getExponentialFunctionAccess().getRule();
	}

	//AbsoluteFunction:
	//	operator=AbsoluteOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.AbsoluteFunctionElements getAbsoluteFunctionAccess() {
		return gaARTISTCommon.getAbsoluteFunctionAccess();
	}
	
	public ParserRule getAbsoluteFunctionRule() {
		return getAbsoluteFunctionAccess().getRule();
	}

	//NaturalLogarithmFunction:
	//	operator=NaturalLogarithmOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.NaturalLogarithmFunctionElements getNaturalLogarithmFunctionAccess() {
		return gaARTISTCommon.getNaturalLogarithmFunctionAccess();
	}
	
	public ParserRule getNaturalLogarithmFunctionRule() {
		return getNaturalLogarithmFunctionAccess().getRule();
	}

	//CommonLogarithmFunction:
	//	operator=CommonLogarithmOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.CommonLogarithmFunctionElements getCommonLogarithmFunctionAccess() {
		return gaARTISTCommon.getCommonLogarithmFunctionAccess();
	}
	
	public ParserRule getCommonLogarithmFunctionRule() {
		return getCommonLogarithmFunctionAccess().getRule();
	}

	//ParenthesizedExpression:
	//	LeftParenthesis value=Expression RightParenthesis;
	public ARTISTCommonGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaARTISTCommon.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//ValueSpecification:
	//	LiteralValueExpression | InstanceSpecificationExpression | ObjectSpecificationExpression;
	public ARTISTCommonGrammarAccess.ValueSpecificationElements getValueSpecificationAccess() {
		return gaARTISTCommon.getValueSpecificationAccess();
	}
	
	public ParserRule getValueSpecificationRule() {
		return getValueSpecificationAccess().getRule();
	}

	//ObjectSpecificationExpression:
	//	type=[uml::DataType|QualifiedName] (value=Collection | value=Tuple);
	public ARTISTCommonGrammarAccess.ObjectSpecificationExpressionElements getObjectSpecificationExpressionAccess() {
		return gaARTISTCommon.getObjectSpecificationExpressionAccess();
	}
	
	public ParserRule getObjectSpecificationExpressionRule() {
		return getObjectSpecificationExpressionAccess().getRule();
	}

	//Collection:
	//	{Collection} "[" (values+=ValueSpecification ("," values+=ValueSpecification)*)? "]";
	public ARTISTCommonGrammarAccess.CollectionElements getCollectionAccess() {
		return gaARTISTCommon.getCollectionAccess();
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}

	//Tuple:
	//	{Tuple} "{" (tuples+=PropertyValuePair ("," tuples+=PropertyValuePair)*)? "}";
	public ARTISTCommonGrammarAccess.TupleElements getTupleAccess() {
		return gaARTISTCommon.getTupleAccess();
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}

	//PropertyValuePair:
	//	property=[uml::Property|QualifiedName] "=" value=ValueSpecification;
	public ARTISTCommonGrammarAccess.PropertyValuePairElements getPropertyValuePairAccess() {
		return gaARTISTCommon.getPropertyValuePairAccess();
	}
	
	public ParserRule getPropertyValuePairRule() {
		return getPropertyValuePairAccess().getRule();
	}

	//InstanceSpecificationExpression:
	//	value=[uml::InstanceSpecification|QualifiedName];
	public ARTISTCommonGrammarAccess.InstanceSpecificationExpressionElements getInstanceSpecificationExpressionAccess() {
		return gaARTISTCommon.getInstanceSpecificationExpressionAccess();
	}
	
	public ParserRule getInstanceSpecificationExpressionRule() {
		return getInstanceSpecificationExpressionAccess().getRule();
	}

	//LiteralValueExpression:
	//	NumberLiteral | BooleanLiteral | NullLiteral | StringLiteral | UnlimitedLiteral;
	public ARTISTCommonGrammarAccess.LiteralValueExpressionElements getLiteralValueExpressionAccess() {
		return gaARTISTCommon.getLiteralValueExpressionAccess();
	}
	
	public ParserRule getLiteralValueExpressionRule() {
		return getLiteralValueExpressionAccess().getRule();
	}

	//BooleanLiteral:
	//	value=EBOOLEAN;
	public ARTISTCommonGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaARTISTCommon.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NumberLiteral:
	//	value=Number;
	public ARTISTCommonGrammarAccess.NumberLiteralElements getNumberLiteralAccess() {
		return gaARTISTCommon.getNumberLiteralAccess();
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//NullLiteral:
	//	value=NULL;
	public ARTISTCommonGrammarAccess.NullLiteralElements getNullLiteralAccess() {
		return gaARTISTCommon.getNullLiteralAccess();
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public ARTISTCommonGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaARTISTCommon.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//UnlimitedLiteral:
	//	value="*";
	public ARTISTCommonGrammarAccess.UnlimitedLiteralElements getUnlimitedLiteralAccess() {
		return gaARTISTCommon.getUnlimitedLiteralAccess();
	}
	
	public ParserRule getUnlimitedLiteralRule() {
		return getUnlimitedLiteralAccess().getRule();
	}

	//OrOperator returns Operator:
	//	{OrOperator} ("or" | "||");
	public ARTISTCommonGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaARTISTCommon.getOrOperatorAccess();
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//XOrOperator returns Operator:
	//	{XOrOperator} ("xor" | "^");
	public ARTISTCommonGrammarAccess.XOrOperatorElements getXOrOperatorAccess() {
		return gaARTISTCommon.getXOrOperatorAccess();
	}
	
	public ParserRule getXOrOperatorRule() {
		return getXOrOperatorAccess().getRule();
	}

	//AndOperator returns Operator:
	//	{AndOperator} ("and" | "&&");
	public ARTISTCommonGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaARTISTCommon.getAndOperatorAccess();
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//ImplicationOperator returns Operator:
	//	{ImplicationOperator} ("=>" | "->");
	public ARTISTCommonGrammarAccess.ImplicationOperatorElements getImplicationOperatorAccess() {
		return gaARTISTCommon.getImplicationOperatorAccess();
	}
	
	public ParserRule getImplicationOperatorRule() {
		return getImplicationOperatorAccess().getRule();
	}

	//EqualsOperator returns Operator:
	//	{EqualsOperator} "==";
	public ARTISTCommonGrammarAccess.EqualsOperatorElements getEqualsOperatorAccess() {
		return gaARTISTCommon.getEqualsOperatorAccess();
	}
	
	public ParserRule getEqualsOperatorRule() {
		return getEqualsOperatorAccess().getRule();
	}

	//NotEqualsOperator returns Operator:
	//	{NotEqualsOperator} ("!=" | "<>");
	public ARTISTCommonGrammarAccess.NotEqualsOperatorElements getNotEqualsOperatorAccess() {
		return gaARTISTCommon.getNotEqualsOperatorAccess();
	}
	
	public ParserRule getNotEqualsOperatorRule() {
		return getNotEqualsOperatorAccess().getRule();
	}

	//NotOperator returns Operator:
	//	{NotOperator} ("!" | "not");
	public ARTISTCommonGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaARTISTCommon.getNotOperatorAccess();
	}
	
	public ParserRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//GreaterThanOperator returns Operator:
	//	{GreaterThanOperator} ">";
	public ARTISTCommonGrammarAccess.GreaterThanOperatorElements getGreaterThanOperatorAccess() {
		return gaARTISTCommon.getGreaterThanOperatorAccess();
	}
	
	public ParserRule getGreaterThanOperatorRule() {
		return getGreaterThanOperatorAccess().getRule();
	}

	//GreaterOrEqualThanOperator returns Operator:
	//	{GreaterOrEqualThanOperator} ">=";
	public ARTISTCommonGrammarAccess.GreaterOrEqualThanOperatorElements getGreaterOrEqualThanOperatorAccess() {
		return gaARTISTCommon.getGreaterOrEqualThanOperatorAccess();
	}
	
	public ParserRule getGreaterOrEqualThanOperatorRule() {
		return getGreaterOrEqualThanOperatorAccess().getRule();
	}

	//LessThanOperator returns Operator:
	//	{LessThanOperator} "<";
	public ARTISTCommonGrammarAccess.LessThanOperatorElements getLessThanOperatorAccess() {
		return gaARTISTCommon.getLessThanOperatorAccess();
	}
	
	public ParserRule getLessThanOperatorRule() {
		return getLessThanOperatorAccess().getRule();
	}

	//LessOrEqualThanOperator returns Operator:
	//	{LessOrEqualThanOperator} "<=";
	public ARTISTCommonGrammarAccess.LessOrEqualThanOperatorElements getLessOrEqualThanOperatorAccess() {
		return gaARTISTCommon.getLessOrEqualThanOperatorAccess();
	}
	
	public ParserRule getLessOrEqualThanOperatorRule() {
		return getLessOrEqualThanOperatorAccess().getRule();
	}

	//AdditionOperator returns Operator:
	//	{AdditionOperator} "+";
	public ARTISTCommonGrammarAccess.AdditionOperatorElements getAdditionOperatorAccess() {
		return gaARTISTCommon.getAdditionOperatorAccess();
	}
	
	public ParserRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}

	//SubstractionOperator returns Operator:
	//	{SubstractionOperator} "-";
	public ARTISTCommonGrammarAccess.SubstractionOperatorElements getSubstractionOperatorAccess() {
		return gaARTISTCommon.getSubstractionOperatorAccess();
	}
	
	public ParserRule getSubstractionOperatorRule() {
		return getSubstractionOperatorAccess().getRule();
	}

	//MultiplicationOperator returns Operator:
	//	{MultiplicationOperator} "*";
	public ARTISTCommonGrammarAccess.MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return gaARTISTCommon.getMultiplicationOperatorAccess();
	}
	
	public ParserRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}

	//DivisionOperator returns Operator:
	//	{DivisionOperator} "/";
	public ARTISTCommonGrammarAccess.DivisionOperatorElements getDivisionOperatorAccess() {
		return gaARTISTCommon.getDivisionOperatorAccess();
	}
	
	public ParserRule getDivisionOperatorRule() {
		return getDivisionOperatorAccess().getRule();
	}

	//ModulusOperator returns Operator:
	//	{ModulusOperator} "%";
	public ARTISTCommonGrammarAccess.ModulusOperatorElements getModulusOperatorAccess() {
		return gaARTISTCommon.getModulusOperatorAccess();
	}
	
	public ParserRule getModulusOperatorRule() {
		return getModulusOperatorAccess().getRule();
	}

	//MaxOperator returns Operator:
	//	{MaxOperator} "max";
	public ARTISTCommonGrammarAccess.MaxOperatorElements getMaxOperatorAccess() {
		return gaARTISTCommon.getMaxOperatorAccess();
	}
	
	public ParserRule getMaxOperatorRule() {
		return getMaxOperatorAccess().getRule();
	}

	//MinOperator returns Operator:
	//	{MinOperator} "min";
	public ARTISTCommonGrammarAccess.MinOperatorElements getMinOperatorAccess() {
		return gaARTISTCommon.getMinOperatorAccess();
	}
	
	public ParserRule getMinOperatorRule() {
		return getMinOperatorAccess().getRule();
	}

	//AvgOperator returns Operator:
	//	{AvgOperator} "avg";
	public ARTISTCommonGrammarAccess.AvgOperatorElements getAvgOperatorAccess() {
		return gaARTISTCommon.getAvgOperatorAccess();
	}
	
	public ParserRule getAvgOperatorRule() {
		return getAvgOperatorAccess().getRule();
	}

	//SumOperator returns Operator:
	//	{SumOperator} "sum";
	public ARTISTCommonGrammarAccess.SumOperatorElements getSumOperatorAccess() {
		return gaARTISTCommon.getSumOperatorAccess();
	}
	
	public ParserRule getSumOperatorRule() {
		return getSumOperatorAccess().getRule();
	}

	//ExponentialOperator returns Operator:
	//	{ExponentialOperator} "exp";
	public ARTISTCommonGrammarAccess.ExponentialOperatorElements getExponentialOperatorAccess() {
		return gaARTISTCommon.getExponentialOperatorAccess();
	}
	
	public ParserRule getExponentialOperatorRule() {
		return getExponentialOperatorAccess().getRule();
	}

	//AbsoluteOperator returns Operator:
	//	{AbsoluteOperator} "abs";
	public ARTISTCommonGrammarAccess.AbsoluteOperatorElements getAbsoluteOperatorAccess() {
		return gaARTISTCommon.getAbsoluteOperatorAccess();
	}
	
	public ParserRule getAbsoluteOperatorRule() {
		return getAbsoluteOperatorAccess().getRule();
	}

	//NaturalLogarithmOperator returns Operator:
	//	{NaturalLogarithmOperator} "ln";
	public ARTISTCommonGrammarAccess.NaturalLogarithmOperatorElements getNaturalLogarithmOperatorAccess() {
		return gaARTISTCommon.getNaturalLogarithmOperatorAccess();
	}
	
	public ParserRule getNaturalLogarithmOperatorRule() {
		return getNaturalLogarithmOperatorAccess().getRule();
	}

	//CommonLogarithmOperator returns Operator:
	//	{CommonLogarithmOperator} "log";
	public ARTISTCommonGrammarAccess.CommonLogarithmOperatorElements getCommonLogarithmOperatorAccess() {
		return gaARTISTCommon.getCommonLogarithmOperatorAccess();
	}
	
	public ParserRule getCommonLogarithmOperatorRule() {
		return getCommonLogarithmOperatorAccess().getRule();
	}

	//LeftParenthesis:
	//	"(";
	public ARTISTCommonGrammarAccess.LeftParenthesisElements getLeftParenthesisAccess() {
		return gaARTISTCommon.getLeftParenthesisAccess();
	}
	
	public ParserRule getLeftParenthesisRule() {
		return getLeftParenthesisAccess().getRule();
	}

	//RightParenthesis:
	//	")";
	public ARTISTCommonGrammarAccess.RightParenthesisElements getRightParenthesisAccess() {
		return gaARTISTCommon.getRightParenthesisAccess();
	}
	
	public ParserRule getRightParenthesisRule() {
		return getRightParenthesisAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public ARTISTCommonGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaARTISTCommon.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public ARTISTCommonGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaARTISTCommon.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ImportURIorNamespace:
	//	"import" (importURI=STRING | importedNamespace=QualifiedNameWithWildcard);
	public ARTISTCommonGrammarAccess.ImportURIorNamespaceElements getImportURIorNamespaceAccess() {
		return gaARTISTCommon.getImportURIorNamespaceAccess();
	}
	
	public ParserRule getImportURIorNamespaceRule() {
		return getImportURIorNamespaceAccess().getRule();
	}

	//ImportURI:
	//	"import" importURI=STRING;
	public ARTISTCommonGrammarAccess.ImportURIElements getImportURIAccess() {
		return gaARTISTCommon.getImportURIAccess();
	}
	
	public ParserRule getImportURIRule() {
		return getImportURIAccess().getRule();
	}

	//ImportNamespace:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ARTISTCommonGrammarAccess.ImportNamespaceElements getImportNamespaceAccess() {
		return gaARTISTCommon.getImportNamespaceAccess();
	}
	
	public ParserRule getImportNamespaceRule() {
		return getImportNamespaceAccess().getRule();
	}

	//Number returns ecore::EBigDecimal:
	//	INT | POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL | EBIGDECIMAL;
	public ARTISTCommonGrammarAccess.NumberElements getNumberAccess() {
		return gaARTISTCommon.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Impact returns ecore::EBigDecimal:
	//	POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL;
	public ARTISTCommonGrammarAccess.ImpactElements getImpactAccess() {
		return gaARTISTCommon.getImpactAccess();
	}
	
	public ParserRule getImpactRule() {
		return getImpactAccess().getRule();
	}

	//EBooleanObject returns ecore::EBooleanObject:
	//	NULL | EBOOLEAN;
	public ARTISTCommonGrammarAccess.EBooleanObjectElements getEBooleanObjectAccess() {
		return gaARTISTCommon.getEBooleanObjectAccess();
	}
	
	public ParserRule getEBooleanObjectRule() {
		return getEBooleanObjectAccess().getRule();
	}

	//terminal EBOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getEBOOLEANRule() {
		return gaARTISTCommon.getEBOOLEANRule();
	} 

	//terminal NULL:
	//	"null";
	public TerminalRule getNULLRule() {
		return gaARTISTCommon.getNULLRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaARTISTCommon.getINTRule();
	} 

	//terminal POSITIVE_SMALL_DECIMAL returns ecore::EBigDecimal:
	//	"1" ("." "0"+)? | "0" ("." "0".."9"+)? | "." "0".."9"+;
	public TerminalRule getPOSITIVE_SMALL_DECIMALRule() {
		return gaARTISTCommon.getPOSITIVE_SMALL_DECIMALRule();
	} 

	//terminal SMALL_DECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? POSITIVE_SMALL_DECIMAL;
	public TerminalRule getSMALL_DECIMALRule() {
		return gaARTISTCommon.getSMALL_DECIMALRule();
	} 

	//terminal EBIGDECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? (INT | "." INT | INT "." INT);
	public TerminalRule getEBIGDECIMALRule() {
		return gaARTISTCommon.getEBIGDECIMALRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "§") ("a".."z" | "A".."Z" |
	//	"_" | "0".."9" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "§")*;
	public TerminalRule getIDRule() {
		return gaARTISTCommon.getIDRule();
	} 

	//terminal DATE_TIME returns ecore::EDate: // time zone not working: (('+'|'-') INT ((':' INT) | INT)?)?
	//	INT "-" INT "-" INT ("T" INT ":" INT (":" INT ("." INT)?)?)?;
	public TerminalRule getDATE_TIMERule() {
		return gaARTISTCommon.getDATE_TIMERule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaARTISTCommon.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaARTISTCommon.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaARTISTCommon.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaARTISTCommon.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaARTISTCommon.getANY_OTHERRule();
	} 
}
