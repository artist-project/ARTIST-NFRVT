/*******************************************************************************
 * Copyright (c) 2014 Vienna University of Technology.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Martin Fleck (Vienna University of Technology) - initial API and implementation
 *
 * Initially developed in the context of ARTIST EU project www.artist-project.eu
 *******************************************************************************/
grammar eu.artist.postmigration.nfrvt.lang.nsl.NSL with eu.artist.postmigration.nfrvt.lang.common.ARTISTCommon

import "http://www.artist.eu/postmigration/nfrvt/lang/common/ARTISTCommon" as common
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/uml2/4.0.0/UML" as uml

generate nsl "http://www.artist.eu/postmigration/nfrvt/lang/nsl/NSL"

ARTISTModel returns common::ARTISTModel:
	PropertyCatalogue
;

PropertyCatalogue:
	imports += ImportNamespace*
	"property-catalogue" name = QualifiedName "{"
		(properties += Property)*
	"}"
;

Property:
	QualitativeProperty | QuantitativeProperty
;

QualitativeProperty:
	"qualitative" name=ID "{"
		"description" description=STRING 
		("," "direction" direction = DirectionKind)?
		("," "properties" "[" (properties+=[Property | QualifiedName])+ "]")? 
		("," "impacts" "[" impacts += PropertyImpact ("," impacts += PropertyImpact)*"]")?
	"}"
;

QuantitativeProperty:
	BaseQuantitativeProperty | DerivedQuantitativeProperty
;

BaseQuantitativeProperty:
	"quantitative" name=ID "{"
		"description" description=STRING
		"," "type" type=[uml::DataType | QualifiedName]
		("," "direction" direction = DirectionKind)?
		("," "impacts" "[" impacts += PropertyImpact ("," impacts += PropertyImpact)* "]" )?
	"}"
;

DerivedQuantitativeProperty:
	"derived" name=ID "{"
		"description" description=STRING 
		"," "type" type=[uml::DataType | QualifiedName]
		"," "direction" direction = DirectionKind
		"," "expression" expression = ArithmeticExpression
		("," "impacts" "[" impacts += PropertyImpact ("," impacts += PropertyImpact)* "]" )?
	"}"
;

ComparableExpression returns common::ComparableExpression:
	NumberExpression	
;

NumberExpression returns common::NumberExpression:
	NumberLiteral | NumberFunction | ParenthesizedArithmeticExpression | QuantitativePropertyExpression
;

ParenthesizedArithmeticExpression returns common::NumberExpression:
	{ParenthesizedArithmeticExpression} LeftParenthesis value = ArithmeticExpression RightParenthesis
;

QuantitativePropertyExpression returns common::NumberExpression:
	{QuantitativePropertyExpression} "$" value = [QuantitativeProperty | QualifiedName]
;

enum DirectionKind:
	INCREASING = "increasing" | DECREASING = "decreasing" | RANGE = "range"
;

PropertyImpact:
	target = [Property | QualifiedName] 
	impact = Impact
;