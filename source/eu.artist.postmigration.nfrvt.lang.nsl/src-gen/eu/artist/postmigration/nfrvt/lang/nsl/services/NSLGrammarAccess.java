/*
* generated by Xtext
*/
package eu.artist.postmigration.nfrvt.lang.nsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import eu.artist.postmigration.nfrvt.lang.common.services.ARTISTCommonGrammarAccess;

@Singleton
public class NSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ARTISTModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARTISTModel");
		private final RuleCall cPropertyCatalogueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ARTISTModel returns common::ARTISTModel:
		//	PropertyCatalogue;
		public ParserRule getRule() { return rule; }

		//PropertyCatalogue
		public RuleCall getPropertyCatalogueParserRuleCall() { return cPropertyCatalogueParserRuleCall; }
	}

	public class PropertyCatalogueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyCatalogue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportNamespaceParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cPropertyCatalogueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PropertyCatalogue:
		//	imports+=ImportNamespace* "property-catalogue" name=QualifiedName "{" properties+=Property* "}";
		public ParserRule getRule() { return rule; }

		//imports+=ImportNamespace* "property-catalogue" name=QualifiedName "{" properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//imports+=ImportNamespace*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//ImportNamespace
		public RuleCall getImportsImportNamespaceParserRuleCall_0_0() { return cImportsImportNamespaceParserRuleCall_0_0; }

		//"property-catalogue"
		public Keyword getPropertyCatalogueKeyword_1() { return cPropertyCatalogueKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_0() { return cPropertiesPropertyParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualitativePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuantitativePropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	QualitativeProperty | QuantitativeProperty;
		public ParserRule getRule() { return rule; }

		//QualitativeProperty | QuantitativeProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//QualitativeProperty
		public RuleCall getQualitativePropertyParserRuleCall_0() { return cQualitativePropertyParserRuleCall_0; }

		//QuantitativeProperty
		public RuleCall getQuantitativePropertyParserRuleCall_1() { return cQuantitativePropertyParserRuleCall_1; }
	}

	public class QualitativePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualitativeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQualitativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cDirectionKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDirectionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDirectionDirectionKindEnumRuleCall_5_2_0 = (RuleCall)cDirectionAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cPropertiesKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cPropertiesAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final CrossReference cPropertiesPropertyCrossReference_6_3_0 = (CrossReference)cPropertiesAssignment_6_3.eContents().get(0);
		private final RuleCall cPropertiesPropertyQualifiedNameParserRuleCall_6_3_0_1 = (RuleCall)cPropertiesPropertyCrossReference_6_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cImpactsKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cImpactsAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cImpactsPropertyImpactParserRuleCall_7_3_0 = (RuleCall)cImpactsAssignment_7_3.eContents().get(0);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Keyword cCommaKeyword_7_4_0 = (Keyword)cGroup_7_4.eContents().get(0);
		private final Assignment cImpactsAssignment_7_4_1 = (Assignment)cGroup_7_4.eContents().get(1);
		private final RuleCall cImpactsPropertyImpactParserRuleCall_7_4_1_0 = (RuleCall)cImpactsAssignment_7_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//QualitativeProperty:
		//	"qualitative" name=ID "{" "description" description=STRING ("," "direction" direction=DirectionKind)? (","
		//	"properties" "[" properties+=[Property|QualifiedName]+ "]")? ("," "impacts" "[" impacts+=PropertyImpact (","
		//	impacts+=PropertyImpact)* "]")? "}";
		public ParserRule getRule() { return rule; }

		//"qualitative" name=ID "{" "description" description=STRING ("," "direction" direction=DirectionKind)? ("," "properties"
		//"[" properties+=[Property|QualifiedName]+ "]")? ("," "impacts" "[" impacts+=PropertyImpact (","
		//impacts+=PropertyImpact)* "]")? "}"
		public Group getGroup() { return cGroup; }

		//"qualitative"
		public Keyword getQualitativeKeyword_0() { return cQualitativeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"description"
		public Keyword getDescriptionKeyword_3() { return cDescriptionKeyword_3; }

		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }

		//("," "direction" direction=DirectionKind)?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"direction"
		public Keyword getDirectionKeyword_5_1() { return cDirectionKeyword_5_1; }

		//direction=DirectionKind
		public Assignment getDirectionAssignment_5_2() { return cDirectionAssignment_5_2; }

		//DirectionKind
		public RuleCall getDirectionDirectionKindEnumRuleCall_5_2_0() { return cDirectionDirectionKindEnumRuleCall_5_2_0; }

		//("," "properties" "[" properties+=[Property|QualifiedName]+ "]")?
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//"properties"
		public Keyword getPropertiesKeyword_6_1() { return cPropertiesKeyword_6_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_2() { return cLeftSquareBracketKeyword_6_2; }

		//properties+=[Property|QualifiedName]+
		public Assignment getPropertiesAssignment_6_3() { return cPropertiesAssignment_6_3; }

		//[Property|QualifiedName]
		public CrossReference getPropertiesPropertyCrossReference_6_3_0() { return cPropertiesPropertyCrossReference_6_3_0; }

		//QualifiedName
		public RuleCall getPropertiesPropertyQualifiedNameParserRuleCall_6_3_0_1() { return cPropertiesPropertyQualifiedNameParserRuleCall_6_3_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_4() { return cRightSquareBracketKeyword_6_4; }

		//("," "impacts" "[" impacts+=PropertyImpact ("," impacts+=PropertyImpact)* "]")?
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//"impacts"
		public Keyword getImpactsKeyword_7_1() { return cImpactsKeyword_7_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_2() { return cLeftSquareBracketKeyword_7_2; }

		//impacts+=PropertyImpact
		public Assignment getImpactsAssignment_7_3() { return cImpactsAssignment_7_3; }

		//PropertyImpact
		public RuleCall getImpactsPropertyImpactParserRuleCall_7_3_0() { return cImpactsPropertyImpactParserRuleCall_7_3_0; }

		//("," impacts+=PropertyImpact)*
		public Group getGroup_7_4() { return cGroup_7_4; }

		//","
		public Keyword getCommaKeyword_7_4_0() { return cCommaKeyword_7_4_0; }

		//impacts+=PropertyImpact
		public Assignment getImpactsAssignment_7_4_1() { return cImpactsAssignment_7_4_1; }

		//PropertyImpact
		public RuleCall getImpactsPropertyImpactParserRuleCall_7_4_1_0() { return cImpactsPropertyImpactParserRuleCall_7_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_5() { return cRightSquareBracketKeyword_7_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class QuantitativePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuantitativeProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBaseQuantitativePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDerivedQuantitativePropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//QuantitativeProperty:
		//	BaseQuantitativeProperty | DerivedQuantitativeProperty;
		public ParserRule getRule() { return rule; }

		//BaseQuantitativeProperty | DerivedQuantitativeProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//BaseQuantitativeProperty
		public RuleCall getBaseQuantitativePropertyParserRuleCall_0() { return cBaseQuantitativePropertyParserRuleCall_0; }

		//DerivedQuantitativeProperty
		public RuleCall getDerivedQuantitativePropertyParserRuleCall_1() { return cDerivedQuantitativePropertyParserRuleCall_1; }
	}

	public class BaseQuantitativePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseQuantitativeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuantitativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTypeDataTypeCrossReference_7_0 = (CrossReference)cTypeAssignment_7.eContents().get(0);
		private final RuleCall cTypeDataTypeQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cTypeDataTypeCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cDirectionKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cDirectionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cDirectionDirectionKindEnumRuleCall_8_2_0 = (RuleCall)cDirectionAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cImpactsKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cImpactsAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cImpactsPropertyImpactParserRuleCall_9_3_0 = (RuleCall)cImpactsAssignment_9_3.eContents().get(0);
		private final Group cGroup_9_4 = (Group)cGroup_9.eContents().get(4);
		private final Keyword cCommaKeyword_9_4_0 = (Keyword)cGroup_9_4.eContents().get(0);
		private final Assignment cImpactsAssignment_9_4_1 = (Assignment)cGroup_9_4.eContents().get(1);
		private final RuleCall cImpactsPropertyImpactParserRuleCall_9_4_1_0 = (RuleCall)cImpactsAssignment_9_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9_5 = (Keyword)cGroup_9.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//BaseQuantitativeProperty:
		//	"quantitative" name=ID "{" "description" description=STRING "," "type" type=[uml::DataType|QualifiedName] (","
		//	"direction" direction=DirectionKind)? ("," "impacts" "[" impacts+=PropertyImpact ("," impacts+=PropertyImpact)* "]")?
		//	"}";
		public ParserRule getRule() { return rule; }

		//"quantitative" name=ID "{" "description" description=STRING "," "type" type=[uml::DataType|QualifiedName] (","
		//"direction" direction=DirectionKind)? ("," "impacts" "[" impacts+=PropertyImpact ("," impacts+=PropertyImpact)* "]")?
		//"}"
		public Group getGroup() { return cGroup; }

		//"quantitative"
		public Keyword getQuantitativeKeyword_0() { return cQuantitativeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"description"
		public Keyword getDescriptionKeyword_3() { return cDescriptionKeyword_3; }

		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"type"
		public Keyword getTypeKeyword_6() { return cTypeKeyword_6; }

		//type=[uml::DataType|QualifiedName]
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//[uml::DataType|QualifiedName]
		public CrossReference getTypeDataTypeCrossReference_7_0() { return cTypeDataTypeCrossReference_7_0; }

		//QualifiedName
		public RuleCall getTypeDataTypeQualifiedNameParserRuleCall_7_0_1() { return cTypeDataTypeQualifiedNameParserRuleCall_7_0_1; }

		//("," "direction" direction=DirectionKind)?
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//"direction"
		public Keyword getDirectionKeyword_8_1() { return cDirectionKeyword_8_1; }

		//direction=DirectionKind
		public Assignment getDirectionAssignment_8_2() { return cDirectionAssignment_8_2; }

		//DirectionKind
		public RuleCall getDirectionDirectionKindEnumRuleCall_8_2_0() { return cDirectionDirectionKindEnumRuleCall_8_2_0; }

		//("," "impacts" "[" impacts+=PropertyImpact ("," impacts+=PropertyImpact)* "]")?
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//"impacts"
		public Keyword getImpactsKeyword_9_1() { return cImpactsKeyword_9_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_9_2() { return cLeftSquareBracketKeyword_9_2; }

		//impacts+=PropertyImpact
		public Assignment getImpactsAssignment_9_3() { return cImpactsAssignment_9_3; }

		//PropertyImpact
		public RuleCall getImpactsPropertyImpactParserRuleCall_9_3_0() { return cImpactsPropertyImpactParserRuleCall_9_3_0; }

		//("," impacts+=PropertyImpact)*
		public Group getGroup_9_4() { return cGroup_9_4; }

		//","
		public Keyword getCommaKeyword_9_4_0() { return cCommaKeyword_9_4_0; }

		//impacts+=PropertyImpact
		public Assignment getImpactsAssignment_9_4_1() { return cImpactsAssignment_9_4_1; }

		//PropertyImpact
		public RuleCall getImpactsPropertyImpactParserRuleCall_9_4_1_0() { return cImpactsPropertyImpactParserRuleCall_9_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_9_5() { return cRightSquareBracketKeyword_9_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class DerivedQuantitativePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DerivedQuantitativeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDerivedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTypeDataTypeCrossReference_7_0 = (CrossReference)cTypeAssignment_7.eContents().get(0);
		private final RuleCall cTypeDataTypeQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cTypeDataTypeCrossReference_7_0.eContents().get(1);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cDirectionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDirectionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDirectionDirectionKindEnumRuleCall_10_0 = (RuleCall)cDirectionAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cExpressionKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cExpressionAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cExpressionArithmeticExpressionParserRuleCall_13_0 = (RuleCall)cExpressionAssignment_13.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cCommaKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cImpactsKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Assignment cImpactsAssignment_14_3 = (Assignment)cGroup_14.eContents().get(3);
		private final RuleCall cImpactsPropertyImpactParserRuleCall_14_3_0 = (RuleCall)cImpactsAssignment_14_3.eContents().get(0);
		private final Group cGroup_14_4 = (Group)cGroup_14.eContents().get(4);
		private final Keyword cCommaKeyword_14_4_0 = (Keyword)cGroup_14_4.eContents().get(0);
		private final Assignment cImpactsAssignment_14_4_1 = (Assignment)cGroup_14_4.eContents().get(1);
		private final RuleCall cImpactsPropertyImpactParserRuleCall_14_4_1_0 = (RuleCall)cImpactsAssignment_14_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_14_5 = (Keyword)cGroup_14.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//DerivedQuantitativeProperty:
		//	"derived" name=ID "{" "description" description=STRING "," "type" type=[uml::DataType|QualifiedName] "," "direction"
		//	direction=DirectionKind "," "expression" expression=ArithmeticExpression ("," "impacts" "[" impacts+=PropertyImpact
		//	("," impacts+=PropertyImpact)* "]")? "}";
		public ParserRule getRule() { return rule; }

		//"derived" name=ID "{" "description" description=STRING "," "type" type=[uml::DataType|QualifiedName] "," "direction"
		//direction=DirectionKind "," "expression" expression=ArithmeticExpression ("," "impacts" "[" impacts+=PropertyImpact
		//("," impacts+=PropertyImpact)* "]")? "}"
		public Group getGroup() { return cGroup; }

		//"derived"
		public Keyword getDerivedKeyword_0() { return cDerivedKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"description"
		public Keyword getDescriptionKeyword_3() { return cDescriptionKeyword_3; }

		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"type"
		public Keyword getTypeKeyword_6() { return cTypeKeyword_6; }

		//type=[uml::DataType|QualifiedName]
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//[uml::DataType|QualifiedName]
		public CrossReference getTypeDataTypeCrossReference_7_0() { return cTypeDataTypeCrossReference_7_0; }

		//QualifiedName
		public RuleCall getTypeDataTypeQualifiedNameParserRuleCall_7_0_1() { return cTypeDataTypeQualifiedNameParserRuleCall_7_0_1; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//"direction"
		public Keyword getDirectionKeyword_9() { return cDirectionKeyword_9; }

		//direction=DirectionKind
		public Assignment getDirectionAssignment_10() { return cDirectionAssignment_10; }

		//DirectionKind
		public RuleCall getDirectionDirectionKindEnumRuleCall_10_0() { return cDirectionDirectionKindEnumRuleCall_10_0; }

		//","
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }

		//"expression"
		public Keyword getExpressionKeyword_12() { return cExpressionKeyword_12; }

		//expression=ArithmeticExpression
		public Assignment getExpressionAssignment_13() { return cExpressionAssignment_13; }

		//ArithmeticExpression
		public RuleCall getExpressionArithmeticExpressionParserRuleCall_13_0() { return cExpressionArithmeticExpressionParserRuleCall_13_0; }

		//("," "impacts" "[" impacts+=PropertyImpact ("," impacts+=PropertyImpact)* "]")?
		public Group getGroup_14() { return cGroup_14; }

		//","
		public Keyword getCommaKeyword_14_0() { return cCommaKeyword_14_0; }

		//"impacts"
		public Keyword getImpactsKeyword_14_1() { return cImpactsKeyword_14_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_14_2() { return cLeftSquareBracketKeyword_14_2; }

		//impacts+=PropertyImpact
		public Assignment getImpactsAssignment_14_3() { return cImpactsAssignment_14_3; }

		//PropertyImpact
		public RuleCall getImpactsPropertyImpactParserRuleCall_14_3_0() { return cImpactsPropertyImpactParserRuleCall_14_3_0; }

		//("," impacts+=PropertyImpact)*
		public Group getGroup_14_4() { return cGroup_14_4; }

		//","
		public Keyword getCommaKeyword_14_4_0() { return cCommaKeyword_14_4_0; }

		//impacts+=PropertyImpact
		public Assignment getImpactsAssignment_14_4_1() { return cImpactsAssignment_14_4_1; }

		//PropertyImpact
		public RuleCall getImpactsPropertyImpactParserRuleCall_14_4_1_0() { return cImpactsPropertyImpactParserRuleCall_14_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_14_5() { return cRightSquareBracketKeyword_14_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}

	public class ComparableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparableExpression");
		private final RuleCall cNumberExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ComparableExpression returns common::ComparableExpression:
		//	NumberExpression;
		public ParserRule getRule() { return rule; }

		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall() { return cNumberExpressionParserRuleCall; }
	}

	public class NumberExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesizedArithmeticExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQuantitativePropertyExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NumberExpression returns common::NumberExpression:
		//	NumberLiteral | NumberFunction | ParenthesizedArithmeticExpression | QuantitativePropertyExpression;
		public ParserRule getRule() { return rule; }

		//NumberLiteral | NumberFunction | ParenthesizedArithmeticExpression | QuantitativePropertyExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//NumberFunction
		public RuleCall getNumberFunctionParserRuleCall_1() { return cNumberFunctionParserRuleCall_1; }

		//ParenthesizedArithmeticExpression
		public RuleCall getParenthesizedArithmeticExpressionParserRuleCall_2() { return cParenthesizedArithmeticExpressionParserRuleCall_2; }

		//QuantitativePropertyExpression
		public RuleCall getQuantitativePropertyExpressionParserRuleCall_3() { return cQuantitativePropertyExpressionParserRuleCall_3; }
	}

	public class ParenthesizedArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedArithmeticExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParenthesizedArithmeticExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLeftParenthesisParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueArithmeticExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final RuleCall cRightParenthesisParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ParenthesizedArithmeticExpression returns common::NumberExpression:
		//	{ParenthesizedArithmeticExpression} LeftParenthesis value=ArithmeticExpression RightParenthesis;
		public ParserRule getRule() { return rule; }

		//{ParenthesizedArithmeticExpression} LeftParenthesis value=ArithmeticExpression RightParenthesis
		public Group getGroup() { return cGroup; }

		//{ParenthesizedArithmeticExpression}
		public Action getParenthesizedArithmeticExpressionAction_0() { return cParenthesizedArithmeticExpressionAction_0; }

		//LeftParenthesis
		public RuleCall getLeftParenthesisParserRuleCall_1() { return cLeftParenthesisParserRuleCall_1; }

		//value=ArithmeticExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ArithmeticExpression
		public RuleCall getValueArithmeticExpressionParserRuleCall_2_0() { return cValueArithmeticExpressionParserRuleCall_2_0; }

		//RightParenthesis
		public RuleCall getRightParenthesisParserRuleCall_3() { return cRightParenthesisParserRuleCall_3; }
	}

	public class QuantitativePropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuantitativePropertyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuantitativePropertyExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueQuantitativePropertyCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueQuantitativePropertyQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cValueQuantitativePropertyCrossReference_2_0.eContents().get(1);
		
		//QuantitativePropertyExpression returns common::NumberExpression:
		//	{QuantitativePropertyExpression} "$" value=[QuantitativeProperty|QualifiedName];
		public ParserRule getRule() { return rule; }

		//{QuantitativePropertyExpression} "$" value=[QuantitativeProperty|QualifiedName]
		public Group getGroup() { return cGroup; }

		//{QuantitativePropertyExpression}
		public Action getQuantitativePropertyExpressionAction_0() { return cQuantitativePropertyExpressionAction_0; }

		//"$"
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }

		//value=[QuantitativeProperty|QualifiedName]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[QuantitativeProperty|QualifiedName]
		public CrossReference getValueQuantitativePropertyCrossReference_2_0() { return cValueQuantitativePropertyCrossReference_2_0; }

		//QualifiedName
		public RuleCall getValueQuantitativePropertyQualifiedNameParserRuleCall_2_0_1() { return cValueQuantitativePropertyQualifiedNameParserRuleCall_2_0_1; }
	}

	public class PropertyImpactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyImpact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetPropertyCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetPropertyQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTargetPropertyCrossReference_0_0.eContents().get(1);
		private final Assignment cImpactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImpactImpactParserRuleCall_1_0 = (RuleCall)cImpactAssignment_1.eContents().get(0);
		
		//PropertyImpact:
		//	target=[Property|QualifiedName] impact=Impact;
		public ParserRule getRule() { return rule; }

		//target=[Property|QualifiedName] impact=Impact
		public Group getGroup() { return cGroup; }

		//target=[Property|QualifiedName]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[Property|QualifiedName]
		public CrossReference getTargetPropertyCrossReference_0_0() { return cTargetPropertyCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTargetPropertyQualifiedNameParserRuleCall_0_0_1() { return cTargetPropertyQualifiedNameParserRuleCall_0_0_1; }

		//impact=Impact
		public Assignment getImpactAssignment_1() { return cImpactAssignment_1; }

		//Impact
		public RuleCall getImpactImpactParserRuleCall_1_0() { return cImpactImpactParserRuleCall_1_0; }
	}
	
	
	public class DirectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DirectionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCREASINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCREASINGIncreasingKeyword_0_0 = (Keyword)cINCREASINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDECREASINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDECREASINGDecreasingKeyword_1_0 = (Keyword)cDECREASINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRANGEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRANGERangeKeyword_2_0 = (Keyword)cRANGEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DirectionKind:
		//	INCREASING="increasing" | DECREASING="decreasing" | RANGE="range";
		public EnumRule getRule() { return rule; }

		//INCREASING="increasing" | DECREASING="decreasing" | RANGE="range"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INCREASING="increasing"
		public EnumLiteralDeclaration getINCREASINGEnumLiteralDeclaration_0() { return cINCREASINGEnumLiteralDeclaration_0; }

		//"increasing"
		public Keyword getINCREASINGIncreasingKeyword_0_0() { return cINCREASINGIncreasingKeyword_0_0; }

		//DECREASING="decreasing"
		public EnumLiteralDeclaration getDECREASINGEnumLiteralDeclaration_1() { return cDECREASINGEnumLiteralDeclaration_1; }

		//"decreasing"
		public Keyword getDECREASINGDecreasingKeyword_1_0() { return cDECREASINGDecreasingKeyword_1_0; }

		//RANGE="range"
		public EnumLiteralDeclaration getRANGEEnumLiteralDeclaration_2() { return cRANGEEnumLiteralDeclaration_2; }

		//"range"
		public Keyword getRANGERangeKeyword_2_0() { return cRANGERangeKeyword_2_0; }
	}
	
	private ARTISTModelElements pARTISTModel;
	private PropertyCatalogueElements pPropertyCatalogue;
	private PropertyElements pProperty;
	private QualitativePropertyElements pQualitativeProperty;
	private QuantitativePropertyElements pQuantitativeProperty;
	private BaseQuantitativePropertyElements pBaseQuantitativeProperty;
	private DerivedQuantitativePropertyElements pDerivedQuantitativeProperty;
	private ComparableExpressionElements pComparableExpression;
	private NumberExpressionElements pNumberExpression;
	private ParenthesizedArithmeticExpressionElements pParenthesizedArithmeticExpression;
	private QuantitativePropertyExpressionElements pQuantitativePropertyExpression;
	private DirectionKindElements unknownRuleDirectionKind;
	private PropertyImpactElements pPropertyImpact;
	
	private final Grammar grammar;

	private ARTISTCommonGrammarAccess gaARTISTCommon;

	@Inject
	public NSLGrammarAccess(GrammarProvider grammarProvider,
		ARTISTCommonGrammarAccess gaARTISTCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaARTISTCommon = gaARTISTCommon;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.artist.postmigration.nfrvt.lang.nsl.NSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ARTISTCommonGrammarAccess getARTISTCommonGrammarAccess() {
		return gaARTISTCommon;
	}

	
	//ARTISTModel returns common::ARTISTModel:
	//	PropertyCatalogue;
	public ARTISTModelElements getARTISTModelAccess() {
		return (pARTISTModel != null) ? pARTISTModel : (pARTISTModel = new ARTISTModelElements());
	}
	
	public ParserRule getARTISTModelRule() {
		return getARTISTModelAccess().getRule();
	}

	//PropertyCatalogue:
	//	imports+=ImportNamespace* "property-catalogue" name=QualifiedName "{" properties+=Property* "}";
	public PropertyCatalogueElements getPropertyCatalogueAccess() {
		return (pPropertyCatalogue != null) ? pPropertyCatalogue : (pPropertyCatalogue = new PropertyCatalogueElements());
	}
	
	public ParserRule getPropertyCatalogueRule() {
		return getPropertyCatalogueAccess().getRule();
	}

	//Property:
	//	QualitativeProperty | QuantitativeProperty;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//QualitativeProperty:
	//	"qualitative" name=ID "{" "description" description=STRING ("," "direction" direction=DirectionKind)? (","
	//	"properties" "[" properties+=[Property|QualifiedName]+ "]")? ("," "impacts" "[" impacts+=PropertyImpact (","
	//	impacts+=PropertyImpact)* "]")? "}";
	public QualitativePropertyElements getQualitativePropertyAccess() {
		return (pQualitativeProperty != null) ? pQualitativeProperty : (pQualitativeProperty = new QualitativePropertyElements());
	}
	
	public ParserRule getQualitativePropertyRule() {
		return getQualitativePropertyAccess().getRule();
	}

	//QuantitativeProperty:
	//	BaseQuantitativeProperty | DerivedQuantitativeProperty;
	public QuantitativePropertyElements getQuantitativePropertyAccess() {
		return (pQuantitativeProperty != null) ? pQuantitativeProperty : (pQuantitativeProperty = new QuantitativePropertyElements());
	}
	
	public ParserRule getQuantitativePropertyRule() {
		return getQuantitativePropertyAccess().getRule();
	}

	//BaseQuantitativeProperty:
	//	"quantitative" name=ID "{" "description" description=STRING "," "type" type=[uml::DataType|QualifiedName] (","
	//	"direction" direction=DirectionKind)? ("," "impacts" "[" impacts+=PropertyImpact ("," impacts+=PropertyImpact)* "]")?
	//	"}";
	public BaseQuantitativePropertyElements getBaseQuantitativePropertyAccess() {
		return (pBaseQuantitativeProperty != null) ? pBaseQuantitativeProperty : (pBaseQuantitativeProperty = new BaseQuantitativePropertyElements());
	}
	
	public ParserRule getBaseQuantitativePropertyRule() {
		return getBaseQuantitativePropertyAccess().getRule();
	}

	//DerivedQuantitativeProperty:
	//	"derived" name=ID "{" "description" description=STRING "," "type" type=[uml::DataType|QualifiedName] "," "direction"
	//	direction=DirectionKind "," "expression" expression=ArithmeticExpression ("," "impacts" "[" impacts+=PropertyImpact
	//	("," impacts+=PropertyImpact)* "]")? "}";
	public DerivedQuantitativePropertyElements getDerivedQuantitativePropertyAccess() {
		return (pDerivedQuantitativeProperty != null) ? pDerivedQuantitativeProperty : (pDerivedQuantitativeProperty = new DerivedQuantitativePropertyElements());
	}
	
	public ParserRule getDerivedQuantitativePropertyRule() {
		return getDerivedQuantitativePropertyAccess().getRule();
	}

	//ComparableExpression returns common::ComparableExpression:
	//	NumberExpression;
	public ComparableExpressionElements getComparableExpressionAccess() {
		return (pComparableExpression != null) ? pComparableExpression : (pComparableExpression = new ComparableExpressionElements());
	}
	
	public ParserRule getComparableExpressionRule() {
		return getComparableExpressionAccess().getRule();
	}

	//NumberExpression returns common::NumberExpression:
	//	NumberLiteral | NumberFunction | ParenthesizedArithmeticExpression | QuantitativePropertyExpression;
	public NumberExpressionElements getNumberExpressionAccess() {
		return (pNumberExpression != null) ? pNumberExpression : (pNumberExpression = new NumberExpressionElements());
	}
	
	public ParserRule getNumberExpressionRule() {
		return getNumberExpressionAccess().getRule();
	}

	//ParenthesizedArithmeticExpression returns common::NumberExpression:
	//	{ParenthesizedArithmeticExpression} LeftParenthesis value=ArithmeticExpression RightParenthesis;
	public ParenthesizedArithmeticExpressionElements getParenthesizedArithmeticExpressionAccess() {
		return (pParenthesizedArithmeticExpression != null) ? pParenthesizedArithmeticExpression : (pParenthesizedArithmeticExpression = new ParenthesizedArithmeticExpressionElements());
	}
	
	public ParserRule getParenthesizedArithmeticExpressionRule() {
		return getParenthesizedArithmeticExpressionAccess().getRule();
	}

	//QuantitativePropertyExpression returns common::NumberExpression:
	//	{QuantitativePropertyExpression} "$" value=[QuantitativeProperty|QualifiedName];
	public QuantitativePropertyExpressionElements getQuantitativePropertyExpressionAccess() {
		return (pQuantitativePropertyExpression != null) ? pQuantitativePropertyExpression : (pQuantitativePropertyExpression = new QuantitativePropertyExpressionElements());
	}
	
	public ParserRule getQuantitativePropertyExpressionRule() {
		return getQuantitativePropertyExpressionAccess().getRule();
	}

	//enum DirectionKind:
	//	INCREASING="increasing" | DECREASING="decreasing" | RANGE="range";
	public DirectionKindElements getDirectionKindAccess() {
		return (unknownRuleDirectionKind != null) ? unknownRuleDirectionKind : (unknownRuleDirectionKind = new DirectionKindElements());
	}
	
	public EnumRule getDirectionKindRule() {
		return getDirectionKindAccess().getRule();
	}

	//PropertyImpact:
	//	target=[Property|QualifiedName] impact=Impact;
	public PropertyImpactElements getPropertyImpactAccess() {
		return (pPropertyImpact != null) ? pPropertyImpact : (pPropertyImpact = new PropertyImpactElements());
	}
	
	public ParserRule getPropertyImpactRule() {
		return getPropertyImpactAccess().getRule();
	}

	//Expression:
	//	Implication;
	public ARTISTCommonGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaARTISTCommon.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Implication:
	//	Disjunction ({Implication.left=current} operator=ImplicationOperator right=Disjunction)*;
	public ARTISTCommonGrammarAccess.ImplicationElements getImplicationAccess() {
		return gaARTISTCommon.getImplicationAccess();
	}
	
	public ParserRule getImplicationRule() {
		return getImplicationAccess().getRule();
	}

	//Disjunction:
	//	Conjunction ({Disjunction.left=current} operator=(OrOperator | XOrOperator) right=Conjunction)*;
	public ARTISTCommonGrammarAccess.DisjunctionElements getDisjunctionAccess() {
		return gaARTISTCommon.getDisjunctionAccess();
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}

	//Conjunction:
	//	Comparison ({Conjunction.left=current} operator=AndOperator right=Comparison)*;
	public ARTISTCommonGrammarAccess.ConjunctionElements getConjunctionAccess() {
		return gaARTISTCommon.getConjunctionAccess();
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Comparison:
	//	BooleanUnit ({Comparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=BooleanUnit)*;
	public ARTISTCommonGrammarAccess.ComparisonElements getComparisonAccess() {
		return gaARTISTCommon.getComparisonAccess();
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//BooleanUnit:
	//	Negation | RelationalExpression | BooleanLiteral;
	public ARTISTCommonGrammarAccess.BooleanUnitElements getBooleanUnitAccess() {
		return gaARTISTCommon.getBooleanUnitAccess();
	}
	
	public ParserRule getBooleanUnitRule() {
		return getBooleanUnitAccess().getRule();
	}

	//Negation:
	//	operator=NotOperator value=BooleanUnit;
	public ARTISTCommonGrammarAccess.NegationElements getNegationAccess() {
		return gaARTISTCommon.getNegationAccess();
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//RelationalExpression:
	//	ComparableExpression (({RelationalExpression.left=current} operator=GreaterThanOperator |
	//	{RelationalExpression.left=current} operator=GreaterOrEqualThanOperator | {RelationalExpression.left=current}
	//	operator=LessOrEqualThanOperator | {RelationalExpression.left=current} operator=LessThanOperator)
	//	right=ComparableExpression)*;
	public ARTISTCommonGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaARTISTCommon.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//ArithmeticExpression:
	//	AdditiveExpression;
	public ARTISTCommonGrammarAccess.ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return gaARTISTCommon.getArithmeticExpressionAccess();
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}

	//AdditiveExpression:
	//	MultiplicativeExpression ({AdditiveExpression.left=current} operator=(SubstractionOperator | AdditionOperator)
	//	right=MultiplicativeExpression)*;
	public ARTISTCommonGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaARTISTCommon.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression:
	//	NumberExpression ({MultiplicativeExpression.left=current} operator=(MultiplicationOperator | DivisionOperator |
	//	ModulusOperator) right=NumberExpression)*;
	public ARTISTCommonGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaARTISTCommon.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//NumberFunction:
	//	MaximumFunction | MinimumFunction | AverageFunction | SumFunction | ExponentialFunction | AbsoluteFunction |
	//	NaturalLogarithmFunction | CommonLogarithmFunction;
	public ARTISTCommonGrammarAccess.NumberFunctionElements getNumberFunctionAccess() {
		return gaARTISTCommon.getNumberFunctionAccess();
	}
	
	public ParserRule getNumberFunctionRule() {
		return getNumberFunctionAccess().getRule();
	}

	//MaximumFunction:
	//	operator=MaxOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.MaximumFunctionElements getMaximumFunctionAccess() {
		return gaARTISTCommon.getMaximumFunctionAccess();
	}
	
	public ParserRule getMaximumFunctionRule() {
		return getMaximumFunctionAccess().getRule();
	}

	//MinimumFunction:
	//	operator=MinOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.MinimumFunctionElements getMinimumFunctionAccess() {
		return gaARTISTCommon.getMinimumFunctionAccess();
	}
	
	public ParserRule getMinimumFunctionRule() {
		return getMinimumFunctionAccess().getRule();
	}

	//AverageFunction:
	//	operator=AvgOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.AverageFunctionElements getAverageFunctionAccess() {
		return gaARTISTCommon.getAverageFunctionAccess();
	}
	
	public ParserRule getAverageFunctionRule() {
		return getAverageFunctionAccess().getRule();
	}

	//SumFunction:
	//	operator=SumOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.SumFunctionElements getSumFunctionAccess() {
		return gaARTISTCommon.getSumFunctionAccess();
	}
	
	public ParserRule getSumFunctionRule() {
		return getSumFunctionAccess().getRule();
	}

	//ExponentialFunction:
	//	operator=ExponentialOperator "(" base=NumberExpression "," exponent=NumberExpression ")";
	public ARTISTCommonGrammarAccess.ExponentialFunctionElements getExponentialFunctionAccess() {
		return gaARTISTCommon.getExponentialFunctionAccess();
	}
	
	public ParserRule getExponentialFunctionRule() {
		return getExponentialFunctionAccess().getRule();
	}

	//AbsoluteFunction:
	//	operator=AbsoluteOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.AbsoluteFunctionElements getAbsoluteFunctionAccess() {
		return gaARTISTCommon.getAbsoluteFunctionAccess();
	}
	
	public ParserRule getAbsoluteFunctionRule() {
		return getAbsoluteFunctionAccess().getRule();
	}

	//NaturalLogarithmFunction:
	//	operator=NaturalLogarithmOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.NaturalLogarithmFunctionElements getNaturalLogarithmFunctionAccess() {
		return gaARTISTCommon.getNaturalLogarithmFunctionAccess();
	}
	
	public ParserRule getNaturalLogarithmFunctionRule() {
		return getNaturalLogarithmFunctionAccess().getRule();
	}

	//CommonLogarithmFunction:
	//	operator=CommonLogarithmOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.CommonLogarithmFunctionElements getCommonLogarithmFunctionAccess() {
		return gaARTISTCommon.getCommonLogarithmFunctionAccess();
	}
	
	public ParserRule getCommonLogarithmFunctionRule() {
		return getCommonLogarithmFunctionAccess().getRule();
	}

	//ParenthesizedExpression:
	//	LeftParenthesis value=Expression RightParenthesis;
	public ARTISTCommonGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaARTISTCommon.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//ValueSpecification:
	//	LiteralValueExpression | InstanceSpecificationExpression | ObjectSpecificationExpression;
	public ARTISTCommonGrammarAccess.ValueSpecificationElements getValueSpecificationAccess() {
		return gaARTISTCommon.getValueSpecificationAccess();
	}
	
	public ParserRule getValueSpecificationRule() {
		return getValueSpecificationAccess().getRule();
	}

	//ObjectSpecificationExpression:
	//	type=[uml::DataType|QualifiedName] (value=Collection | value=Tuple);
	public ARTISTCommonGrammarAccess.ObjectSpecificationExpressionElements getObjectSpecificationExpressionAccess() {
		return gaARTISTCommon.getObjectSpecificationExpressionAccess();
	}
	
	public ParserRule getObjectSpecificationExpressionRule() {
		return getObjectSpecificationExpressionAccess().getRule();
	}

	//Collection:
	//	{Collection} "[" (values+=ValueSpecification ("," values+=ValueSpecification)*)? "]";
	public ARTISTCommonGrammarAccess.CollectionElements getCollectionAccess() {
		return gaARTISTCommon.getCollectionAccess();
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}

	//Tuple:
	//	{Tuple} "{" (tuples+=PropertyValuePair ("," tuples+=PropertyValuePair)*)? "}";
	public ARTISTCommonGrammarAccess.TupleElements getTupleAccess() {
		return gaARTISTCommon.getTupleAccess();
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}

	//PropertyValuePair:
	//	property=[uml::Property|QualifiedName] "=" value=ValueSpecification;
	public ARTISTCommonGrammarAccess.PropertyValuePairElements getPropertyValuePairAccess() {
		return gaARTISTCommon.getPropertyValuePairAccess();
	}
	
	public ParserRule getPropertyValuePairRule() {
		return getPropertyValuePairAccess().getRule();
	}

	//InstanceSpecificationExpression:
	//	value=[uml::InstanceSpecification|QualifiedName];
	public ARTISTCommonGrammarAccess.InstanceSpecificationExpressionElements getInstanceSpecificationExpressionAccess() {
		return gaARTISTCommon.getInstanceSpecificationExpressionAccess();
	}
	
	public ParserRule getInstanceSpecificationExpressionRule() {
		return getInstanceSpecificationExpressionAccess().getRule();
	}

	//LiteralValueExpression:
	//	NumberLiteral | BooleanLiteral | NullLiteral | StringLiteral | UnlimitedLiteral;
	public ARTISTCommonGrammarAccess.LiteralValueExpressionElements getLiteralValueExpressionAccess() {
		return gaARTISTCommon.getLiteralValueExpressionAccess();
	}
	
	public ParserRule getLiteralValueExpressionRule() {
		return getLiteralValueExpressionAccess().getRule();
	}

	//BooleanLiteral:
	//	value=EBOOLEAN;
	public ARTISTCommonGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaARTISTCommon.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NumberLiteral:
	//	value=Number;
	public ARTISTCommonGrammarAccess.NumberLiteralElements getNumberLiteralAccess() {
		return gaARTISTCommon.getNumberLiteralAccess();
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//NullLiteral:
	//	value=NULL;
	public ARTISTCommonGrammarAccess.NullLiteralElements getNullLiteralAccess() {
		return gaARTISTCommon.getNullLiteralAccess();
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public ARTISTCommonGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaARTISTCommon.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//UnlimitedLiteral:
	//	value="*";
	public ARTISTCommonGrammarAccess.UnlimitedLiteralElements getUnlimitedLiteralAccess() {
		return gaARTISTCommon.getUnlimitedLiteralAccess();
	}
	
	public ParserRule getUnlimitedLiteralRule() {
		return getUnlimitedLiteralAccess().getRule();
	}

	//OrOperator returns Operator:
	//	{OrOperator} ("or" | "||");
	public ARTISTCommonGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaARTISTCommon.getOrOperatorAccess();
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//XOrOperator returns Operator:
	//	{XOrOperator} ("xor" | "^");
	public ARTISTCommonGrammarAccess.XOrOperatorElements getXOrOperatorAccess() {
		return gaARTISTCommon.getXOrOperatorAccess();
	}
	
	public ParserRule getXOrOperatorRule() {
		return getXOrOperatorAccess().getRule();
	}

	//AndOperator returns Operator:
	//	{AndOperator} ("and" | "&&");
	public ARTISTCommonGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaARTISTCommon.getAndOperatorAccess();
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//ImplicationOperator returns Operator:
	//	{ImplicationOperator} ("=>" | "->");
	public ARTISTCommonGrammarAccess.ImplicationOperatorElements getImplicationOperatorAccess() {
		return gaARTISTCommon.getImplicationOperatorAccess();
	}
	
	public ParserRule getImplicationOperatorRule() {
		return getImplicationOperatorAccess().getRule();
	}

	//EqualsOperator returns Operator:
	//	{EqualsOperator} "==";
	public ARTISTCommonGrammarAccess.EqualsOperatorElements getEqualsOperatorAccess() {
		return gaARTISTCommon.getEqualsOperatorAccess();
	}
	
	public ParserRule getEqualsOperatorRule() {
		return getEqualsOperatorAccess().getRule();
	}

	//NotEqualsOperator returns Operator:
	//	{NotEqualsOperator} ("!=" | "<>");
	public ARTISTCommonGrammarAccess.NotEqualsOperatorElements getNotEqualsOperatorAccess() {
		return gaARTISTCommon.getNotEqualsOperatorAccess();
	}
	
	public ParserRule getNotEqualsOperatorRule() {
		return getNotEqualsOperatorAccess().getRule();
	}

	//NotOperator returns Operator:
	//	{NotOperator} ("!" | "not");
	public ARTISTCommonGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaARTISTCommon.getNotOperatorAccess();
	}
	
	public ParserRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//GreaterThanOperator returns Operator:
	//	{GreaterThanOperator} ">";
	public ARTISTCommonGrammarAccess.GreaterThanOperatorElements getGreaterThanOperatorAccess() {
		return gaARTISTCommon.getGreaterThanOperatorAccess();
	}
	
	public ParserRule getGreaterThanOperatorRule() {
		return getGreaterThanOperatorAccess().getRule();
	}

	//GreaterOrEqualThanOperator returns Operator:
	//	{GreaterOrEqualThanOperator} ">=";
	public ARTISTCommonGrammarAccess.GreaterOrEqualThanOperatorElements getGreaterOrEqualThanOperatorAccess() {
		return gaARTISTCommon.getGreaterOrEqualThanOperatorAccess();
	}
	
	public ParserRule getGreaterOrEqualThanOperatorRule() {
		return getGreaterOrEqualThanOperatorAccess().getRule();
	}

	//LessThanOperator returns Operator:
	//	{LessThanOperator} "<";
	public ARTISTCommonGrammarAccess.LessThanOperatorElements getLessThanOperatorAccess() {
		return gaARTISTCommon.getLessThanOperatorAccess();
	}
	
	public ParserRule getLessThanOperatorRule() {
		return getLessThanOperatorAccess().getRule();
	}

	//LessOrEqualThanOperator returns Operator:
	//	{LessOrEqualThanOperator} "<=";
	public ARTISTCommonGrammarAccess.LessOrEqualThanOperatorElements getLessOrEqualThanOperatorAccess() {
		return gaARTISTCommon.getLessOrEqualThanOperatorAccess();
	}
	
	public ParserRule getLessOrEqualThanOperatorRule() {
		return getLessOrEqualThanOperatorAccess().getRule();
	}

	//AdditionOperator returns Operator:
	//	{AdditionOperator} "+";
	public ARTISTCommonGrammarAccess.AdditionOperatorElements getAdditionOperatorAccess() {
		return gaARTISTCommon.getAdditionOperatorAccess();
	}
	
	public ParserRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}

	//SubstractionOperator returns Operator:
	//	{SubstractionOperator} "-";
	public ARTISTCommonGrammarAccess.SubstractionOperatorElements getSubstractionOperatorAccess() {
		return gaARTISTCommon.getSubstractionOperatorAccess();
	}
	
	public ParserRule getSubstractionOperatorRule() {
		return getSubstractionOperatorAccess().getRule();
	}

	//MultiplicationOperator returns Operator:
	//	{MultiplicationOperator} "*";
	public ARTISTCommonGrammarAccess.MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return gaARTISTCommon.getMultiplicationOperatorAccess();
	}
	
	public ParserRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}

	//DivisionOperator returns Operator:
	//	{DivisionOperator} "/";
	public ARTISTCommonGrammarAccess.DivisionOperatorElements getDivisionOperatorAccess() {
		return gaARTISTCommon.getDivisionOperatorAccess();
	}
	
	public ParserRule getDivisionOperatorRule() {
		return getDivisionOperatorAccess().getRule();
	}

	//ModulusOperator returns Operator:
	//	{ModulusOperator} "%";
	public ARTISTCommonGrammarAccess.ModulusOperatorElements getModulusOperatorAccess() {
		return gaARTISTCommon.getModulusOperatorAccess();
	}
	
	public ParserRule getModulusOperatorRule() {
		return getModulusOperatorAccess().getRule();
	}

	//MaxOperator returns Operator:
	//	{MaxOperator} "max";
	public ARTISTCommonGrammarAccess.MaxOperatorElements getMaxOperatorAccess() {
		return gaARTISTCommon.getMaxOperatorAccess();
	}
	
	public ParserRule getMaxOperatorRule() {
		return getMaxOperatorAccess().getRule();
	}

	//MinOperator returns Operator:
	//	{MinOperator} "min";
	public ARTISTCommonGrammarAccess.MinOperatorElements getMinOperatorAccess() {
		return gaARTISTCommon.getMinOperatorAccess();
	}
	
	public ParserRule getMinOperatorRule() {
		return getMinOperatorAccess().getRule();
	}

	//AvgOperator returns Operator:
	//	{AvgOperator} "avg";
	public ARTISTCommonGrammarAccess.AvgOperatorElements getAvgOperatorAccess() {
		return gaARTISTCommon.getAvgOperatorAccess();
	}
	
	public ParserRule getAvgOperatorRule() {
		return getAvgOperatorAccess().getRule();
	}

	//SumOperator returns Operator:
	//	{SumOperator} "sum";
	public ARTISTCommonGrammarAccess.SumOperatorElements getSumOperatorAccess() {
		return gaARTISTCommon.getSumOperatorAccess();
	}
	
	public ParserRule getSumOperatorRule() {
		return getSumOperatorAccess().getRule();
	}

	//ExponentialOperator returns Operator:
	//	{ExponentialOperator} "exp";
	public ARTISTCommonGrammarAccess.ExponentialOperatorElements getExponentialOperatorAccess() {
		return gaARTISTCommon.getExponentialOperatorAccess();
	}
	
	public ParserRule getExponentialOperatorRule() {
		return getExponentialOperatorAccess().getRule();
	}

	//AbsoluteOperator returns Operator:
	//	{AbsoluteOperator} "abs";
	public ARTISTCommonGrammarAccess.AbsoluteOperatorElements getAbsoluteOperatorAccess() {
		return gaARTISTCommon.getAbsoluteOperatorAccess();
	}
	
	public ParserRule getAbsoluteOperatorRule() {
		return getAbsoluteOperatorAccess().getRule();
	}

	//NaturalLogarithmOperator returns Operator:
	//	{NaturalLogarithmOperator} "ln";
	public ARTISTCommonGrammarAccess.NaturalLogarithmOperatorElements getNaturalLogarithmOperatorAccess() {
		return gaARTISTCommon.getNaturalLogarithmOperatorAccess();
	}
	
	public ParserRule getNaturalLogarithmOperatorRule() {
		return getNaturalLogarithmOperatorAccess().getRule();
	}

	//CommonLogarithmOperator returns Operator:
	//	{CommonLogarithmOperator} "log";
	public ARTISTCommonGrammarAccess.CommonLogarithmOperatorElements getCommonLogarithmOperatorAccess() {
		return gaARTISTCommon.getCommonLogarithmOperatorAccess();
	}
	
	public ParserRule getCommonLogarithmOperatorRule() {
		return getCommonLogarithmOperatorAccess().getRule();
	}

	//LeftParenthesis:
	//	"(";
	public ARTISTCommonGrammarAccess.LeftParenthesisElements getLeftParenthesisAccess() {
		return gaARTISTCommon.getLeftParenthesisAccess();
	}
	
	public ParserRule getLeftParenthesisRule() {
		return getLeftParenthesisAccess().getRule();
	}

	//RightParenthesis:
	//	")";
	public ARTISTCommonGrammarAccess.RightParenthesisElements getRightParenthesisAccess() {
		return gaARTISTCommon.getRightParenthesisAccess();
	}
	
	public ParserRule getRightParenthesisRule() {
		return getRightParenthesisAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public ARTISTCommonGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaARTISTCommon.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Workload:
	//	name=ID "{" "activity" activity=[uml::Activity|QualifiedName] "," "pattern" pattern=STRING "}";
	public ARTISTCommonGrammarAccess.WorkloadElements getWorkloadAccess() {
		return gaARTISTCommon.getWorkloadAccess();
	}
	
	public ParserRule getWorkloadRule() {
		return getWorkloadAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public ARTISTCommonGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaARTISTCommon.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ImportURIorNamespace:
	//	"import" (importURI=STRING | importedNamespace=QualifiedNameWithWildcard);
	public ARTISTCommonGrammarAccess.ImportURIorNamespaceElements getImportURIorNamespaceAccess() {
		return gaARTISTCommon.getImportURIorNamespaceAccess();
	}
	
	public ParserRule getImportURIorNamespaceRule() {
		return getImportURIorNamespaceAccess().getRule();
	}

	//ImportURI:
	//	"import" importURI=STRING;
	public ARTISTCommonGrammarAccess.ImportURIElements getImportURIAccess() {
		return gaARTISTCommon.getImportURIAccess();
	}
	
	public ParserRule getImportURIRule() {
		return getImportURIAccess().getRule();
	}

	//ImportNamespace:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ARTISTCommonGrammarAccess.ImportNamespaceElements getImportNamespaceAccess() {
		return gaARTISTCommon.getImportNamespaceAccess();
	}
	
	public ParserRule getImportNamespaceRule() {
		return getImportNamespaceAccess().getRule();
	}

	//Number returns ecore::EBigDecimal:
	//	INT | POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL | EBIGDECIMAL;
	public ARTISTCommonGrammarAccess.NumberElements getNumberAccess() {
		return gaARTISTCommon.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Impact returns ecore::EBigDecimal:
	//	POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL;
	public ARTISTCommonGrammarAccess.ImpactElements getImpactAccess() {
		return gaARTISTCommon.getImpactAccess();
	}
	
	public ParserRule getImpactRule() {
		return getImpactAccess().getRule();
	}

	//EBooleanObject returns ecore::EBooleanObject:
	//	NULL | EBOOLEAN;
	public ARTISTCommonGrammarAccess.EBooleanObjectElements getEBooleanObjectAccess() {
		return gaARTISTCommon.getEBooleanObjectAccess();
	}
	
	public ParserRule getEBooleanObjectRule() {
		return getEBooleanObjectAccess().getRule();
	}

	//terminal EBOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getEBOOLEANRule() {
		return gaARTISTCommon.getEBOOLEANRule();
	} 

	//terminal NULL:
	//	"null";
	public TerminalRule getNULLRule() {
		return gaARTISTCommon.getNULLRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaARTISTCommon.getINTRule();
	} 

	//terminal POSITIVE_SMALL_DECIMAL returns ecore::EBigDecimal:
	//	"1" ("." "0"+)? | "0" ("." "0".."9"+)? | "." "0".."9"+;
	public TerminalRule getPOSITIVE_SMALL_DECIMALRule() {
		return gaARTISTCommon.getPOSITIVE_SMALL_DECIMALRule();
	} 

	//terminal SMALL_DECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? POSITIVE_SMALL_DECIMAL;
	public TerminalRule getSMALL_DECIMALRule() {
		return gaARTISTCommon.getSMALL_DECIMALRule();
	} 

	//terminal EBIGDECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? (INT | "." INT | INT "." INT);
	public TerminalRule getEBIGDECIMALRule() {
		return gaARTISTCommon.getEBIGDECIMALRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "Â§") ("a".."z" | "A".."Z" |
	//	"_" | "0".."9" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "Â§")*;
	public TerminalRule getIDRule() {
		return gaARTISTCommon.getIDRule();
	} 

	//terminal DATE_TIME returns ecore::EDate: // time zone not working: (('+'|'-') INT ((':' INT) | INT)?)?
	//	INT "-" INT "-" INT ("T" INT ":" INT (":" INT ("." INT)?)?)?;
	public TerminalRule getDATE_TIMERule() {
		return gaARTISTCommon.getDATE_TIMERule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaARTISTCommon.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaARTISTCommon.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaARTISTCommon.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaARTISTCommon.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaARTISTCommon.getANY_OTHERRule();
	} 
}
