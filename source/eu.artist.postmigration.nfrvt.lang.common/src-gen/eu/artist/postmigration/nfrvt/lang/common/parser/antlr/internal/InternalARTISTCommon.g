/*
* generated by Xtext
*/
grammar InternalARTISTCommon;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eu.artist.postmigration.nfrvt.lang.common.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.artist.postmigration.nfrvt.lang.common.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.artist.postmigration.nfrvt.lang.common.services.ARTISTCommonGrammarAccess;

}

@parser::members {

 	private ARTISTCommonGrammarAccess grammarAccess;
 	
    public InternalARTISTCommonParser(TokenStream input, ARTISTCommonGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Expression";	
   	}
   	
   	@Override
   	protected ARTISTCommonGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getImplicationParserRuleCall()); 
    }
    this_Implication_0=ruleImplication
    { 
        $current = $this_Implication_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleImplication
entryRuleImplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicationRule()); }
	 iv_ruleImplication=ruleImplication 
	 { $current=$iv_ruleImplication.current; } 
	 EOF 
;

// Rule Implication
ruleImplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0()); 
    }
    this_Disjunction_0=ruleDisjunction
    { 
        $current = $this_Disjunction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImplicationAccess().getImplicationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImplicationAccess().getOperatorImplicationOperatorParserRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleImplicationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplicationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ImplicationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImplicationAccess().getRightDisjunctionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleDisjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Disjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDisjunction
entryRuleDisjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDisjunctionRule()); }
	 iv_ruleDisjunction=ruleDisjunction 
	 { $current=$iv_ruleDisjunction.current; } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); 
    }
    this_Conjunction_0=ruleConjunction
    { 
        $current = $this_Conjunction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_1_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getDisjunctionAccess().getOperatorOrOperatorParserRuleCall_1_1_0_0()); 
	    }
		lv_operator_2_1=ruleOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisjunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_1, 
        		"OrOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getDisjunctionAccess().getOperatorXOrOperatorParserRuleCall_1_1_0_1()); 
	    }
		lv_operator_2_2=ruleXOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisjunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_2, 
        		"XOrOperator");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDisjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisjunctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Conjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConjunction
entryRuleConjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); }
	 iv_ruleConjunction=ruleConjunction 
	 { $current=$iv_ruleConjunction.current; } 
	 EOF 
;

// Rule Conjunction
ruleConjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConjunctionAccess().getComparisonParserRuleCall_0()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConjunctionAccess().getConjunctionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getOperatorAndOperatorParserRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getRightComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getBooleanUnitParserRuleCall_0()); 
    }
    this_BooleanUnit_0=ruleBooleanUnit
    { 
        $current = $this_BooleanUnit_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getOperatorEqualsOperatorParserRuleCall_1_1_0_0()); 
	    }
		lv_operator_2_1=ruleEqualsOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_1, 
        		"EqualsOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getOperatorNotEqualsOperatorParserRuleCall_1_1_0_1()); 
	    }
		lv_operator_2_2=ruleNotEqualsOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_2, 
        		"NotEqualsOperator");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightBooleanUnitParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBooleanUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BooleanUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBooleanUnit
entryRuleBooleanUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanUnitRule()); }
	 iv_ruleBooleanUnit=ruleBooleanUnit 
	 { $current=$iv_ruleBooleanUnit.current; } 
	 EOF 
;

// Rule BooleanUnit
ruleBooleanUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBooleanUnitAccess().getNegationParserRuleCall_0()); 
    }
    this_Negation_0=ruleNegation
    { 
        $current = $this_Negation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBooleanUnitAccess().getRelationalExpressionParserRuleCall_1()); 
    }
    this_RelationalExpression_1=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBooleanUnitAccess().getBooleanLiteralParserRuleCall_2()); 
    }
    this_BooleanLiteral_2=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	 iv_ruleNegation=ruleNegation 
	 { $current=$iv_ruleNegation.current; } 
	 EOF 
;

// Rule Negation
ruleNegation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNegationAccess().getOperatorNotOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleNotOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"NotOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegationAccess().getValueBooleanUnitParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleBooleanUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"BooleanUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getComparableExpressionParserRuleCall_0()); 
    }
    this_ComparableExpression_0=ruleComparableExpression
    { 
        $current = $this_ComparableExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanOperatorParserRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleGreaterThanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"GreaterThanOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterOrEqualThanOperatorParserRuleCall_1_0_1_1_0()); 
	    }
		lv_operator_4_0=ruleGreaterOrEqualThanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_4_0, 
        		"GreaterOrEqualThanOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorLessOrEqualThanOperatorParserRuleCall_1_0_2_1_0()); 
	    }
		lv_operator_6_0=ruleLessOrEqualThanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_6_0, 
        		"LessOrEqualThanOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanOperatorParserRuleCall_1_0_3_1_0()); 
	    }
		lv_operator_8_0=ruleLessThanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_8_0, 
        		"LessThanOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightComparableExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_9_0=ruleComparableExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_9_0, 
        		"ComparableExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparableExpression
entryRuleComparableExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparableExpressionRule()); }
	 iv_ruleComparableExpression=ruleComparableExpression 
	 { $current=$iv_ruleComparableExpression.current; } 
	 EOF 
;

// Rule ComparableExpression
ruleComparableExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparableExpressionAccess().getArithmeticExpressionParserRuleCall_0()); 
    }
    this_ArithmeticExpression_0=ruleArithmeticExpression
    { 
        $current = $this_ArithmeticExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComparableExpressionAccess().getInstanceSpecificationExpressionParserRuleCall_1()); 
    }
    this_InstanceSpecificationExpression_1=ruleInstanceSpecificationExpression
    { 
        $current = $this_InstanceSpecificationExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComparableExpressionAccess().getObjectSpecificationExpressionParserRuleCall_2()); 
    }
    this_ObjectSpecificationExpression_2=ruleObjectSpecificationExpression
    { 
        $current = $this_ObjectSpecificationExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComparableExpressionAccess().getNullLiteralParserRuleCall_3()); 
    }
    this_NullLiteral_3=ruleNullLiteral
    { 
        $current = $this_NullLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComparableExpressionAccess().getStringLiteralParserRuleCall_4()); 
    }
    this_StringLiteral_4=ruleStringLiteral
    { 
        $current = $this_StringLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComparableExpressionAccess().getUnlimitedLiteralParserRuleCall_5()); 
    }
    this_UnlimitedLiteral_5=ruleUnlimitedLiteral
    { 
        $current = $this_UnlimitedLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComparableExpressionAccess().getParenthesizedExpressionParserRuleCall_6()); 
    }
    this_ParenthesizedExpression_6=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	 iv_ruleArithmeticExpression=ruleArithmeticExpression 
	 { $current=$iv_ruleArithmeticExpression.current; } 
	 EOF 
;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getAdditiveExpressionParserRuleCall()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperatorSubstractionOperatorParserRuleCall_1_1_0_0()); 
	    }
		lv_operator_2_1=ruleSubstractionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_1, 
        		"SubstractionOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditionOperatorParserRuleCall_1_1_0_1()); 
	    }
		lv_operator_2_2=ruleAdditionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_2, 
        		"AdditionOperator");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getNumberExpressionParserRuleCall_0()); 
    }
    this_NumberExpression_0=ruleNumberExpression
    { 
        $current = $this_NumberExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicationOperatorParserRuleCall_1_1_0_0()); 
	    }
		lv_operator_2_1=ruleMultiplicationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_1, 
        		"MultiplicationOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperatorDivisionOperatorParserRuleCall_1_1_0_1()); 
	    }
		lv_operator_2_2=ruleDivisionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_2, 
        		"DivisionOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperatorModulusOperatorParserRuleCall_1_1_0_2()); 
	    }
		lv_operator_2_3=ruleModulusOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_3, 
        		"ModulusOperator");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightNumberExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumberExpression
entryRuleNumberExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberExpressionRule()); }
	 iv_ruleNumberExpression=ruleNumberExpression 
	 { $current=$iv_ruleNumberExpression.current; } 
	 EOF 
;

// Rule NumberExpression
ruleNumberExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberExpressionAccess().getNumberLiteralParserRuleCall_0()); 
    }
    this_NumberLiteral_0=ruleNumberLiteral
    { 
        $current = $this_NumberLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberExpressionAccess().getNumberFunctionParserRuleCall_1()); 
    }
    this_NumberFunction_1=ruleNumberFunction
    { 
        $current = $this_NumberFunction_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNumberFunction
entryRuleNumberFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberFunctionRule()); }
	 iv_ruleNumberFunction=ruleNumberFunction 
	 { $current=$iv_ruleNumberFunction.current; } 
	 EOF 
;

// Rule NumberFunction
ruleNumberFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberFunctionAccess().getMaximumFunctionParserRuleCall_0()); 
    }
    this_MaximumFunction_0=ruleMaximumFunction
    { 
        $current = $this_MaximumFunction_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberFunctionAccess().getMinimumFunctionParserRuleCall_1()); 
    }
    this_MinimumFunction_1=ruleMinimumFunction
    { 
        $current = $this_MinimumFunction_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberFunctionAccess().getAverageFunctionParserRuleCall_2()); 
    }
    this_AverageFunction_2=ruleAverageFunction
    { 
        $current = $this_AverageFunction_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberFunctionAccess().getSumFunctionParserRuleCall_3()); 
    }
    this_SumFunction_3=ruleSumFunction
    { 
        $current = $this_SumFunction_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberFunctionAccess().getExponentialFunctionParserRuleCall_4()); 
    }
    this_ExponentialFunction_4=ruleExponentialFunction
    { 
        $current = $this_ExponentialFunction_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberFunctionAccess().getAbsoluteFunctionParserRuleCall_5()); 
    }
    this_AbsoluteFunction_5=ruleAbsoluteFunction
    { 
        $current = $this_AbsoluteFunction_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberFunctionAccess().getNaturalLogarithmFunctionParserRuleCall_6()); 
    }
    this_NaturalLogarithmFunction_6=ruleNaturalLogarithmFunction
    { 
        $current = $this_NaturalLogarithmFunction_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberFunctionAccess().getCommonLogarithmFunctionParserRuleCall_7()); 
    }
    this_CommonLogarithmFunction_7=ruleCommonLogarithmFunction
    { 
        $current = $this_CommonLogarithmFunction_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMaximumFunction
entryRuleMaximumFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMaximumFunctionRule()); }
	 iv_ruleMaximumFunction=ruleMaximumFunction 
	 { $current=$iv_ruleMaximumFunction.current; } 
	 EOF 
;

// Rule MaximumFunction
ruleMaximumFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMaximumFunctionAccess().getOperatorMaxOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleMaxOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaximumFunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"MaxOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMaximumFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMaximumFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); 
	    }
		lv_values_2_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaximumFunctionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMaximumFunctionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMaximumFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); 
	    }
		lv_values_4_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaximumFunctionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMaximumFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleMinimumFunction
entryRuleMinimumFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMinimumFunctionRule()); }
	 iv_ruleMinimumFunction=ruleMinimumFunction 
	 { $current=$iv_ruleMinimumFunction.current; } 
	 EOF 
;

// Rule MinimumFunction
ruleMinimumFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMinimumFunctionAccess().getOperatorMinOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleMinOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinimumFunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"MinOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMinimumFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinimumFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); 
	    }
		lv_values_2_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinimumFunctionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMinimumFunctionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinimumFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); 
	    }
		lv_values_4_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinimumFunctionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMinimumFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleAverageFunction
entryRuleAverageFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAverageFunctionRule()); }
	 iv_ruleAverageFunction=ruleAverageFunction 
	 { $current=$iv_ruleAverageFunction.current; } 
	 EOF 
;

// Rule AverageFunction
ruleAverageFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAverageFunctionAccess().getOperatorAvgOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleAvgOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAverageFunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"AvgOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAverageFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAverageFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); 
	    }
		lv_values_2_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAverageFunctionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAverageFunctionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAverageFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); 
	    }
		lv_values_4_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAverageFunctionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAverageFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleSumFunction
entryRuleSumFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSumFunctionRule()); }
	 iv_ruleSumFunction=ruleSumFunction 
	 { $current=$iv_ruleSumFunction.current; } 
	 EOF 
;

// Rule SumFunction
ruleSumFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSumFunctionAccess().getOperatorSumOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleSumOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumFunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"SumOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSumFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSumFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); 
	    }
		lv_values_2_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumFunctionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSumFunctionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSumFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); 
	    }
		lv_values_4_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumFunctionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSumFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleExponentialFunction
entryRuleExponentialFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExponentialFunctionRule()); }
	 iv_ruleExponentialFunction=ruleExponentialFunction 
	 { $current=$iv_ruleExponentialFunction.current; } 
	 EOF 
;

// Rule ExponentialFunction
ruleExponentialFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExponentialFunctionAccess().getOperatorExponentialOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleExponentialOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExponentialFunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"ExponentialOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExponentialFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExponentialFunctionAccess().getBaseNumberExpressionParserRuleCall_2_0()); 
	    }
		lv_base_2_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExponentialFunctionRule());
	        }
       		set(
       			$current, 
       			"base",
        		lv_base_2_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExponentialFunctionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExponentialFunctionAccess().getExponentNumberExpressionParserRuleCall_4_0()); 
	    }
		lv_exponent_4_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExponentialFunctionRule());
	        }
       		set(
       			$current, 
       			"exponent",
        		lv_exponent_4_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExponentialFunctionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleAbsoluteFunction
entryRuleAbsoluteFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbsoluteFunctionRule()); }
	 iv_ruleAbsoluteFunction=ruleAbsoluteFunction 
	 { $current=$iv_ruleAbsoluteFunction.current; } 
	 EOF 
;

// Rule AbsoluteFunction
ruleAbsoluteFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbsoluteFunctionAccess().getOperatorAbsoluteOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleAbsoluteOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbsoluteFunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"AbsoluteOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbsoluteFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbsoluteFunctionAccess().getValueNumberExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbsoluteFunctionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAbsoluteFunctionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleNaturalLogarithmFunction
entryRuleNaturalLogarithmFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNaturalLogarithmFunctionRule()); }
	 iv_ruleNaturalLogarithmFunction=ruleNaturalLogarithmFunction 
	 { $current=$iv_ruleNaturalLogarithmFunction.current; } 
	 EOF 
;

// Rule NaturalLogarithmFunction
ruleNaturalLogarithmFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNaturalLogarithmFunctionAccess().getOperatorNaturalLogarithmOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleNaturalLogarithmOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNaturalLogarithmFunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"NaturalLogarithmOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNaturalLogarithmFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNaturalLogarithmFunctionAccess().getValueNumberExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNaturalLogarithmFunctionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNaturalLogarithmFunctionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCommonLogarithmFunction
entryRuleCommonLogarithmFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommonLogarithmFunctionRule()); }
	 iv_ruleCommonLogarithmFunction=ruleCommonLogarithmFunction 
	 { $current=$iv_ruleCommonLogarithmFunction.current; } 
	 EOF 
;

// Rule CommonLogarithmFunction
ruleCommonLogarithmFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCommonLogarithmFunctionAccess().getOperatorCommonLogarithmOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleCommonLogarithmOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommonLogarithmFunctionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"CommonLogarithmOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCommonLogarithmFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommonLogarithmFunctionAccess().getValueNumberExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommonLogarithmFunctionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCommonLogarithmFunctionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	 iv_ruleParenthesizedExpression=ruleParenthesizedExpression 
	 { $current=$iv_ruleParenthesizedExpression.current; } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisParserRuleCall_0()); 
    }
ruleLeftParenthesis
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getValueExpressionParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisParserRuleCall_2()); 
    }
ruleRightParenthesis
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValueSpecification
entryRuleValueSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueSpecificationRule()); }
	 iv_ruleValueSpecification=ruleValueSpecification 
	 { $current=$iv_ruleValueSpecification.current; } 
	 EOF 
;

// Rule ValueSpecification
ruleValueSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueSpecificationAccess().getLiteralValueExpressionParserRuleCall_0()); 
    }
    this_LiteralValueExpression_0=ruleLiteralValueExpression
    { 
        $current = $this_LiteralValueExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueSpecificationAccess().getInstanceSpecificationExpressionParserRuleCall_1()); 
    }
    this_InstanceSpecificationExpression_1=ruleInstanceSpecificationExpression
    { 
        $current = $this_InstanceSpecificationExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueSpecificationAccess().getObjectSpecificationExpressionParserRuleCall_2()); 
    }
    this_ObjectSpecificationExpression_2=ruleObjectSpecificationExpression
    { 
        $current = $this_ObjectSpecificationExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleObjectSpecificationExpression
entryRuleObjectSpecificationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectSpecificationExpressionRule()); }
	 iv_ruleObjectSpecificationExpression=ruleObjectSpecificationExpression 
	 { $current=$iv_ruleObjectSpecificationExpression.current; } 
	 EOF 
;

// Rule ObjectSpecificationExpression
ruleObjectSpecificationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectSpecificationExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getObjectSpecificationExpressionAccess().getTypeDataTypeCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getObjectSpecificationExpressionAccess().getValueCollectionParserRuleCall_1_0_0()); 
	    }
		lv_value_1_0=ruleCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectSpecificationExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Collection");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectSpecificationExpressionAccess().getValueTupleParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectSpecificationExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleCollection
entryRuleCollection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionRule()); }
	 iv_ruleCollection=ruleCollection 
	 { $current=$iv_ruleCollection.current; } 
	 EOF 
;

// Rule Collection
ruleCollection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCollectionAccess().getCollectionAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCollectionAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionAccess().getValuesValueSpecificationParserRuleCall_2_0_0()); 
	    }
		lv_values_2_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"ValueSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionAccess().getValuesValueSpecificationParserRuleCall_2_1_1_0()); 
	    }
		lv_values_4_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"ValueSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCollectionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTuple
entryRuleTuple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleRule()); }
	 iv_ruleTuple=ruleTuple 
	 { $current=$iv_ruleTuple.current; } 
	 EOF 
;

// Rule Tuple
ruleTuple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTupleAccess().getTupleAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getTuplesPropertyValuePairParserRuleCall_2_0_0()); 
	    }
		lv_tuples_2_0=rulePropertyValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"tuples",
        		lv_tuples_2_0, 
        		"PropertyValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTupleAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getTuplesPropertyValuePairParserRuleCall_2_1_1_0()); 
	    }
		lv_tuples_4_0=rulePropertyValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"tuples",
        		lv_tuples_4_0, 
        		"PropertyValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTupleAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRulePropertyValuePair
entryRulePropertyValuePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyValuePairRule()); }
	 iv_rulePropertyValuePair=rulePropertyValuePair 
	 { $current=$iv_rulePropertyValuePair.current; } 
	 EOF 
;

// Rule PropertyValuePair
rulePropertyValuePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyValuePairRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPropertyValuePairAccess().getPropertyPropertyCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyValuePairAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyValuePairAccess().getValueValueSpecificationParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyValuePairRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ValueSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInstanceSpecificationExpression
entryRuleInstanceSpecificationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceSpecificationExpressionRule()); }
	 iv_ruleInstanceSpecificationExpression=ruleInstanceSpecificationExpression 
	 { $current=$iv_ruleInstanceSpecificationExpression.current; } 
	 EOF 
;

// Rule InstanceSpecificationExpression
ruleInstanceSpecificationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceSpecificationExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInstanceSpecificationExpressionAccess().getValueInstanceSpecificationCrossReference_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleLiteralValueExpression
entryRuleLiteralValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralValueExpressionRule()); }
	 iv_ruleLiteralValueExpression=ruleLiteralValueExpression 
	 { $current=$iv_ruleLiteralValueExpression.current; } 
	 EOF 
;

// Rule LiteralValueExpression
ruleLiteralValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralValueExpressionAccess().getNumberLiteralParserRuleCall_0()); 
    }
    this_NumberLiteral_0=ruleNumberLiteral
    { 
        $current = $this_NumberLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralValueExpressionAccess().getBooleanLiteralParserRuleCall_1()); 
    }
    this_BooleanLiteral_1=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralValueExpressionAccess().getNullLiteralParserRuleCall_2()); 
    }
    this_NullLiteral_2=ruleNullLiteral
    { 
        $current = $this_NullLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralValueExpressionAccess().getStringLiteralParserRuleCall_3()); 
    }
    this_StringLiteral_3=ruleStringLiteral
    { 
        $current = $this_StringLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralValueExpressionAccess().getUnlimitedLiteralParserRuleCall_4()); 
    }
    this_UnlimitedLiteral_4=ruleUnlimitedLiteral
    { 
        $current = $this_UnlimitedLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_EBOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralAccess().getValueEBOOLEANTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EBOOLEAN");
	    }

)
)
;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current; } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_NULL
		{
			newLeafNode(lv_value_0_0, grammarAccess.getNullLiteralAccess().getValueNULLTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NULL");
	    }

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleUnlimitedLiteral
entryRuleUnlimitedLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnlimitedLiteralRule()); }
	 iv_ruleUnlimitedLiteral=ruleUnlimitedLiteral 
	 { $current=$iv_ruleUnlimitedLiteral.current; } 
	 EOF 
;

// Rule UnlimitedLiteral
ruleUnlimitedLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=	'*' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getUnlimitedLiteralAccess().getValueAsteriskKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnlimitedLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "*");
	    }

)
)
;





// Entry rule entryRuleOrOperator
entryRuleOrOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrOperatorRule()); }
	 iv_ruleOrOperator=ruleOrOperator 
	 { $current=$iv_ruleOrOperator.current; } 
	 EOF 
;

// Rule OrOperator
ruleOrOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOrOperatorAccess().getOrOperatorAction_0(),
            $current);
    }
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrOperatorAccess().getOrKeyword_1_0());
    }

    |	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrOperatorAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
))
;





// Entry rule entryRuleXOrOperator
entryRuleXOrOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXOrOperatorRule()); }
	 iv_ruleXOrOperator=ruleXOrOperator 
	 { $current=$iv_ruleXOrOperator.current; } 
	 EOF 
;

// Rule XOrOperator
ruleXOrOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXOrOperatorAccess().getXOrOperatorAction_0(),
            $current);
    }
)(	otherlv_1='xor' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXOrOperatorAccess().getXorKeyword_1_0());
    }

    |	otherlv_2='^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXOrOperatorAccess().getCircumflexAccentKeyword_1_1());
    }
))
;





// Entry rule entryRuleAndOperator
entryRuleAndOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndOperatorRule()); }
	 iv_ruleAndOperator=ruleAndOperator 
	 { $current=$iv_ruleAndOperator.current; } 
	 EOF 
;

// Rule AndOperator
ruleAndOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAndOperatorAccess().getAndOperatorAction_0(),
            $current);
    }
)(	otherlv_1='and' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAndOperatorAccess().getAndKeyword_1_0());
    }

    |	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndOperatorAccess().getAmpersandAmpersandKeyword_1_1());
    }
))
;





// Entry rule entryRuleImplicationOperator
entryRuleImplicationOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicationOperatorRule()); }
	 iv_ruleImplicationOperator=ruleImplicationOperator 
	 { $current=$iv_ruleImplicationOperator.current; } 
	 EOF 
;

// Rule ImplicationOperator
ruleImplicationOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getImplicationOperatorAccess().getImplicationOperatorAction_0(),
            $current);
    }
)(	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImplicationOperatorAccess().getEqualsSignGreaterThanSignKeyword_1_0());
    }

    |	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImplicationOperatorAccess().getHyphenMinusGreaterThanSignKeyword_1_1());
    }
))
;





// Entry rule entryRuleEqualsOperator
entryRuleEqualsOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualsOperatorRule()); }
	 iv_ruleEqualsOperator=ruleEqualsOperator 
	 { $current=$iv_ruleEqualsOperator.current; } 
	 EOF 
;

// Rule EqualsOperator
ruleEqualsOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEqualsOperatorAccess().getEqualsOperatorAction_0(),
            $current);
    }
)	otherlv_1='==' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEqualsOperatorAccess().getEqualsSignEqualsSignKeyword_1());
    }
)
;





// Entry rule entryRuleNotEqualsOperator
entryRuleNotEqualsOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotEqualsOperatorRule()); }
	 iv_ruleNotEqualsOperator=ruleNotEqualsOperator 
	 { $current=$iv_ruleNotEqualsOperator.current; } 
	 EOF 
;

// Rule NotEqualsOperator
ruleNotEqualsOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotEqualsOperatorAccess().getNotEqualsOperatorAction_0(),
            $current);
    }
)(	otherlv_1='!=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotEqualsOperatorAccess().getExclamationMarkEqualsSignKeyword_1_0());
    }

    |	otherlv_2='<>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNotEqualsOperatorAccess().getLessThanSignGreaterThanSignKeyword_1_1());
    }
))
;





// Entry rule entryRuleNotOperator
entryRuleNotOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotOperatorRule()); }
	 iv_ruleNotOperator=ruleNotOperator 
	 { $current=$iv_ruleNotOperator.current; } 
	 EOF 
;

// Rule NotOperator
ruleNotOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotOperatorAccess().getNotOperatorAction_0(),
            $current);
    }
)(	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotOperatorAccess().getExclamationMarkKeyword_1_0());
    }

    |	otherlv_2='not' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNotOperatorAccess().getNotKeyword_1_1());
    }
))
;





// Entry rule entryRuleGreaterThanOperator
entryRuleGreaterThanOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreaterThanOperatorRule()); }
	 iv_ruleGreaterThanOperator=ruleGreaterThanOperator 
	 { $current=$iv_ruleGreaterThanOperator.current; } 
	 EOF 
;

// Rule GreaterThanOperator
ruleGreaterThanOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGreaterThanOperatorAccess().getGreaterThanOperatorAction_0(),
            $current);
    }
)	otherlv_1='>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGreaterThanOperatorAccess().getGreaterThanSignKeyword_1());
    }
)
;





// Entry rule entryRuleGreaterOrEqualThanOperator
entryRuleGreaterOrEqualThanOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreaterOrEqualThanOperatorRule()); }
	 iv_ruleGreaterOrEqualThanOperator=ruleGreaterOrEqualThanOperator 
	 { $current=$iv_ruleGreaterOrEqualThanOperator.current; } 
	 EOF 
;

// Rule GreaterOrEqualThanOperator
ruleGreaterOrEqualThanOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGreaterOrEqualThanOperatorAccess().getGreaterOrEqualThanOperatorAction_0(),
            $current);
    }
)	otherlv_1='>=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGreaterOrEqualThanOperatorAccess().getGreaterThanSignEqualsSignKeyword_1());
    }
)
;





// Entry rule entryRuleLessThanOperator
entryRuleLessThanOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLessThanOperatorRule()); }
	 iv_ruleLessThanOperator=ruleLessThanOperator 
	 { $current=$iv_ruleLessThanOperator.current; } 
	 EOF 
;

// Rule LessThanOperator
ruleLessThanOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLessThanOperatorAccess().getLessThanOperatorAction_0(),
            $current);
    }
)	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLessThanOperatorAccess().getLessThanSignKeyword_1());
    }
)
;





// Entry rule entryRuleLessOrEqualThanOperator
entryRuleLessOrEqualThanOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLessOrEqualThanOperatorRule()); }
	 iv_ruleLessOrEqualThanOperator=ruleLessOrEqualThanOperator 
	 { $current=$iv_ruleLessOrEqualThanOperator.current; } 
	 EOF 
;

// Rule LessOrEqualThanOperator
ruleLessOrEqualThanOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLessOrEqualThanOperatorAccess().getLessOrEqualThanOperatorAction_0(),
            $current);
    }
)	otherlv_1='<=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLessOrEqualThanOperatorAccess().getLessThanSignEqualsSignKeyword_1());
    }
)
;





// Entry rule entryRuleAdditionOperator
entryRuleAdditionOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionOperatorRule()); }
	 iv_ruleAdditionOperator=ruleAdditionOperator 
	 { $current=$iv_ruleAdditionOperator.current; } 
	 EOF 
;

// Rule AdditionOperator
ruleAdditionOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAdditionOperatorAccess().getAdditionOperatorAction_0(),
            $current);
    }
)	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdditionOperatorAccess().getPlusSignKeyword_1());
    }
)
;





// Entry rule entryRuleSubstractionOperator
entryRuleSubstractionOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubstractionOperatorRule()); }
	 iv_ruleSubstractionOperator=ruleSubstractionOperator 
	 { $current=$iv_ruleSubstractionOperator.current; } 
	 EOF 
;

// Rule SubstractionOperator
ruleSubstractionOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubstractionOperatorAccess().getSubstractionOperatorAction_0(),
            $current);
    }
)	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubstractionOperatorAccess().getHyphenMinusKeyword_1());
    }
)
;





// Entry rule entryRuleMultiplicationOperator
entryRuleMultiplicationOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationOperatorRule()); }
	 iv_ruleMultiplicationOperator=ruleMultiplicationOperator 
	 { $current=$iv_ruleMultiplicationOperator.current; } 
	 EOF 
;

// Rule MultiplicationOperator
ruleMultiplicationOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMultiplicationOperatorAccess().getMultiplicationOperatorAction_0(),
            $current);
    }
)	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultiplicationOperatorAccess().getAsteriskKeyword_1());
    }
)
;





// Entry rule entryRuleDivisionOperator
entryRuleDivisionOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivisionOperatorRule()); }
	 iv_ruleDivisionOperator=ruleDivisionOperator 
	 { $current=$iv_ruleDivisionOperator.current; } 
	 EOF 
;

// Rule DivisionOperator
ruleDivisionOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDivisionOperatorAccess().getDivisionOperatorAction_0(),
            $current);
    }
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDivisionOperatorAccess().getSolidusKeyword_1());
    }
)
;





// Entry rule entryRuleModulusOperator
entryRuleModulusOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModulusOperatorRule()); }
	 iv_ruleModulusOperator=ruleModulusOperator 
	 { $current=$iv_ruleModulusOperator.current; } 
	 EOF 
;

// Rule ModulusOperator
ruleModulusOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModulusOperatorAccess().getModulusOperatorAction_0(),
            $current);
    }
)	otherlv_1='%' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModulusOperatorAccess().getPercentSignKeyword_1());
    }
)
;





// Entry rule entryRuleMaxOperator
entryRuleMaxOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMaxOperatorRule()); }
	 iv_ruleMaxOperator=ruleMaxOperator 
	 { $current=$iv_ruleMaxOperator.current; } 
	 EOF 
;

// Rule MaxOperator
ruleMaxOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMaxOperatorAccess().getMaxOperatorAction_0(),
            $current);
    }
)	otherlv_1='max' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMaxOperatorAccess().getMaxKeyword_1());
    }
)
;





// Entry rule entryRuleMinOperator
entryRuleMinOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMinOperatorRule()); }
	 iv_ruleMinOperator=ruleMinOperator 
	 { $current=$iv_ruleMinOperator.current; } 
	 EOF 
;

// Rule MinOperator
ruleMinOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMinOperatorAccess().getMinOperatorAction_0(),
            $current);
    }
)	otherlv_1='min' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMinOperatorAccess().getMinKeyword_1());
    }
)
;





// Entry rule entryRuleAvgOperator
entryRuleAvgOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAvgOperatorRule()); }
	 iv_ruleAvgOperator=ruleAvgOperator 
	 { $current=$iv_ruleAvgOperator.current; } 
	 EOF 
;

// Rule AvgOperator
ruleAvgOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAvgOperatorAccess().getAvgOperatorAction_0(),
            $current);
    }
)	otherlv_1='avg' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAvgOperatorAccess().getAvgKeyword_1());
    }
)
;





// Entry rule entryRuleSumOperator
entryRuleSumOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSumOperatorRule()); }
	 iv_ruleSumOperator=ruleSumOperator 
	 { $current=$iv_ruleSumOperator.current; } 
	 EOF 
;

// Rule SumOperator
ruleSumOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSumOperatorAccess().getSumOperatorAction_0(),
            $current);
    }
)	otherlv_1='sum' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSumOperatorAccess().getSumKeyword_1());
    }
)
;





// Entry rule entryRuleExponentialOperator
entryRuleExponentialOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExponentialOperatorRule()); }
	 iv_ruleExponentialOperator=ruleExponentialOperator 
	 { $current=$iv_ruleExponentialOperator.current; } 
	 EOF 
;

// Rule ExponentialOperator
ruleExponentialOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExponentialOperatorAccess().getExponentialOperatorAction_0(),
            $current);
    }
)	otherlv_1='exp' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExponentialOperatorAccess().getExpKeyword_1());
    }
)
;





// Entry rule entryRuleAbsoluteOperator
entryRuleAbsoluteOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbsoluteOperatorRule()); }
	 iv_ruleAbsoluteOperator=ruleAbsoluteOperator 
	 { $current=$iv_ruleAbsoluteOperator.current; } 
	 EOF 
;

// Rule AbsoluteOperator
ruleAbsoluteOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAbsoluteOperatorAccess().getAbsoluteOperatorAction_0(),
            $current);
    }
)	otherlv_1='abs' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbsoluteOperatorAccess().getAbsKeyword_1());
    }
)
;





// Entry rule entryRuleNaturalLogarithmOperator
entryRuleNaturalLogarithmOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNaturalLogarithmOperatorRule()); }
	 iv_ruleNaturalLogarithmOperator=ruleNaturalLogarithmOperator 
	 { $current=$iv_ruleNaturalLogarithmOperator.current; } 
	 EOF 
;

// Rule NaturalLogarithmOperator
ruleNaturalLogarithmOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNaturalLogarithmOperatorAccess().getNaturalLogarithmOperatorAction_0(),
            $current);
    }
)	otherlv_1='ln' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNaturalLogarithmOperatorAccess().getLnKeyword_1());
    }
)
;





// Entry rule entryRuleCommonLogarithmOperator
entryRuleCommonLogarithmOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommonLogarithmOperatorRule()); }
	 iv_ruleCommonLogarithmOperator=ruleCommonLogarithmOperator 
	 { $current=$iv_ruleCommonLogarithmOperator.current; } 
	 EOF 
;

// Rule CommonLogarithmOperator
ruleCommonLogarithmOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCommonLogarithmOperatorAccess().getCommonLogarithmOperatorAction_0(),
            $current);
    }
)	otherlv_1='log' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCommonLogarithmOperatorAccess().getLogKeyword_1());
    }
)
;





// Entry rule entryRuleLeftParenthesis
entryRuleLeftParenthesis returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLeftParenthesisRule()); } 
	 iv_ruleLeftParenthesis=ruleLeftParenthesis 
	 { $current=$iv_ruleLeftParenthesis.current.getText(); }  
	 EOF 
;

// Rule LeftParenthesis
ruleLeftParenthesis returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLeftParenthesisAccess().getLeftParenthesisKeyword()); 
    }

    ;





// Entry rule entryRuleRightParenthesis
entryRuleRightParenthesis returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRightParenthesisRule()); } 
	 iv_ruleRightParenthesis=ruleRightParenthesis 
	 { $current=$iv_ruleRightParenthesis.current.getText(); }  
	 EOF 
;

// Rule RightParenthesis
ruleRightParenthesis returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRightParenthesisAccess().getRightParenthesisKeyword()); 
    }

    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;









// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;









// Entry rule entryRuleImportNamespace
entryRuleImportNamespace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportNamespaceRule()); }
	 iv_ruleImportNamespace=ruleImportNamespace 
	 { $current=$iv_ruleImportNamespace.current; } 
	 EOF 
;

// Rule ImportNamespace
ruleImportNamespace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportNamespaceAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportNamespaceAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportNamespaceRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_POSITIVE_SMALL_DECIMAL_1=RULE_POSITIVE_SMALL_DECIMAL    {
		$current.merge(this_POSITIVE_SMALL_DECIMAL_1);
    }

    { 
    newLeafNode(this_POSITIVE_SMALL_DECIMAL_1, grammarAccess.getNumberAccess().getPOSITIVE_SMALL_DECIMALTerminalRuleCall_1()); 
    }

    |    this_SMALL_DECIMAL_2=RULE_SMALL_DECIMAL    {
		$current.merge(this_SMALL_DECIMAL_2);
    }

    { 
    newLeafNode(this_SMALL_DECIMAL_2, grammarAccess.getNumberAccess().getSMALL_DECIMALTerminalRuleCall_2()); 
    }

    |    this_EBIGDECIMAL_3=RULE_EBIGDECIMAL    {
		$current.merge(this_EBIGDECIMAL_3);
    }

    { 
    newLeafNode(this_EBIGDECIMAL_3, grammarAccess.getNumberAccess().getEBIGDECIMALTerminalRuleCall_3()); 
    }
)
    ;









RULE_EBOOLEAN : ('true'|'false');

RULE_NULL : 'null';

RULE_INT : ('0'..'9')+;

RULE_POSITIVE_SMALL_DECIMAL : ('1' ('.' '0'+)?|'0' ('.' ('0'..'9')+)?|'.' ('0'..'9')+);

RULE_SMALL_DECIMAL : ('+'|'-')? RULE_POSITIVE_SMALL_DECIMAL;

RULE_EBIGDECIMAL : ('+'|'-')? (RULE_INT|'.' RULE_INT|RULE_INT '.' RULE_INT);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'+'|'-'|'%'|'*'|'/'|'#'|'>'|'<'|'='|'\u00C2\u00A7') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'+'|'-'|'%'|'*'|'/'|'#'|'>'|'<'|'='|'\u00C2\u00A7')*;

RULE_DATE_TIME : RULE_INT '-' RULE_INT '-' RULE_INT ('T' RULE_INT ':' RULE_INT (':' RULE_INT ('.' RULE_INT)?)?)?;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


