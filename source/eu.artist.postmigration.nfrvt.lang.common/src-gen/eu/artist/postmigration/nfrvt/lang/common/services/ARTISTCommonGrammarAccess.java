/*
* generated by Xtext
*/
package eu.artist.postmigration.nfrvt.lang.common.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ARTISTCommonGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cImplicationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Implication;
		public ParserRule getRule() { return rule; }

		//Implication
		public RuleCall getImplicationParserRuleCall() { return cImplicationParserRuleCall; }
	}

	public class ImplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDisjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorImplicationOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDisjunctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Implication:
		//	Disjunction ({Implication.left=current} operator=ImplicationOperator right=Disjunction)*;
		public ParserRule getRule() { return rule; }

		//Disjunction ({Implication.left=current} operator=ImplicationOperator right=Disjunction)*
		public Group getGroup() { return cGroup; }

		//Disjunction
		public RuleCall getDisjunctionParserRuleCall_0() { return cDisjunctionParserRuleCall_0; }

		//({Implication.left=current} operator=ImplicationOperator right=Disjunction)*
		public Group getGroup_1() { return cGroup_1; }

		//{Implication.left=current}
		public Action getImplicationLeftAction_1_0() { return cImplicationLeftAction_1_0; }

		//operator=ImplicationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//ImplicationOperator
		public RuleCall getOperatorImplicationOperatorParserRuleCall_1_1_0() { return cOperatorImplicationOperatorParserRuleCall_1_1_0; }

		//right=Disjunction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Disjunction
		public RuleCall getRightDisjunctionParserRuleCall_1_2_0() { return cRightDisjunctionParserRuleCall_1_2_0; }
	}

	public class DisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Disjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDisjunctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cOperatorOrOperatorParserRuleCall_1_1_0_0 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOperatorXOrOperatorParserRuleCall_1_1_0_1 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjunctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Disjunction:
		//	Conjunction ({Disjunction.left=current} operator=(OrOperator | XOrOperator) right=Conjunction)*;
		public ParserRule getRule() { return rule; }

		//Conjunction ({Disjunction.left=current} operator=(OrOperator | XOrOperator) right=Conjunction)*
		public Group getGroup() { return cGroup; }

		//Conjunction
		public RuleCall getConjunctionParserRuleCall_0() { return cConjunctionParserRuleCall_0; }

		//({Disjunction.left=current} operator=(OrOperator | XOrOperator) right=Conjunction)*
		public Group getGroup_1() { return cGroup_1; }

		//{Disjunction.left=current}
		public Action getDisjunctionLeftAction_1_0() { return cDisjunctionLeftAction_1_0; }

		//operator=(OrOperator | XOrOperator)
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//OrOperator | XOrOperator
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//OrOperator
		public RuleCall getOperatorOrOperatorParserRuleCall_1_1_0_0() { return cOperatorOrOperatorParserRuleCall_1_1_0_0; }

		//XOrOperator
		public RuleCall getOperatorXOrOperatorParserRuleCall_1_1_0_1() { return cOperatorXOrOperatorParserRuleCall_1_1_0_1; }

		//right=Conjunction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Conjunction
		public RuleCall getRightConjunctionParserRuleCall_1_2_0() { return cRightConjunctionParserRuleCall_1_2_0; }
	}

	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConjunctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAndOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Conjunction:
		//	Comparison ({Conjunction.left=current} operator=AndOperator right=Comparison)*;
		public ParserRule getRule() { return rule; }

		//Comparison ({Conjunction.left=current} operator=AndOperator right=Comparison)*
		public Group getGroup() { return cGroup; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }

		//({Conjunction.left=current} operator=AndOperator right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{Conjunction.left=current}
		public Action getConjunctionLeftAction_1_0() { return cConjunctionLeftAction_1_0; }

		//operator=AndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AndOperator
		public RuleCall getOperatorAndOperatorParserRuleCall_1_1_0() { return cOperatorAndOperatorParserRuleCall_1_1_0; }

		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanUnitParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cOperatorEqualsOperatorParserRuleCall_1_1_0_0 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOperatorNotEqualsOperatorParserRuleCall_1_1_0_1 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBooleanUnitParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison:
		//	BooleanUnit ({Comparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=BooleanUnit)*;
		public ParserRule getRule() { return rule; }

		//BooleanUnit ({Comparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=BooleanUnit)*
		public Group getGroup() { return cGroup; }

		//BooleanUnit
		public RuleCall getBooleanUnitParserRuleCall_0() { return cBooleanUnitParserRuleCall_0; }

		//({Comparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=BooleanUnit)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }

		//operator=(EqualsOperator | NotEqualsOperator)
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//EqualsOperator | NotEqualsOperator
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//EqualsOperator
		public RuleCall getOperatorEqualsOperatorParserRuleCall_1_1_0_0() { return cOperatorEqualsOperatorParserRuleCall_1_1_0_0; }

		//NotEqualsOperator
		public RuleCall getOperatorNotEqualsOperatorParserRuleCall_1_1_0_1() { return cOperatorNotEqualsOperatorParserRuleCall_1_1_0_1; }

		//right=BooleanUnit
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BooleanUnit
		public RuleCall getRightBooleanUnitParserRuleCall_1_2_0() { return cRightBooleanUnitParserRuleCall_1_2_0; }
	}

	public class BooleanUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNegationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BooleanUnit:
		//	Negation | RelationalExpression | BooleanLiteral;
		public ParserRule getRule() { return rule; }

		//Negation | RelationalExpression | BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//Negation
		public RuleCall getNegationParserRuleCall_0() { return cNegationParserRuleCall_0; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_1() { return cRelationalExpressionParserRuleCall_1; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_2() { return cBooleanLiteralParserRuleCall_2; }
	}

	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorNotOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBooleanUnitParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Negation:
		//	operator=NotOperator value=BooleanUnit;
		public ParserRule getRule() { return rule; }

		//operator=NotOperator value=BooleanUnit
		public Group getGroup() { return cGroup; }

		//operator=NotOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//NotOperator
		public RuleCall getOperatorNotOperatorParserRuleCall_0_0() { return cOperatorNotOperatorParserRuleCall_0_0; }

		//value=BooleanUnit
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BooleanUnit
		public RuleCall getValueBooleanUnitParserRuleCall_1_0() { return cValueBooleanUnitParserRuleCall_1_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparableExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cRelationalExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorGreaterThanOperatorParserRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cRelationalExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cOperatorGreaterOrEqualThanOperatorParserRuleCall_1_0_1_1_0 = (RuleCall)cOperatorAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cRelationalExpressionLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cOperatorLessOrEqualThanOperatorParserRuleCall_1_0_2_1_0 = (RuleCall)cOperatorAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cRelationalExpressionLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cOperatorLessThanOperatorParserRuleCall_1_0_3_1_0 = (RuleCall)cOperatorAssignment_1_0_3_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparableExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpression:
		//	ComparableExpression (({RelationalExpression.left=current} operator=GreaterThanOperator |
		//	{RelationalExpression.left=current} operator=GreaterOrEqualThanOperator | {RelationalExpression.left=current}
		//	operator=LessOrEqualThanOperator | {RelationalExpression.left=current} operator=LessThanOperator)
		//	right=ComparableExpression)*;
		public ParserRule getRule() { return rule; }

		//ComparableExpression (({RelationalExpression.left=current} operator=GreaterThanOperator |
		//{RelationalExpression.left=current} operator=GreaterOrEqualThanOperator | {RelationalExpression.left=current}
		//operator=LessOrEqualThanOperator | {RelationalExpression.left=current} operator=LessThanOperator)
		//right=ComparableExpression)*
		public Group getGroup() { return cGroup; }

		//ComparableExpression
		public RuleCall getComparableExpressionParserRuleCall_0() { return cComparableExpressionParserRuleCall_0; }

		//(({RelationalExpression.left=current} operator=GreaterThanOperator | {RelationalExpression.left=current}
		//operator=GreaterOrEqualThanOperator | {RelationalExpression.left=current} operator=LessOrEqualThanOperator |
		//{RelationalExpression.left=current} operator=LessThanOperator) right=ComparableExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{RelationalExpression.left=current} operator=GreaterThanOperator | {RelationalExpression.left=current}
		//operator=GreaterOrEqualThanOperator | {RelationalExpression.left=current} operator=LessOrEqualThanOperator |
		//{RelationalExpression.left=current} operator=LessThanOperator
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{RelationalExpression.left=current} operator=GreaterThanOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{RelationalExpression.left=current}
		public Action getRelationalExpressionLeftAction_1_0_0_0() { return cRelationalExpressionLeftAction_1_0_0_0; }

		//operator=GreaterThanOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//GreaterThanOperator
		public RuleCall getOperatorGreaterThanOperatorParserRuleCall_1_0_0_1_0() { return cOperatorGreaterThanOperatorParserRuleCall_1_0_0_1_0; }

		//{RelationalExpression.left=current} operator=GreaterOrEqualThanOperator
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{RelationalExpression.left=current}
		public Action getRelationalExpressionLeftAction_1_0_1_0() { return cRelationalExpressionLeftAction_1_0_1_0; }

		//operator=GreaterOrEqualThanOperator
		public Assignment getOperatorAssignment_1_0_1_1() { return cOperatorAssignment_1_0_1_1; }

		//GreaterOrEqualThanOperator
		public RuleCall getOperatorGreaterOrEqualThanOperatorParserRuleCall_1_0_1_1_0() { return cOperatorGreaterOrEqualThanOperatorParserRuleCall_1_0_1_1_0; }

		//{RelationalExpression.left=current} operator=LessOrEqualThanOperator
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{RelationalExpression.left=current}
		public Action getRelationalExpressionLeftAction_1_0_2_0() { return cRelationalExpressionLeftAction_1_0_2_0; }

		//operator=LessOrEqualThanOperator
		public Assignment getOperatorAssignment_1_0_2_1() { return cOperatorAssignment_1_0_2_1; }

		//LessOrEqualThanOperator
		public RuleCall getOperatorLessOrEqualThanOperatorParserRuleCall_1_0_2_1_0() { return cOperatorLessOrEqualThanOperatorParserRuleCall_1_0_2_1_0; }

		//{RelationalExpression.left=current} operator=LessThanOperator
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{RelationalExpression.left=current}
		public Action getRelationalExpressionLeftAction_1_0_3_0() { return cRelationalExpressionLeftAction_1_0_3_0; }

		//operator=LessThanOperator
		public Assignment getOperatorAssignment_1_0_3_1() { return cOperatorAssignment_1_0_3_1; }

		//LessThanOperator
		public RuleCall getOperatorLessThanOperatorParserRuleCall_1_0_3_1_0() { return cOperatorLessThanOperatorParserRuleCall_1_0_3_1_0; }

		//right=ComparableExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ComparableExpression
		public RuleCall getRightComparableExpressionParserRuleCall_1_1_0() { return cRightComparableExpressionParserRuleCall_1_1_0; }
	}

	public class ComparableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparableExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArithmeticExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceSpecificationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObjectSpecificationExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUnlimitedLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cParenthesizedExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ComparableExpression:
		//	ArithmeticExpression | InstanceSpecificationExpression | ObjectSpecificationExpression | NullLiteral | StringLiteral
		//	| UnlimitedLiteral | ParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//ArithmeticExpression | InstanceSpecificationExpression | ObjectSpecificationExpression | NullLiteral | StringLiteral |
		//UnlimitedLiteral | ParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArithmeticExpression
		public RuleCall getArithmeticExpressionParserRuleCall_0() { return cArithmeticExpressionParserRuleCall_0; }

		//InstanceSpecificationExpression
		public RuleCall getInstanceSpecificationExpressionParserRuleCall_1() { return cInstanceSpecificationExpressionParserRuleCall_1; }

		//ObjectSpecificationExpression
		public RuleCall getObjectSpecificationExpressionParserRuleCall_2() { return cObjectSpecificationExpressionParserRuleCall_2; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_3() { return cNullLiteralParserRuleCall_3; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_4() { return cStringLiteralParserRuleCall_4; }

		//UnlimitedLiteral
		public RuleCall getUnlimitedLiteralParserRuleCall_5() { return cUnlimitedLiteralParserRuleCall_5; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_6() { return cParenthesizedExpressionParserRuleCall_6; }
	}

	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArithmeticExpression");
		private final RuleCall cAdditiveExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArithmeticExpression:
		//	AdditiveExpression;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall() { return cAdditiveExpressionParserRuleCall; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditiveExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cOperatorSubstractionOperatorParserRuleCall_1_1_0_0 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOperatorAdditionOperatorParserRuleCall_1_1_0_1 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression:
		//	MultiplicativeExpression ({AdditiveExpression.left=current} operator=(SubstractionOperator | AdditionOperator)
		//	right=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({AdditiveExpression.left=current} operator=(SubstractionOperator | AdditionOperator)
		//right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({AdditiveExpression.left=current} operator=(SubstractionOperator | AdditionOperator) right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AdditiveExpression.left=current}
		public Action getAdditiveExpressionLeftAction_1_0() { return cAdditiveExpressionLeftAction_1_0; }

		//operator=(SubstractionOperator | AdditionOperator)
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//SubstractionOperator | AdditionOperator
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//SubstractionOperator
		public RuleCall getOperatorSubstractionOperatorParserRuleCall_1_1_0_0() { return cOperatorSubstractionOperatorParserRuleCall_1_1_0_0; }

		//AdditionOperator
		public RuleCall getOperatorAdditionOperatorParserRuleCall_1_1_0_1() { return cOperatorAdditionOperatorParserRuleCall_1_1_0_1; }

		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumberExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicativeExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cOperatorMultiplicationOperatorParserRuleCall_1_1_0_0 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOperatorDivisionOperatorParserRuleCall_1_1_0_1 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cOperatorModulusOperatorParserRuleCall_1_1_0_2 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNumberExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression:
		//	NumberExpression ({MultiplicativeExpression.left=current} operator=(MultiplicationOperator | DivisionOperator |
		//	ModulusOperator) right=NumberExpression)*;
		public ParserRule getRule() { return rule; }

		//NumberExpression ({MultiplicativeExpression.left=current} operator=(MultiplicationOperator | DivisionOperator |
		//ModulusOperator) right=NumberExpression)*
		public Group getGroup() { return cGroup; }

		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_0() { return cNumberExpressionParserRuleCall_0; }

		//({MultiplicativeExpression.left=current} operator=(MultiplicationOperator | DivisionOperator | ModulusOperator)
		//right=NumberExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{MultiplicativeExpression.left=current}
		public Action getMultiplicativeExpressionLeftAction_1_0() { return cMultiplicativeExpressionLeftAction_1_0; }

		//operator=(MultiplicationOperator | DivisionOperator | ModulusOperator)
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//MultiplicationOperator | DivisionOperator | ModulusOperator
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//MultiplicationOperator
		public RuleCall getOperatorMultiplicationOperatorParserRuleCall_1_1_0_0() { return cOperatorMultiplicationOperatorParserRuleCall_1_1_0_0; }

		//DivisionOperator
		public RuleCall getOperatorDivisionOperatorParserRuleCall_1_1_0_1() { return cOperatorDivisionOperatorParserRuleCall_1_1_0_1; }

		//ModulusOperator
		public RuleCall getOperatorModulusOperatorParserRuleCall_1_1_0_2() { return cOperatorModulusOperatorParserRuleCall_1_1_0_2; }

		//right=NumberExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//NumberExpression
		public RuleCall getRightNumberExpressionParserRuleCall_1_2_0() { return cRightNumberExpressionParserRuleCall_1_2_0; }
	}

	public class NumberExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberExpression:
		//	NumberLiteral | NumberFunction;
		public ParserRule getRule() { return rule; }

		//NumberLiteral | NumberFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//NumberFunction
		public RuleCall getNumberFunctionParserRuleCall_1() { return cNumberFunctionParserRuleCall_1; }
	}

	public class NumberFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMaximumFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMinimumFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAverageFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSumFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExponentialFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAbsoluteFunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNaturalLogarithmFunctionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCommonLogarithmFunctionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//NumberFunction:
		//	MaximumFunction | MinimumFunction | AverageFunction | SumFunction | ExponentialFunction | AbsoluteFunction |
		//	NaturalLogarithmFunction | CommonLogarithmFunction;
		public ParserRule getRule() { return rule; }

		//MaximumFunction | MinimumFunction | AverageFunction | SumFunction | ExponentialFunction | AbsoluteFunction |
		//NaturalLogarithmFunction | CommonLogarithmFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//MaximumFunction
		public RuleCall getMaximumFunctionParserRuleCall_0() { return cMaximumFunctionParserRuleCall_0; }

		//MinimumFunction
		public RuleCall getMinimumFunctionParserRuleCall_1() { return cMinimumFunctionParserRuleCall_1; }

		//AverageFunction
		public RuleCall getAverageFunctionParserRuleCall_2() { return cAverageFunctionParserRuleCall_2; }

		//SumFunction
		public RuleCall getSumFunctionParserRuleCall_3() { return cSumFunctionParserRuleCall_3; }

		//ExponentialFunction
		public RuleCall getExponentialFunctionParserRuleCall_4() { return cExponentialFunctionParserRuleCall_4; }

		//AbsoluteFunction
		public RuleCall getAbsoluteFunctionParserRuleCall_5() { return cAbsoluteFunctionParserRuleCall_5; }

		//NaturalLogarithmFunction
		public RuleCall getNaturalLogarithmFunctionParserRuleCall_6() { return cNaturalLogarithmFunctionParserRuleCall_6; }

		//CommonLogarithmFunction
		public RuleCall getCommonLogarithmFunctionParserRuleCall_7() { return cCommonLogarithmFunctionParserRuleCall_7; }
	}

	public class MaximumFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaximumFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorMaxOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesNumberExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesNumberExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MaximumFunction:
		//	operator=MaxOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
		public ParserRule getRule() { return rule; }

		//operator=MaxOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")"
		public Group getGroup() { return cGroup; }

		//operator=MaxOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//MaxOperator
		public RuleCall getOperatorMaxOperatorParserRuleCall_0_0() { return cOperatorMaxOperatorParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//values+=NumberExpression
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//NumberExpression
		public RuleCall getValuesNumberExpressionParserRuleCall_2_0() { return cValuesNumberExpressionParserRuleCall_2_0; }

		//("," values+=NumberExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=NumberExpression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//NumberExpression
		public RuleCall getValuesNumberExpressionParserRuleCall_3_1_0() { return cValuesNumberExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MinimumFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinimumFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorMinOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesNumberExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesNumberExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MinimumFunction:
		//	operator=MinOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
		public ParserRule getRule() { return rule; }

		//operator=MinOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")"
		public Group getGroup() { return cGroup; }

		//operator=MinOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//MinOperator
		public RuleCall getOperatorMinOperatorParserRuleCall_0_0() { return cOperatorMinOperatorParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//values+=NumberExpression
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//NumberExpression
		public RuleCall getValuesNumberExpressionParserRuleCall_2_0() { return cValuesNumberExpressionParserRuleCall_2_0; }

		//("," values+=NumberExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=NumberExpression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//NumberExpression
		public RuleCall getValuesNumberExpressionParserRuleCall_3_1_0() { return cValuesNumberExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AverageFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AverageFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorAvgOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesNumberExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesNumberExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AverageFunction:
		//	operator=AvgOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
		public ParserRule getRule() { return rule; }

		//operator=AvgOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")"
		public Group getGroup() { return cGroup; }

		//operator=AvgOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//AvgOperator
		public RuleCall getOperatorAvgOperatorParserRuleCall_0_0() { return cOperatorAvgOperatorParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//values+=NumberExpression
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//NumberExpression
		public RuleCall getValuesNumberExpressionParserRuleCall_2_0() { return cValuesNumberExpressionParserRuleCall_2_0; }

		//("," values+=NumberExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=NumberExpression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//NumberExpression
		public RuleCall getValuesNumberExpressionParserRuleCall_3_1_0() { return cValuesNumberExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SumFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorSumOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesNumberExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesNumberExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SumFunction:
		//	operator=SumOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
		public ParserRule getRule() { return rule; }

		//operator=SumOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")"
		public Group getGroup() { return cGroup; }

		//operator=SumOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//SumOperator
		public RuleCall getOperatorSumOperatorParserRuleCall_0_0() { return cOperatorSumOperatorParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//values+=NumberExpression
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//NumberExpression
		public RuleCall getValuesNumberExpressionParserRuleCall_2_0() { return cValuesNumberExpressionParserRuleCall_2_0; }

		//("," values+=NumberExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=NumberExpression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//NumberExpression
		public RuleCall getValuesNumberExpressionParserRuleCall_3_1_0() { return cValuesNumberExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ExponentialFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExponentialFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorExponentialOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBaseNumberExpressionParserRuleCall_2_0 = (RuleCall)cBaseAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExponentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExponentNumberExpressionParserRuleCall_4_0 = (RuleCall)cExponentAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExponentialFunction:
		//	operator=ExponentialOperator "(" base=NumberExpression "," exponent=NumberExpression ")";
		public ParserRule getRule() { return rule; }

		//operator=ExponentialOperator "(" base=NumberExpression "," exponent=NumberExpression ")"
		public Group getGroup() { return cGroup; }

		//operator=ExponentialOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//ExponentialOperator
		public RuleCall getOperatorExponentialOperatorParserRuleCall_0_0() { return cOperatorExponentialOperatorParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//base=NumberExpression
		public Assignment getBaseAssignment_2() { return cBaseAssignment_2; }

		//NumberExpression
		public RuleCall getBaseNumberExpressionParserRuleCall_2_0() { return cBaseNumberExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//exponent=NumberExpression
		public Assignment getExponentAssignment_4() { return cExponentAssignment_4; }

		//NumberExpression
		public RuleCall getExponentNumberExpressionParserRuleCall_4_0() { return cExponentNumberExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class AbsoluteFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbsoluteFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorAbsoluteOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueNumberExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AbsoluteFunction:
		//	operator=AbsoluteOperator "(" value=NumberExpression ")";
		public ParserRule getRule() { return rule; }

		//operator=AbsoluteOperator "(" value=NumberExpression ")"
		public Group getGroup() { return cGroup; }

		//operator=AbsoluteOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//AbsoluteOperator
		public RuleCall getOperatorAbsoluteOperatorParserRuleCall_0_0() { return cOperatorAbsoluteOperatorParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//value=NumberExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//NumberExpression
		public RuleCall getValueNumberExpressionParserRuleCall_2_0() { return cValueNumberExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class NaturalLogarithmFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NaturalLogarithmFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorNaturalLogarithmOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueNumberExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NaturalLogarithmFunction:
		//	operator=NaturalLogarithmOperator "(" value=NumberExpression ")";
		public ParserRule getRule() { return rule; }

		//operator=NaturalLogarithmOperator "(" value=NumberExpression ")"
		public Group getGroup() { return cGroup; }

		//operator=NaturalLogarithmOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//NaturalLogarithmOperator
		public RuleCall getOperatorNaturalLogarithmOperatorParserRuleCall_0_0() { return cOperatorNaturalLogarithmOperatorParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//value=NumberExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//NumberExpression
		public RuleCall getValueNumberExpressionParserRuleCall_2_0() { return cValueNumberExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CommonLogarithmFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommonLogarithmFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorCommonLogarithmOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueNumberExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CommonLogarithmFunction:
		//	operator=CommonLogarithmOperator "(" value=NumberExpression ")";
		public ParserRule getRule() { return rule; }

		//operator=CommonLogarithmOperator "(" value=NumberExpression ")"
		public Group getGroup() { return cGroup; }

		//operator=CommonLogarithmOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//CommonLogarithmOperator
		public RuleCall getOperatorCommonLogarithmOperatorParserRuleCall_0_0() { return cOperatorCommonLogarithmOperatorParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//value=NumberExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//NumberExpression
		public RuleCall getValueNumberExpressionParserRuleCall_2_0() { return cValueNumberExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLeftParenthesisParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cRightParenthesisParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ParenthesizedExpression:
		//	LeftParenthesis value=Expression RightParenthesis;
		public ParserRule getRule() { return rule; }

		//LeftParenthesis value=Expression RightParenthesis
		public Group getGroup() { return cGroup; }

		//LeftParenthesis
		public RuleCall getLeftParenthesisParserRuleCall_0() { return cLeftParenthesisParserRuleCall_0; }

		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }

		//RightParenthesis
		public RuleCall getRightParenthesisParserRuleCall_2() { return cRightParenthesisParserRuleCall_2; }
	}

	public class ValueSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceSpecificationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObjectSpecificationExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValueSpecification:
		//	LiteralValueExpression | InstanceSpecificationExpression | ObjectSpecificationExpression;
		public ParserRule getRule() { return rule; }

		//LiteralValueExpression | InstanceSpecificationExpression | ObjectSpecificationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralValueExpression
		public RuleCall getLiteralValueExpressionParserRuleCall_0() { return cLiteralValueExpressionParserRuleCall_0; }

		//InstanceSpecificationExpression
		public RuleCall getInstanceSpecificationExpressionParserRuleCall_1() { return cInstanceSpecificationExpressionParserRuleCall_1; }

		//ObjectSpecificationExpression
		public RuleCall getObjectSpecificationExpressionParserRuleCall_2() { return cObjectSpecificationExpressionParserRuleCall_2; }
	}

	public class ObjectSpecificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectSpecificationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeDataTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeDataTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeDataTypeCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueCollectionParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cValueTupleParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//ObjectSpecificationExpression:
		//	type=[uml::DataType|QualifiedName] (value=Collection | value=Tuple);
		public ParserRule getRule() { return rule; }

		//type=[uml::DataType|QualifiedName] (value=Collection | value=Tuple)
		public Group getGroup() { return cGroup; }

		//type=[uml::DataType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[uml::DataType|QualifiedName]
		public CrossReference getTypeDataTypeCrossReference_0_0() { return cTypeDataTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeDataTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeDataTypeQualifiedNameParserRuleCall_0_0_1; }

		//value=Collection | value=Tuple
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=Collection
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//Collection
		public RuleCall getValueCollectionParserRuleCall_1_0_0() { return cValueCollectionParserRuleCall_1_0_0; }

		//value=Tuple
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Tuple
		public RuleCall getValueTupleParserRuleCall_1_1_0() { return cValueTupleParserRuleCall_1_1_0; }
	}

	public class CollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Collection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesValueSpecificationParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesValueSpecificationParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Collection:
		//	{Collection} "[" (values+=ValueSpecification ("," values+=ValueSpecification)*)? "]";
		public ParserRule getRule() { return rule; }

		//{Collection} "[" (values+=ValueSpecification ("," values+=ValueSpecification)*)? "]"
		public Group getGroup() { return cGroup; }

		//{Collection}
		public Action getCollectionAction_0() { return cCollectionAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(values+=ValueSpecification ("," values+=ValueSpecification)*)?
		public Group getGroup_2() { return cGroup_2; }

		//values+=ValueSpecification
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }

		//ValueSpecification
		public RuleCall getValuesValueSpecificationParserRuleCall_2_0_0() { return cValuesValueSpecificationParserRuleCall_2_0_0; }

		//("," values+=ValueSpecification)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//values+=ValueSpecification
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }

		//ValueSpecification
		public RuleCall getValuesValueSpecificationParserRuleCall_2_1_1_0() { return cValuesValueSpecificationParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTuplesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTuplesPropertyValuePairParserRuleCall_2_0_0 = (RuleCall)cTuplesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTuplesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTuplesPropertyValuePairParserRuleCall_2_1_1_0 = (RuleCall)cTuplesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Tuple:
		//	{Tuple} "{" (tuples+=PropertyValuePair ("," tuples+=PropertyValuePair)*)? "}";
		public ParserRule getRule() { return rule; }

		//{Tuple} "{" (tuples+=PropertyValuePair ("," tuples+=PropertyValuePair)*)? "}"
		public Group getGroup() { return cGroup; }

		//{Tuple}
		public Action getTupleAction_0() { return cTupleAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(tuples+=PropertyValuePair ("," tuples+=PropertyValuePair)*)?
		public Group getGroup_2() { return cGroup_2; }

		//tuples+=PropertyValuePair
		public Assignment getTuplesAssignment_2_0() { return cTuplesAssignment_2_0; }

		//PropertyValuePair
		public RuleCall getTuplesPropertyValuePairParserRuleCall_2_0_0() { return cTuplesPropertyValuePairParserRuleCall_2_0_0; }

		//("," tuples+=PropertyValuePair)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//tuples+=PropertyValuePair
		public Assignment getTuplesAssignment_2_1_1() { return cTuplesAssignment_2_1_1; }

		//PropertyValuePair
		public RuleCall getTuplesPropertyValuePairParserRuleCall_2_1_1_0() { return cTuplesPropertyValuePairParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PropertyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyPropertyCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyPropertyQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cPropertyPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueSpecificationParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PropertyValuePair:
		//	property=[uml::Property|QualifiedName] "=" value=ValueSpecification;
		public ParserRule getRule() { return rule; }

		//property=[uml::Property|QualifiedName] "=" value=ValueSpecification
		public Group getGroup() { return cGroup; }

		//property=[uml::Property|QualifiedName]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//[uml::Property|QualifiedName]
		public CrossReference getPropertyPropertyCrossReference_0_0() { return cPropertyPropertyCrossReference_0_0; }

		//QualifiedName
		public RuleCall getPropertyPropertyQualifiedNameParserRuleCall_0_0_1() { return cPropertyPropertyQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=ValueSpecification
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ValueSpecification
		public RuleCall getValueValueSpecificationParserRuleCall_2_0() { return cValueValueSpecificationParserRuleCall_2_0; }
	}

	public class InstanceSpecificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceSpecificationExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueInstanceSpecificationCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueInstanceSpecificationQualifiedNameParserRuleCall_0_1 = (RuleCall)cValueInstanceSpecificationCrossReference_0.eContents().get(1);
		
		//InstanceSpecificationExpression:
		//	value=[uml::InstanceSpecification|QualifiedName];
		public ParserRule getRule() { return rule; }

		//value=[uml::InstanceSpecification|QualifiedName]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[uml::InstanceSpecification|QualifiedName]
		public CrossReference getValueInstanceSpecificationCrossReference_0() { return cValueInstanceSpecificationCrossReference_0; }

		//QualifiedName
		public RuleCall getValueInstanceSpecificationQualifiedNameParserRuleCall_0_1() { return cValueInstanceSpecificationQualifiedNameParserRuleCall_0_1; }
	}

	public class LiteralValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralValueExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnlimitedLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//LiteralValueExpression:
		//	NumberLiteral | BooleanLiteral | NullLiteral | StringLiteral | UnlimitedLiteral;
		public ParserRule getRule() { return rule; }

		//NumberLiteral | BooleanLiteral | NullLiteral | StringLiteral | UnlimitedLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1() { return cBooleanLiteralParserRuleCall_1; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_2() { return cNullLiteralParserRuleCall_2; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }

		//UnlimitedLiteral
		public RuleCall getUnlimitedLiteralParserRuleCall_4() { return cUnlimitedLiteralParserRuleCall_4; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//	value=EBOOLEAN;
		public ParserRule getRule() { return rule; }

		//value=EBOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EBOOLEAN
		public RuleCall getValueEBOOLEANTerminalRuleCall_0() { return cValueEBOOLEANTerminalRuleCall_0; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//	value=Number;
		public ParserRule getRule() { return rule; }

		//value=Number
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Number
		public RuleCall getValueNumberParserRuleCall_0() { return cValueNumberParserRuleCall_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNULLTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NullLiteral:
		//	value=NULL;
		public ParserRule getRule() { return rule; }

		//value=NULL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NULL
		public RuleCall getValueNULLTerminalRuleCall_0() { return cValueNULLTerminalRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class UnlimitedLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnlimitedLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueAsteriskKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//UnlimitedLiteral:
		//	value="*";
		public ParserRule getRule() { return rule; }

		//value="*"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"*"
		public Keyword getValueAsteriskKeyword_0() { return cValueAsteriskKeyword_0; }
	}

	public class OrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//OrOperator returns Operator:
		//	{OrOperator} ("or" | "||");
		public ParserRule getRule() { return rule; }

		//{OrOperator} ("or" | "||")
		public Group getGroup() { return cGroup; }

		//{OrOperator}
		public Action getOrOperatorAction_0() { return cOrOperatorAction_0; }

		//"or" | "||"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
	}

	public class XOrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOrOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXOrOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cXorKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//XOrOperator returns Operator:
		//	{XOrOperator} ("xor" | "^");
		public ParserRule getRule() { return rule; }

		//{XOrOperator} ("xor" | "^")
		public Group getGroup() { return cGroup; }

		//{XOrOperator}
		public Action getXOrOperatorAction_0() { return cXOrOperatorAction_0; }

		//"xor" | "^"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"xor"
		public Keyword getXorKeyword_1_0() { return cXorKeyword_1_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
	}

	public class AndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//AndOperator returns Operator:
		//	{AndOperator} ("and" | "&&");
		public ParserRule getRule() { return rule; }

		//{AndOperator} ("and" | "&&")
		public Group getGroup() { return cGroup; }

		//{AndOperator}
		public Action getAndOperatorAction_0() { return cAndOperatorAction_0; }

		//"and" | "&&"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
	}

	public class ImplicationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplicationOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplicationOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//ImplicationOperator returns Operator:
		//	{ImplicationOperator} ("=>" | "->");
		public ParserRule getRule() { return rule; }

		//{ImplicationOperator} ("=>" | "->")
		public Group getGroup() { return cGroup; }

		//{ImplicationOperator}
		public Action getImplicationOperatorAction_0() { return cImplicationOperatorAction_0; }

		//"=>" | "->"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0() { return cEqualsSignGreaterThanSignKeyword_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
	}

	public class EqualsOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualsOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualsOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EqualsOperator returns Operator:
		//	{EqualsOperator} "==";
		public ParserRule getRule() { return rule; }

		//{EqualsOperator} "=="
		public Group getGroup() { return cGroup; }

		//{EqualsOperator}
		public Action getEqualsOperatorAction_0() { return cEqualsOperatorAction_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
	}

	public class NotEqualsOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotEqualsOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotEqualsOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//NotEqualsOperator returns Operator:
		//	{NotEqualsOperator} ("!=" | "<>");
		public ParserRule getRule() { return rule; }

		//{NotEqualsOperator} ("!=" | "<>")
		public Group getGroup() { return cGroup; }

		//{NotEqualsOperator}
		public Action getNotEqualsOperatorAction_0() { return cNotEqualsOperatorAction_0; }

		//"!=" | "<>"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0() { return cExclamationMarkEqualsSignKeyword_1_0; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_1_1() { return cLessThanSignGreaterThanSignKeyword_1_1; }
	}

	public class NotOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//NotOperator returns Operator:
		//	{NotOperator} ("!" | "not");
		public ParserRule getRule() { return rule; }

		//{NotOperator} ("!" | "not")
		public Group getGroup() { return cGroup; }

		//{NotOperator}
		public Action getNotOperatorAction_0() { return cNotOperatorAction_0; }

		//"!" | "not"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }

		//"not"
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }
	}

	public class GreaterThanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GreaterThanOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGreaterThanOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GreaterThanOperator returns Operator:
		//	{GreaterThanOperator} ">";
		public ParserRule getRule() { return rule; }

		//{GreaterThanOperator} ">"
		public Group getGroup() { return cGroup; }

		//{GreaterThanOperator}
		public Action getGreaterThanOperatorAction_0() { return cGreaterThanOperatorAction_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
	}

	public class GreaterOrEqualThanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GreaterOrEqualThanOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGreaterOrEqualThanOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GreaterOrEqualThanOperator returns Operator:
		//	{GreaterOrEqualThanOperator} ">=";
		public ParserRule getRule() { return rule; }

		//{GreaterOrEqualThanOperator} ">="
		public Group getGroup() { return cGroup; }

		//{GreaterOrEqualThanOperator}
		public Action getGreaterOrEqualThanOperatorAction_0() { return cGreaterOrEqualThanOperatorAction_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }
	}

	public class LessThanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LessThanOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLessThanOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LessThanOperator returns Operator:
		//	{LessThanOperator} "<";
		public ParserRule getRule() { return rule; }

		//{LessThanOperator} "<"
		public Group getGroup() { return cGroup; }

		//{LessThanOperator}
		public Action getLessThanOperatorAction_0() { return cLessThanOperatorAction_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
	}

	public class LessOrEqualThanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LessOrEqualThanOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLessOrEqualThanOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LessOrEqualThanOperator returns Operator:
		//	{LessOrEqualThanOperator} "<=";
		public ParserRule getRule() { return rule; }

		//{LessOrEqualThanOperator} "<="
		public Group getGroup() { return cGroup; }

		//{LessOrEqualThanOperator}
		public Action getLessOrEqualThanOperatorAction_0() { return cLessOrEqualThanOperatorAction_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
	}

	public class AdditionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAdditionOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AdditionOperator returns Operator:
		//	{AdditionOperator} "+";
		public ParserRule getRule() { return rule; }

		//{AdditionOperator} "+"
		public Group getGroup() { return cGroup; }

		//{AdditionOperator}
		public Action getAdditionOperatorAction_0() { return cAdditionOperatorAction_0; }

		//"+"
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}

	public class SubstractionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubstractionOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubstractionOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SubstractionOperator returns Operator:
		//	{SubstractionOperator} "-";
		public ParserRule getRule() { return rule; }

		//{SubstractionOperator} "-"
		public Group getGroup() { return cGroup; }

		//{SubstractionOperator}
		public Action getSubstractionOperatorAction_0() { return cSubstractionOperatorAction_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class MultiplicationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicationOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultiplicationOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MultiplicationOperator returns Operator:
		//	{MultiplicationOperator} "*";
		public ParserRule getRule() { return rule; }

		//{MultiplicationOperator} "*"
		public Group getGroup() { return cGroup; }

		//{MultiplicationOperator}
		public Action getMultiplicationOperatorAction_0() { return cMultiplicationOperatorAction_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class DivisionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DivisionOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDivisionOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DivisionOperator returns Operator:
		//	{DivisionOperator} "/";
		public ParserRule getRule() { return rule; }

		//{DivisionOperator} "/"
		public Group getGroup() { return cGroup; }

		//{DivisionOperator}
		public Action getDivisionOperatorAction_0() { return cDivisionOperatorAction_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}

	public class ModulusOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModulusOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModulusOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ModulusOperator returns Operator:
		//	{ModulusOperator} "%";
		public ParserRule getRule() { return rule; }

		//{ModulusOperator} "%"
		public Group getGroup() { return cGroup; }

		//{ModulusOperator}
		public Action getModulusOperatorAction_0() { return cModulusOperatorAction_0; }

		//"%"
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}

	public class MaxOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMaxOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMaxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MaxOperator returns Operator:
		//	{MaxOperator} "max";
		public ParserRule getRule() { return rule; }

		//{MaxOperator} "max"
		public Group getGroup() { return cGroup; }

		//{MaxOperator}
		public Action getMaxOperatorAction_0() { return cMaxOperatorAction_0; }

		//"max"
		public Keyword getMaxKeyword_1() { return cMaxKeyword_1; }
	}

	public class MinOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MinOperator returns Operator:
		//	{MinOperator} "min";
		public ParserRule getRule() { return rule; }

		//{MinOperator} "min"
		public Group getGroup() { return cGroup; }

		//{MinOperator}
		public Action getMinOperatorAction_0() { return cMinOperatorAction_0; }

		//"min"
		public Keyword getMinKeyword_1() { return cMinKeyword_1; }
	}

	public class AvgOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AvgOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAvgOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAvgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AvgOperator returns Operator:
		//	{AvgOperator} "avg";
		public ParserRule getRule() { return rule; }

		//{AvgOperator} "avg"
		public Group getGroup() { return cGroup; }

		//{AvgOperator}
		public Action getAvgOperatorAction_0() { return cAvgOperatorAction_0; }

		//"avg"
		public Keyword getAvgKeyword_1() { return cAvgKeyword_1; }
	}

	public class SumOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSumOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SumOperator returns Operator:
		//	{SumOperator} "sum";
		public ParserRule getRule() { return rule; }

		//{SumOperator} "sum"
		public Group getGroup() { return cGroup; }

		//{SumOperator}
		public Action getSumOperatorAction_0() { return cSumOperatorAction_0; }

		//"sum"
		public Keyword getSumKeyword_1() { return cSumKeyword_1; }
	}

	public class ExponentialOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExponentialOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExponentialOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExponentialOperator returns Operator:
		//	{ExponentialOperator} "exp";
		public ParserRule getRule() { return rule; }

		//{ExponentialOperator} "exp"
		public Group getGroup() { return cGroup; }

		//{ExponentialOperator}
		public Action getExponentialOperatorAction_0() { return cExponentialOperatorAction_0; }

		//"exp"
		public Keyword getExpKeyword_1() { return cExpKeyword_1; }
	}

	public class AbsoluteOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbsoluteOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbsoluteOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAbsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AbsoluteOperator returns Operator:
		//	{AbsoluteOperator} "abs";
		public ParserRule getRule() { return rule; }

		//{AbsoluteOperator} "abs"
		public Group getGroup() { return cGroup; }

		//{AbsoluteOperator}
		public Action getAbsoluteOperatorAction_0() { return cAbsoluteOperatorAction_0; }

		//"abs"
		public Keyword getAbsKeyword_1() { return cAbsKeyword_1; }
	}

	public class NaturalLogarithmOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NaturalLogarithmOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNaturalLogarithmOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NaturalLogarithmOperator returns Operator:
		//	{NaturalLogarithmOperator} "ln";
		public ParserRule getRule() { return rule; }

		//{NaturalLogarithmOperator} "ln"
		public Group getGroup() { return cGroup; }

		//{NaturalLogarithmOperator}
		public Action getNaturalLogarithmOperatorAction_0() { return cNaturalLogarithmOperatorAction_0; }

		//"ln"
		public Keyword getLnKeyword_1() { return cLnKeyword_1; }
	}

	public class CommonLogarithmOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommonLogarithmOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommonLogarithmOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLogKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CommonLogarithmOperator returns Operator:
		//	{CommonLogarithmOperator} "log";
		public ParserRule getRule() { return rule; }

		//{CommonLogarithmOperator} "log"
		public Group getGroup() { return cGroup; }

		//{CommonLogarithmOperator}
		public Action getCommonLogarithmOperatorAction_0() { return cCommonLogarithmOperatorAction_0; }

		//"log"
		public Keyword getLogKeyword_1() { return cLogKeyword_1; }
	}

	public class LeftParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LeftParenthesis");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//LeftParenthesis:
		//	"(";
		public ParserRule getRule() { return rule; }

		//"("
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}

	public class RightParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RightParenthesis");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//RightParenthesis:
		//	")";
		public ParserRule getRule() { return rule; }

		//")"
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ARTISTModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARTISTModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cARTISTModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportNamespaceParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		
		//ARTISTModel:
		//	{ARTISTModel} imports+=ImportNamespace*;
		public ParserRule getRule() { return rule; }

		//{ARTISTModel} imports+=ImportNamespace*
		public Group getGroup() { return cGroup; }

		//{ARTISTModel}
		public Action getARTISTModelAction_0() { return cARTISTModelAction_0; }

		//imports+=ImportNamespace*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//ImportNamespace
		public RuleCall getImportsImportNamespaceParserRuleCall_1_0() { return cImportsImportNamespaceParserRuleCall_1_0; }
	}

	public class WorkloadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Workload");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cActivityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActivityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActivityActivityCrossReference_3_0 = (CrossReference)cActivityAssignment_3.eContents().get(0);
		private final RuleCall cActivityActivityQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cActivityActivityCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cPatternKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPatternAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPatternSTRINGTerminalRuleCall_6_0 = (RuleCall)cPatternAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Workload:
		//	name=ID "{" "activity" activity=[uml::Activity|QualifiedName] "," "pattern" pattern=STRING "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" "activity" activity=[uml::Activity|QualifiedName] "," "pattern" pattern=STRING "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"activity"
		public Keyword getActivityKeyword_2() { return cActivityKeyword_2; }

		//activity=[uml::Activity|QualifiedName]
		public Assignment getActivityAssignment_3() { return cActivityAssignment_3; }

		//[uml::Activity|QualifiedName]
		public CrossReference getActivityActivityCrossReference_3_0() { return cActivityActivityCrossReference_3_0; }

		//QualifiedName
		public RuleCall getActivityActivityQualifiedNameParserRuleCall_3_0_1() { return cActivityActivityQualifiedNameParserRuleCall_3_0_1; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"pattern"
		public Keyword getPatternKeyword_5() { return cPatternKeyword_5; }

		//pattern=STRING
		public Assignment getPatternAssignment_6() { return cPatternAssignment_6; }

		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_6_0() { return cPatternSTRINGTerminalRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class ImportURIorNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportURIorNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportURIAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0_0 = (RuleCall)cImportURIAssignment_1_0.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_1_0 = (RuleCall)cImportedNamespaceAssignment_1_1.eContents().get(0);
		
		//ImportURIorNamespace:
		//	"import" (importURI=STRING | importedNamespace=QualifiedNameWithWildcard);
		public ParserRule getRule() { return rule; }

		//"import" (importURI=STRING | importedNamespace=QualifiedNameWithWildcard)
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING | importedNamespace=QualifiedNameWithWildcard
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1_0() { return cImportURIAssignment_1_0; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0_0() { return cImportURISTRINGTerminalRuleCall_1_0_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1_1() { return cImportedNamespaceAssignment_1_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_1_0; }
	}

	public class ImportURIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportURI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//ImportURI:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class ImportNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//ImportNamespace:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPOSITIVE_SMALL_DECIMALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSMALL_DECIMALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEBIGDECIMALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Number returns ecore::EBigDecimal:
		//	INT | POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL | EBIGDECIMAL;
		public ParserRule getRule() { return rule; }

		//INT | POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL | EBIGDECIMAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//POSITIVE_SMALL_DECIMAL
		public RuleCall getPOSITIVE_SMALL_DECIMALTerminalRuleCall_1() { return cPOSITIVE_SMALL_DECIMALTerminalRuleCall_1; }

		//SMALL_DECIMAL
		public RuleCall getSMALL_DECIMALTerminalRuleCall_2() { return cSMALL_DECIMALTerminalRuleCall_2; }

		//EBIGDECIMAL
		public RuleCall getEBIGDECIMALTerminalRuleCall_3() { return cEBIGDECIMALTerminalRuleCall_3; }
	}

	public class ImpactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Impact");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPOSITIVE_SMALL_DECIMALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSMALL_DECIMALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Impact returns ecore::EBigDecimal:
		//	POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL;
		public ParserRule getRule() { return rule; }

		//POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//POSITIVE_SMALL_DECIMAL
		public RuleCall getPOSITIVE_SMALL_DECIMALTerminalRuleCall_0() { return cPOSITIVE_SMALL_DECIMALTerminalRuleCall_0; }

		//SMALL_DECIMAL
		public RuleCall getSMALL_DECIMALTerminalRuleCall_1() { return cSMALL_DECIMALTerminalRuleCall_1; }
	}

	public class EBooleanObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBooleanObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNULLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEBOOLEANTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EBooleanObject returns ecore::EBooleanObject:
		//	NULL | EBOOLEAN;
		public ParserRule getRule() { return rule; }

		//NULL | EBOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }

		//NULL
		public RuleCall getNULLTerminalRuleCall_0() { return cNULLTerminalRuleCall_0; }

		//EBOOLEAN
		public RuleCall getEBOOLEANTerminalRuleCall_1() { return cEBOOLEANTerminalRuleCall_1; }
	}
	
	
	private ExpressionElements pExpression;
	private ImplicationElements pImplication;
	private DisjunctionElements pDisjunction;
	private ConjunctionElements pConjunction;
	private ComparisonElements pComparison;
	private BooleanUnitElements pBooleanUnit;
	private NegationElements pNegation;
	private RelationalExpressionElements pRelationalExpression;
	private ComparableExpressionElements pComparableExpression;
	private ArithmeticExpressionElements pArithmeticExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private NumberExpressionElements pNumberExpression;
	private NumberFunctionElements pNumberFunction;
	private MaximumFunctionElements pMaximumFunction;
	private MinimumFunctionElements pMinimumFunction;
	private AverageFunctionElements pAverageFunction;
	private SumFunctionElements pSumFunction;
	private ExponentialFunctionElements pExponentialFunction;
	private AbsoluteFunctionElements pAbsoluteFunction;
	private NaturalLogarithmFunctionElements pNaturalLogarithmFunction;
	private CommonLogarithmFunctionElements pCommonLogarithmFunction;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private ValueSpecificationElements pValueSpecification;
	private ObjectSpecificationExpressionElements pObjectSpecificationExpression;
	private CollectionElements pCollection;
	private TupleElements pTuple;
	private PropertyValuePairElements pPropertyValuePair;
	private InstanceSpecificationExpressionElements pInstanceSpecificationExpression;
	private LiteralValueExpressionElements pLiteralValueExpression;
	private BooleanLiteralElements pBooleanLiteral;
	private NumberLiteralElements pNumberLiteral;
	private NullLiteralElements pNullLiteral;
	private StringLiteralElements pStringLiteral;
	private UnlimitedLiteralElements pUnlimitedLiteral;
	private OrOperatorElements pOrOperator;
	private XOrOperatorElements pXOrOperator;
	private AndOperatorElements pAndOperator;
	private ImplicationOperatorElements pImplicationOperator;
	private EqualsOperatorElements pEqualsOperator;
	private NotEqualsOperatorElements pNotEqualsOperator;
	private NotOperatorElements pNotOperator;
	private GreaterThanOperatorElements pGreaterThanOperator;
	private GreaterOrEqualThanOperatorElements pGreaterOrEqualThanOperator;
	private LessThanOperatorElements pLessThanOperator;
	private LessOrEqualThanOperatorElements pLessOrEqualThanOperator;
	private AdditionOperatorElements pAdditionOperator;
	private SubstractionOperatorElements pSubstractionOperator;
	private MultiplicationOperatorElements pMultiplicationOperator;
	private DivisionOperatorElements pDivisionOperator;
	private ModulusOperatorElements pModulusOperator;
	private MaxOperatorElements pMaxOperator;
	private MinOperatorElements pMinOperator;
	private AvgOperatorElements pAvgOperator;
	private SumOperatorElements pSumOperator;
	private ExponentialOperatorElements pExponentialOperator;
	private AbsoluteOperatorElements pAbsoluteOperator;
	private NaturalLogarithmOperatorElements pNaturalLogarithmOperator;
	private CommonLogarithmOperatorElements pCommonLogarithmOperator;
	private LeftParenthesisElements pLeftParenthesis;
	private RightParenthesisElements pRightParenthesis;
	private QualifiedNameElements pQualifiedName;
	private ARTISTModelElements pARTISTModel;
	private WorkloadElements pWorkload;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private ImportURIorNamespaceElements pImportURIorNamespace;
	private ImportURIElements pImportURI;
	private ImportNamespaceElements pImportNamespace;
	private NumberElements pNumber;
	private ImpactElements pImpact;
	private EBooleanObjectElements pEBooleanObject;
	private TerminalRule tEBOOLEAN;
	private TerminalRule tNULL;
	private TerminalRule tINT;
	private TerminalRule tPOSITIVE_SMALL_DECIMAL;
	private TerminalRule tSMALL_DECIMAL;
	private TerminalRule tEBIGDECIMAL;
	private TerminalRule tID;
	private TerminalRule tDATE_TIME;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ARTISTCommonGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.artist.postmigration.nfrvt.lang.common.ARTISTCommon".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Expression:
	//	Implication;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Implication:
	//	Disjunction ({Implication.left=current} operator=ImplicationOperator right=Disjunction)*;
	public ImplicationElements getImplicationAccess() {
		return (pImplication != null) ? pImplication : (pImplication = new ImplicationElements());
	}
	
	public ParserRule getImplicationRule() {
		return getImplicationAccess().getRule();
	}

	//Disjunction:
	//	Conjunction ({Disjunction.left=current} operator=(OrOperator | XOrOperator) right=Conjunction)*;
	public DisjunctionElements getDisjunctionAccess() {
		return (pDisjunction != null) ? pDisjunction : (pDisjunction = new DisjunctionElements());
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}

	//Conjunction:
	//	Comparison ({Conjunction.left=current} operator=AndOperator right=Comparison)*;
	public ConjunctionElements getConjunctionAccess() {
		return (pConjunction != null) ? pConjunction : (pConjunction = new ConjunctionElements());
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Comparison:
	//	BooleanUnit ({Comparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=BooleanUnit)*;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//BooleanUnit:
	//	Negation | RelationalExpression | BooleanLiteral;
	public BooleanUnitElements getBooleanUnitAccess() {
		return (pBooleanUnit != null) ? pBooleanUnit : (pBooleanUnit = new BooleanUnitElements());
	}
	
	public ParserRule getBooleanUnitRule() {
		return getBooleanUnitAccess().getRule();
	}

	//Negation:
	//	operator=NotOperator value=BooleanUnit;
	public NegationElements getNegationAccess() {
		return (pNegation != null) ? pNegation : (pNegation = new NegationElements());
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//RelationalExpression:
	//	ComparableExpression (({RelationalExpression.left=current} operator=GreaterThanOperator |
	//	{RelationalExpression.left=current} operator=GreaterOrEqualThanOperator | {RelationalExpression.left=current}
	//	operator=LessOrEqualThanOperator | {RelationalExpression.left=current} operator=LessThanOperator)
	//	right=ComparableExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//ComparableExpression:
	//	ArithmeticExpression | InstanceSpecificationExpression | ObjectSpecificationExpression | NullLiteral | StringLiteral
	//	| UnlimitedLiteral | ParenthesizedExpression;
	public ComparableExpressionElements getComparableExpressionAccess() {
		return (pComparableExpression != null) ? pComparableExpression : (pComparableExpression = new ComparableExpressionElements());
	}
	
	public ParserRule getComparableExpressionRule() {
		return getComparableExpressionAccess().getRule();
	}

	//ArithmeticExpression:
	//	AdditiveExpression;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return (pArithmeticExpression != null) ? pArithmeticExpression : (pArithmeticExpression = new ArithmeticExpressionElements());
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}

	//AdditiveExpression:
	//	MultiplicativeExpression ({AdditiveExpression.left=current} operator=(SubstractionOperator | AdditionOperator)
	//	right=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression:
	//	NumberExpression ({MultiplicativeExpression.left=current} operator=(MultiplicationOperator | DivisionOperator |
	//	ModulusOperator) right=NumberExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//NumberExpression:
	//	NumberLiteral | NumberFunction;
	public NumberExpressionElements getNumberExpressionAccess() {
		return (pNumberExpression != null) ? pNumberExpression : (pNumberExpression = new NumberExpressionElements());
	}
	
	public ParserRule getNumberExpressionRule() {
		return getNumberExpressionAccess().getRule();
	}

	//NumberFunction:
	//	MaximumFunction | MinimumFunction | AverageFunction | SumFunction | ExponentialFunction | AbsoluteFunction |
	//	NaturalLogarithmFunction | CommonLogarithmFunction;
	public NumberFunctionElements getNumberFunctionAccess() {
		return (pNumberFunction != null) ? pNumberFunction : (pNumberFunction = new NumberFunctionElements());
	}
	
	public ParserRule getNumberFunctionRule() {
		return getNumberFunctionAccess().getRule();
	}

	//MaximumFunction:
	//	operator=MaxOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public MaximumFunctionElements getMaximumFunctionAccess() {
		return (pMaximumFunction != null) ? pMaximumFunction : (pMaximumFunction = new MaximumFunctionElements());
	}
	
	public ParserRule getMaximumFunctionRule() {
		return getMaximumFunctionAccess().getRule();
	}

	//MinimumFunction:
	//	operator=MinOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public MinimumFunctionElements getMinimumFunctionAccess() {
		return (pMinimumFunction != null) ? pMinimumFunction : (pMinimumFunction = new MinimumFunctionElements());
	}
	
	public ParserRule getMinimumFunctionRule() {
		return getMinimumFunctionAccess().getRule();
	}

	//AverageFunction:
	//	operator=AvgOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public AverageFunctionElements getAverageFunctionAccess() {
		return (pAverageFunction != null) ? pAverageFunction : (pAverageFunction = new AverageFunctionElements());
	}
	
	public ParserRule getAverageFunctionRule() {
		return getAverageFunctionAccess().getRule();
	}

	//SumFunction:
	//	operator=SumOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public SumFunctionElements getSumFunctionAccess() {
		return (pSumFunction != null) ? pSumFunction : (pSumFunction = new SumFunctionElements());
	}
	
	public ParserRule getSumFunctionRule() {
		return getSumFunctionAccess().getRule();
	}

	//ExponentialFunction:
	//	operator=ExponentialOperator "(" base=NumberExpression "," exponent=NumberExpression ")";
	public ExponentialFunctionElements getExponentialFunctionAccess() {
		return (pExponentialFunction != null) ? pExponentialFunction : (pExponentialFunction = new ExponentialFunctionElements());
	}
	
	public ParserRule getExponentialFunctionRule() {
		return getExponentialFunctionAccess().getRule();
	}

	//AbsoluteFunction:
	//	operator=AbsoluteOperator "(" value=NumberExpression ")";
	public AbsoluteFunctionElements getAbsoluteFunctionAccess() {
		return (pAbsoluteFunction != null) ? pAbsoluteFunction : (pAbsoluteFunction = new AbsoluteFunctionElements());
	}
	
	public ParserRule getAbsoluteFunctionRule() {
		return getAbsoluteFunctionAccess().getRule();
	}

	//NaturalLogarithmFunction:
	//	operator=NaturalLogarithmOperator "(" value=NumberExpression ")";
	public NaturalLogarithmFunctionElements getNaturalLogarithmFunctionAccess() {
		return (pNaturalLogarithmFunction != null) ? pNaturalLogarithmFunction : (pNaturalLogarithmFunction = new NaturalLogarithmFunctionElements());
	}
	
	public ParserRule getNaturalLogarithmFunctionRule() {
		return getNaturalLogarithmFunctionAccess().getRule();
	}

	//CommonLogarithmFunction:
	//	operator=CommonLogarithmOperator "(" value=NumberExpression ")";
	public CommonLogarithmFunctionElements getCommonLogarithmFunctionAccess() {
		return (pCommonLogarithmFunction != null) ? pCommonLogarithmFunction : (pCommonLogarithmFunction = new CommonLogarithmFunctionElements());
	}
	
	public ParserRule getCommonLogarithmFunctionRule() {
		return getCommonLogarithmFunctionAccess().getRule();
	}

	//ParenthesizedExpression:
	//	LeftParenthesis value=Expression RightParenthesis;
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//ValueSpecification:
	//	LiteralValueExpression | InstanceSpecificationExpression | ObjectSpecificationExpression;
	public ValueSpecificationElements getValueSpecificationAccess() {
		return (pValueSpecification != null) ? pValueSpecification : (pValueSpecification = new ValueSpecificationElements());
	}
	
	public ParserRule getValueSpecificationRule() {
		return getValueSpecificationAccess().getRule();
	}

	//ObjectSpecificationExpression:
	//	type=[uml::DataType|QualifiedName] (value=Collection | value=Tuple);
	public ObjectSpecificationExpressionElements getObjectSpecificationExpressionAccess() {
		return (pObjectSpecificationExpression != null) ? pObjectSpecificationExpression : (pObjectSpecificationExpression = new ObjectSpecificationExpressionElements());
	}
	
	public ParserRule getObjectSpecificationExpressionRule() {
		return getObjectSpecificationExpressionAccess().getRule();
	}

	//Collection:
	//	{Collection} "[" (values+=ValueSpecification ("," values+=ValueSpecification)*)? "]";
	public CollectionElements getCollectionAccess() {
		return (pCollection != null) ? pCollection : (pCollection = new CollectionElements());
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}

	//Tuple:
	//	{Tuple} "{" (tuples+=PropertyValuePair ("," tuples+=PropertyValuePair)*)? "}";
	public TupleElements getTupleAccess() {
		return (pTuple != null) ? pTuple : (pTuple = new TupleElements());
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}

	//PropertyValuePair:
	//	property=[uml::Property|QualifiedName] "=" value=ValueSpecification;
	public PropertyValuePairElements getPropertyValuePairAccess() {
		return (pPropertyValuePair != null) ? pPropertyValuePair : (pPropertyValuePair = new PropertyValuePairElements());
	}
	
	public ParserRule getPropertyValuePairRule() {
		return getPropertyValuePairAccess().getRule();
	}

	//InstanceSpecificationExpression:
	//	value=[uml::InstanceSpecification|QualifiedName];
	public InstanceSpecificationExpressionElements getInstanceSpecificationExpressionAccess() {
		return (pInstanceSpecificationExpression != null) ? pInstanceSpecificationExpression : (pInstanceSpecificationExpression = new InstanceSpecificationExpressionElements());
	}
	
	public ParserRule getInstanceSpecificationExpressionRule() {
		return getInstanceSpecificationExpressionAccess().getRule();
	}

	//LiteralValueExpression:
	//	NumberLiteral | BooleanLiteral | NullLiteral | StringLiteral | UnlimitedLiteral;
	public LiteralValueExpressionElements getLiteralValueExpressionAccess() {
		return (pLiteralValueExpression != null) ? pLiteralValueExpression : (pLiteralValueExpression = new LiteralValueExpressionElements());
	}
	
	public ParserRule getLiteralValueExpressionRule() {
		return getLiteralValueExpressionAccess().getRule();
	}

	//BooleanLiteral:
	//	value=EBOOLEAN;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NumberLiteral:
	//	value=Number;
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//NullLiteral:
	//	value=NULL;
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//UnlimitedLiteral:
	//	value="*";
	public UnlimitedLiteralElements getUnlimitedLiteralAccess() {
		return (pUnlimitedLiteral != null) ? pUnlimitedLiteral : (pUnlimitedLiteral = new UnlimitedLiteralElements());
	}
	
	public ParserRule getUnlimitedLiteralRule() {
		return getUnlimitedLiteralAccess().getRule();
	}

	//OrOperator returns Operator:
	//	{OrOperator} ("or" | "||");
	public OrOperatorElements getOrOperatorAccess() {
		return (pOrOperator != null) ? pOrOperator : (pOrOperator = new OrOperatorElements());
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//XOrOperator returns Operator:
	//	{XOrOperator} ("xor" | "^");
	public XOrOperatorElements getXOrOperatorAccess() {
		return (pXOrOperator != null) ? pXOrOperator : (pXOrOperator = new XOrOperatorElements());
	}
	
	public ParserRule getXOrOperatorRule() {
		return getXOrOperatorAccess().getRule();
	}

	//AndOperator returns Operator:
	//	{AndOperator} ("and" | "&&");
	public AndOperatorElements getAndOperatorAccess() {
		return (pAndOperator != null) ? pAndOperator : (pAndOperator = new AndOperatorElements());
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//ImplicationOperator returns Operator:
	//	{ImplicationOperator} ("=>" | "->");
	public ImplicationOperatorElements getImplicationOperatorAccess() {
		return (pImplicationOperator != null) ? pImplicationOperator : (pImplicationOperator = new ImplicationOperatorElements());
	}
	
	public ParserRule getImplicationOperatorRule() {
		return getImplicationOperatorAccess().getRule();
	}

	//EqualsOperator returns Operator:
	//	{EqualsOperator} "==";
	public EqualsOperatorElements getEqualsOperatorAccess() {
		return (pEqualsOperator != null) ? pEqualsOperator : (pEqualsOperator = new EqualsOperatorElements());
	}
	
	public ParserRule getEqualsOperatorRule() {
		return getEqualsOperatorAccess().getRule();
	}

	//NotEqualsOperator returns Operator:
	//	{NotEqualsOperator} ("!=" | "<>");
	public NotEqualsOperatorElements getNotEqualsOperatorAccess() {
		return (pNotEqualsOperator != null) ? pNotEqualsOperator : (pNotEqualsOperator = new NotEqualsOperatorElements());
	}
	
	public ParserRule getNotEqualsOperatorRule() {
		return getNotEqualsOperatorAccess().getRule();
	}

	//NotOperator returns Operator:
	//	{NotOperator} ("!" | "not");
	public NotOperatorElements getNotOperatorAccess() {
		return (pNotOperator != null) ? pNotOperator : (pNotOperator = new NotOperatorElements());
	}
	
	public ParserRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//GreaterThanOperator returns Operator:
	//	{GreaterThanOperator} ">";
	public GreaterThanOperatorElements getGreaterThanOperatorAccess() {
		return (pGreaterThanOperator != null) ? pGreaterThanOperator : (pGreaterThanOperator = new GreaterThanOperatorElements());
	}
	
	public ParserRule getGreaterThanOperatorRule() {
		return getGreaterThanOperatorAccess().getRule();
	}

	//GreaterOrEqualThanOperator returns Operator:
	//	{GreaterOrEqualThanOperator} ">=";
	public GreaterOrEqualThanOperatorElements getGreaterOrEqualThanOperatorAccess() {
		return (pGreaterOrEqualThanOperator != null) ? pGreaterOrEqualThanOperator : (pGreaterOrEqualThanOperator = new GreaterOrEqualThanOperatorElements());
	}
	
	public ParserRule getGreaterOrEqualThanOperatorRule() {
		return getGreaterOrEqualThanOperatorAccess().getRule();
	}

	//LessThanOperator returns Operator:
	//	{LessThanOperator} "<";
	public LessThanOperatorElements getLessThanOperatorAccess() {
		return (pLessThanOperator != null) ? pLessThanOperator : (pLessThanOperator = new LessThanOperatorElements());
	}
	
	public ParserRule getLessThanOperatorRule() {
		return getLessThanOperatorAccess().getRule();
	}

	//LessOrEqualThanOperator returns Operator:
	//	{LessOrEqualThanOperator} "<=";
	public LessOrEqualThanOperatorElements getLessOrEqualThanOperatorAccess() {
		return (pLessOrEqualThanOperator != null) ? pLessOrEqualThanOperator : (pLessOrEqualThanOperator = new LessOrEqualThanOperatorElements());
	}
	
	public ParserRule getLessOrEqualThanOperatorRule() {
		return getLessOrEqualThanOperatorAccess().getRule();
	}

	//AdditionOperator returns Operator:
	//	{AdditionOperator} "+";
	public AdditionOperatorElements getAdditionOperatorAccess() {
		return (pAdditionOperator != null) ? pAdditionOperator : (pAdditionOperator = new AdditionOperatorElements());
	}
	
	public ParserRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}

	//SubstractionOperator returns Operator:
	//	{SubstractionOperator} "-";
	public SubstractionOperatorElements getSubstractionOperatorAccess() {
		return (pSubstractionOperator != null) ? pSubstractionOperator : (pSubstractionOperator = new SubstractionOperatorElements());
	}
	
	public ParserRule getSubstractionOperatorRule() {
		return getSubstractionOperatorAccess().getRule();
	}

	//MultiplicationOperator returns Operator:
	//	{MultiplicationOperator} "*";
	public MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return (pMultiplicationOperator != null) ? pMultiplicationOperator : (pMultiplicationOperator = new MultiplicationOperatorElements());
	}
	
	public ParserRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}

	//DivisionOperator returns Operator:
	//	{DivisionOperator} "/";
	public DivisionOperatorElements getDivisionOperatorAccess() {
		return (pDivisionOperator != null) ? pDivisionOperator : (pDivisionOperator = new DivisionOperatorElements());
	}
	
	public ParserRule getDivisionOperatorRule() {
		return getDivisionOperatorAccess().getRule();
	}

	//ModulusOperator returns Operator:
	//	{ModulusOperator} "%";
	public ModulusOperatorElements getModulusOperatorAccess() {
		return (pModulusOperator != null) ? pModulusOperator : (pModulusOperator = new ModulusOperatorElements());
	}
	
	public ParserRule getModulusOperatorRule() {
		return getModulusOperatorAccess().getRule();
	}

	//MaxOperator returns Operator:
	//	{MaxOperator} "max";
	public MaxOperatorElements getMaxOperatorAccess() {
		return (pMaxOperator != null) ? pMaxOperator : (pMaxOperator = new MaxOperatorElements());
	}
	
	public ParserRule getMaxOperatorRule() {
		return getMaxOperatorAccess().getRule();
	}

	//MinOperator returns Operator:
	//	{MinOperator} "min";
	public MinOperatorElements getMinOperatorAccess() {
		return (pMinOperator != null) ? pMinOperator : (pMinOperator = new MinOperatorElements());
	}
	
	public ParserRule getMinOperatorRule() {
		return getMinOperatorAccess().getRule();
	}

	//AvgOperator returns Operator:
	//	{AvgOperator} "avg";
	public AvgOperatorElements getAvgOperatorAccess() {
		return (pAvgOperator != null) ? pAvgOperator : (pAvgOperator = new AvgOperatorElements());
	}
	
	public ParserRule getAvgOperatorRule() {
		return getAvgOperatorAccess().getRule();
	}

	//SumOperator returns Operator:
	//	{SumOperator} "sum";
	public SumOperatorElements getSumOperatorAccess() {
		return (pSumOperator != null) ? pSumOperator : (pSumOperator = new SumOperatorElements());
	}
	
	public ParserRule getSumOperatorRule() {
		return getSumOperatorAccess().getRule();
	}

	//ExponentialOperator returns Operator:
	//	{ExponentialOperator} "exp";
	public ExponentialOperatorElements getExponentialOperatorAccess() {
		return (pExponentialOperator != null) ? pExponentialOperator : (pExponentialOperator = new ExponentialOperatorElements());
	}
	
	public ParserRule getExponentialOperatorRule() {
		return getExponentialOperatorAccess().getRule();
	}

	//AbsoluteOperator returns Operator:
	//	{AbsoluteOperator} "abs";
	public AbsoluteOperatorElements getAbsoluteOperatorAccess() {
		return (pAbsoluteOperator != null) ? pAbsoluteOperator : (pAbsoluteOperator = new AbsoluteOperatorElements());
	}
	
	public ParserRule getAbsoluteOperatorRule() {
		return getAbsoluteOperatorAccess().getRule();
	}

	//NaturalLogarithmOperator returns Operator:
	//	{NaturalLogarithmOperator} "ln";
	public NaturalLogarithmOperatorElements getNaturalLogarithmOperatorAccess() {
		return (pNaturalLogarithmOperator != null) ? pNaturalLogarithmOperator : (pNaturalLogarithmOperator = new NaturalLogarithmOperatorElements());
	}
	
	public ParserRule getNaturalLogarithmOperatorRule() {
		return getNaturalLogarithmOperatorAccess().getRule();
	}

	//CommonLogarithmOperator returns Operator:
	//	{CommonLogarithmOperator} "log";
	public CommonLogarithmOperatorElements getCommonLogarithmOperatorAccess() {
		return (pCommonLogarithmOperator != null) ? pCommonLogarithmOperator : (pCommonLogarithmOperator = new CommonLogarithmOperatorElements());
	}
	
	public ParserRule getCommonLogarithmOperatorRule() {
		return getCommonLogarithmOperatorAccess().getRule();
	}

	//LeftParenthesis:
	//	"(";
	public LeftParenthesisElements getLeftParenthesisAccess() {
		return (pLeftParenthesis != null) ? pLeftParenthesis : (pLeftParenthesis = new LeftParenthesisElements());
	}
	
	public ParserRule getLeftParenthesisRule() {
		return getLeftParenthesisAccess().getRule();
	}

	//RightParenthesis:
	//	")";
	public RightParenthesisElements getRightParenthesisAccess() {
		return (pRightParenthesis != null) ? pRightParenthesis : (pRightParenthesis = new RightParenthesisElements());
	}
	
	public ParserRule getRightParenthesisRule() {
		return getRightParenthesisAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ARTISTModel:
	//	{ARTISTModel} imports+=ImportNamespace*;
	public ARTISTModelElements getARTISTModelAccess() {
		return (pARTISTModel != null) ? pARTISTModel : (pARTISTModel = new ARTISTModelElements());
	}
	
	public ParserRule getARTISTModelRule() {
		return getARTISTModelAccess().getRule();
	}

	//Workload:
	//	name=ID "{" "activity" activity=[uml::Activity|QualifiedName] "," "pattern" pattern=STRING "}";
	public WorkloadElements getWorkloadAccess() {
		return (pWorkload != null) ? pWorkload : (pWorkload = new WorkloadElements());
	}
	
	public ParserRule getWorkloadRule() {
		return getWorkloadAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ImportURIorNamespace:
	//	"import" (importURI=STRING | importedNamespace=QualifiedNameWithWildcard);
	public ImportURIorNamespaceElements getImportURIorNamespaceAccess() {
		return (pImportURIorNamespace != null) ? pImportURIorNamespace : (pImportURIorNamespace = new ImportURIorNamespaceElements());
	}
	
	public ParserRule getImportURIorNamespaceRule() {
		return getImportURIorNamespaceAccess().getRule();
	}

	//ImportURI:
	//	"import" importURI=STRING;
	public ImportURIElements getImportURIAccess() {
		return (pImportURI != null) ? pImportURI : (pImportURI = new ImportURIElements());
	}
	
	public ParserRule getImportURIRule() {
		return getImportURIAccess().getRule();
	}

	//ImportNamespace:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportNamespaceElements getImportNamespaceAccess() {
		return (pImportNamespace != null) ? pImportNamespace : (pImportNamespace = new ImportNamespaceElements());
	}
	
	public ParserRule getImportNamespaceRule() {
		return getImportNamespaceAccess().getRule();
	}

	//Number returns ecore::EBigDecimal:
	//	INT | POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL | EBIGDECIMAL;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Impact returns ecore::EBigDecimal:
	//	POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL;
	public ImpactElements getImpactAccess() {
		return (pImpact != null) ? pImpact : (pImpact = new ImpactElements());
	}
	
	public ParserRule getImpactRule() {
		return getImpactAccess().getRule();
	}

	//EBooleanObject returns ecore::EBooleanObject:
	//	NULL | EBOOLEAN;
	public EBooleanObjectElements getEBooleanObjectAccess() {
		return (pEBooleanObject != null) ? pEBooleanObject : (pEBooleanObject = new EBooleanObjectElements());
	}
	
	public ParserRule getEBooleanObjectRule() {
		return getEBooleanObjectAccess().getRule();
	}

	//terminal EBOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getEBOOLEANRule() {
		return (tEBOOLEAN != null) ? tEBOOLEAN : (tEBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EBOOLEAN"));
	} 

	//terminal NULL:
	//	"null";
	public TerminalRule getNULLRule() {
		return (tNULL != null) ? tNULL : (tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NULL"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal POSITIVE_SMALL_DECIMAL returns ecore::EBigDecimal:
	//	"1" ("." "0"+)? | "0" ("." "0".."9"+)? | "." "0".."9"+;
	public TerminalRule getPOSITIVE_SMALL_DECIMALRule() {
		return (tPOSITIVE_SMALL_DECIMAL != null) ? tPOSITIVE_SMALL_DECIMAL : (tPOSITIVE_SMALL_DECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POSITIVE_SMALL_DECIMAL"));
	} 

	//terminal SMALL_DECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? POSITIVE_SMALL_DECIMAL;
	public TerminalRule getSMALL_DECIMALRule() {
		return (tSMALL_DECIMAL != null) ? tSMALL_DECIMAL : (tSMALL_DECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMALL_DECIMAL"));
	} 

	//terminal EBIGDECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? (INT | "." INT | INT "." INT);
	public TerminalRule getEBIGDECIMALRule() {
		return (tEBIGDECIMAL != null) ? tEBIGDECIMAL : (tEBIGDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EBIGDECIMAL"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "Â§") ("a".."z" | "A".."Z" |
	//	"_" | "0".."9" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "Â§")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal DATE_TIME returns ecore::EDate: // time zone not working: (('+'|'-') INT ((':' INT) | INT)?)?
	//	INT "-" INT "-" INT ("T" INT ":" INT (":" INT ("." INT)?)?)?;
	public TerminalRule getDATE_TIMERule() {
		return (tDATE_TIME != null) ? tDATE_TIME : (tDATE_TIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE_TIME"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
