/*******************************************************************************
 * Copyright (c) 2014 Vienna University of Technology.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Martin Fleck (Vienna University of Technology) - initial API and implementation
 *
 * Initially developed in the context of ARTIST EU project www.artist-project.eu
 *******************************************************************************/
grammar eu.artist.postmigration.nfrvt.lang.gel.GEL with eu.artist.postmigration.nfrvt.lang.common.ARTISTCommon

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/uml2/4.0.0/UML" as uml
import "http://www.artist.eu/postmigration/nfrvt/lang/common/ARTISTCommon" as common
import "http://www.artist.eu/postmigration/nfrvt/lang/nsl/NSL" as nsl
import "http://www.artist.eu/postmigration/nfrvt/lang/tsl/TSL" as tsl
import "http://www.artist.eu/postmigration/nfrvt/lang/gml/GML" as gml
import "http://www.artist.eu/postmigration/nfrvt/lang/pml/PML" as pml

generate gel "http://www.artist.eu/postmigration/nfrvt/lang/gel/GEL"

ARTISTModel returns common::ARTISTModel:
	MigrationEvaluation
;

MigrationEvaluation:
	imports += ImportNamespace*
	"evaluation" name = QualifiedName "{"
		"date" date = DATE_TIME ","
		"migration" "["
			(transformations += Transformation)*
		"]" ","
		"property-evaluations" "["
			(propertyEvaluations  += AppliedPropertyEvaluation)*
		"]" ","
		evaluation = GoalModelEvaluation		
	"}"
	;

Transformation:
	"transformation" name = ID "{"
		"pattern" pattern = [tsl::Pattern | QualifiedName]
		("," "source" "["
			(source += [uml::NamedElement | QualifiedName])*
		"]")?
		("," "target" "["
			(target += [uml::NamedElement | QualifiedName])*
		"]")?
		("," "context" "["
			(context += [uml::NamedElement | QualifiedName])*
		"]")?
		("," "info" info = STRING)?
	"}"	
;

AppliedPropertyEvaluation:
	AppliedQualitativePropertyEvaluation | AppliedQuantitativePropertyEvaluation
;

AppliedQualitativePropertyEvaluation:
	"qualitative" name = ID "{"
		"property" property = [gml::AppliedQualitativeProperty | QualifiedName] ","
		"value" value = ValueSpecification ","
		evaluation = NumberExpressionEvaluation
	"}"
;

AppliedQuantitativePropertyEvaluation:
	"quantitative" name = ID "{"
		"property" property = [gml::AppliedQuantitativeProperty | QualifiedName] ","
		"value" value = ValueSpecification ","
		evaluation = ValueExpressionEvaluation 
		("," "measurements" "[" 
			(measurements += [pml::Measurement | QualifiedName] ("," measurements += [pml::Measurement | QualifiedName])*)?
		"]")?
	"}"
;

GoalModelEvaluation:
	"goalmodel-evaluation" "{"
		"goalmodel" goalModel = [gml::GoalModel | QualifiedName] ","
		"verdict" verdict = Verdict ","
		"reason" reason = STRING ","
		"goal-evaluations" "["
			(evaluations += GoalEvaluation)*
		"]"
	"}"
;

GoalEvaluation:
	SoftGoalEvaluation | HardGoalEvaluation | CompositeGoalEvaluation
;

SoftGoalEvaluation returns SoftGoalEvaluation:
	"soft-goal-evaluation" name = ID "{"
		"goal" goal = [gml::SoftGoal | QualifiedName] ","
		"verdict" verdict = Verdict ","
		"reason" reason = STRING 
		"," "difference" difference = Number?
	"}"
;

HardGoalEvaluation returns HardGoalEvaluation:
	"hard-goal-evaluation" name = ID "{"
		"goal" goal = [gml::HardGoal | QualifiedName] ","
		"verdict" verdict = Verdict ","
		"reason" reason = STRING "," 
		"condition-evaluation" conditionEvaluation = BooleanExpressionEvaluation
	"}"
;

CompositeGoalEvaluation returns CompositeGoalEvaluation:
	"composite-goal-evaluation" name = ID "{"
		"goal" goal = [gml::CompositeGoal | QualifiedName] ","
		"verdict" verdict = Verdict ","
		"reason" reason = STRING ","
		"condition-evaluation" conditionEvaluation = BooleanExpressionEvaluation
	"}"
;

ValueExpressionEvaluation:
	ValueSpecificationExpressionEvaluation |
	BooleanExpressionEvaluation |
	NumberExpressionEvaluation
;

ValueSpecificationExpressionEvaluation:
	"value-evaluation" "{"
		"result" result = ValueSpecification? ","
		"reason" reason = STRING
		("," "evaluations" "[" evaluations += ValueExpressionEvaluation* "]")? 
	"}"
;

BooleanExpressionEvaluation:
	"expression-evaluation" "{" // expression = [gml::ValueExpression | STRING ] "{"
		("result" result = BooleanLiteral? ",")?
		"reason" reason = STRING 
		("," "difference" difference = Number?)?
		("," "evaluations" "[" evaluations += ValueExpressionEvaluation* "]")? 
	"}"
;

NumberExpressionEvaluation:
	"arithmetic-evaluation" "{" // expression = [gml::ArithmeticExpression | STRING ] "{"
		"result" result = NumberLiteral? ","
		"reason" reason = STRING (","
		"arithmetic-evaluations" "["
			evaluations += NumberExpressionEvaluation*
		"]")?
	"}"
;


enum Verdict returns Verdict:
	PASS = "PASS" | FAIL = "FAIL" | INCONCLUSIVE = "INCONCLUSIVE";