/*
* generated by Xtext
*/
package eu.artist.postmigration.nfrvt.lang.tsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import eu.artist.postmigration.nfrvt.lang.common.services.ARTISTCommonGrammarAccess;

@Singleton
public class TSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ARTISTModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARTISTModel");
		private final RuleCall cPatternCatalogueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ARTISTModel returns common::ARTISTModel:
		//	PatternCatalogue;
		public ParserRule getRule() { return rule; }

		//PatternCatalogue
		public RuleCall getPatternCatalogueParserRuleCall() { return cPatternCatalogueParserRuleCall; }
	}

	public class PatternCatalogueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternCatalogue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportNamespaceParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cPatternCatalogueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPatternsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPatternsPatternParserRuleCall_4_0 = (RuleCall)cPatternsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PatternCatalogue:
		//	imports+=ImportNamespace* "pattern-catalogue" name=QualifiedName "{" patterns+=Pattern* "}";
		public ParserRule getRule() { return rule; }

		//imports+=ImportNamespace* "pattern-catalogue" name=QualifiedName "{" patterns+=Pattern* "}"
		public Group getGroup() { return cGroup; }

		//imports+=ImportNamespace*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//ImportNamespace
		public RuleCall getImportsImportNamespaceParserRuleCall_0_0() { return cImportsImportNamespaceParserRuleCall_0_0; }

		//"pattern-catalogue"
		public Keyword getPatternCatalogueKeyword_1() { return cPatternCatalogueKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//patterns+=Pattern*
		public Assignment getPatternsAssignment_4() { return cPatternsAssignment_4; }

		//Pattern
		public RuleCall getPatternsPatternParserRuleCall_4_0() { return cPatternsPatternParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cContextKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContextSTRINGTerminalRuleCall_4_0 = (RuleCall)cContextAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cProblemKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cProblemAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cProblemSTRINGTerminalRuleCall_7_0 = (RuleCall)cProblemAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSolutionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSolutionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSolutionSTRINGTerminalRuleCall_10_0 = (RuleCall)cSolutionAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cPropertyImpactsKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cPropertyImpactsAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cPropertyImpactsPropertyImpactParserRuleCall_11_3_0 = (RuleCall)cPropertyImpactsAssignment_11_3.eContents().get(0);
		private final Group cGroup_11_4 = (Group)cGroup_11.eContents().get(4);
		private final Keyword cCommaKeyword_11_4_0 = (Keyword)cGroup_11_4.eContents().get(0);
		private final Assignment cPropertyImpactsAssignment_11_4_1 = (Assignment)cGroup_11_4.eContents().get(1);
		private final RuleCall cPropertyImpactsPropertyImpactParserRuleCall_11_4_1_0 = (RuleCall)cPropertyImpactsAssignment_11_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11_5 = (Keyword)cGroup_11.eContents().get(5);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cPatternImpactsKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Assignment cPatternImpactsAssignment_12_3 = (Assignment)cGroup_12.eContents().get(3);
		private final RuleCall cPatternImpactsPatternImpactParserRuleCall_12_3_0 = (RuleCall)cPatternImpactsAssignment_12_3.eContents().get(0);
		private final Group cGroup_12_4 = (Group)cGroup_12.eContents().get(4);
		private final Keyword cCommaKeyword_12_4_0 = (Keyword)cGroup_12_4.eContents().get(0);
		private final Assignment cPatternImpactsAssignment_12_4_1 = (Assignment)cGroup_12_4.eContents().get(1);
		private final RuleCall cPatternImpactsPatternImpactParserRuleCall_12_4_1_0 = (RuleCall)cPatternImpactsAssignment_12_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_12_5 = (Keyword)cGroup_12.eContents().get(5);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cRelatedPatternsKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cRelatedPatternsAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final CrossReference cRelatedPatternsPatternCrossReference_13_3_0 = (CrossReference)cRelatedPatternsAssignment_13_3.eContents().get(0);
		private final RuleCall cRelatedPatternsPatternQualifiedNameParserRuleCall_13_3_0_1 = (RuleCall)cRelatedPatternsPatternCrossReference_13_3_0.eContents().get(1);
		private final Group cGroup_13_4 = (Group)cGroup_13.eContents().get(4);
		private final Keyword cCommaKeyword_13_4_0 = (Keyword)cGroup_13_4.eContents().get(0);
		private final Assignment cRelatedPatternsAssignment_13_4_1 = (Assignment)cGroup_13_4.eContents().get(1);
		private final CrossReference cRelatedPatternsPatternCrossReference_13_4_1_0 = (CrossReference)cRelatedPatternsAssignment_13_4_1.eContents().get(0);
		private final RuleCall cRelatedPatternsPatternQualifiedNameParserRuleCall_13_4_1_0_1 = (RuleCall)cRelatedPatternsPatternCrossReference_13_4_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_13_5 = (Keyword)cGroup_13.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Pattern:
		//	"pattern" name=ID "{" "context" context=STRING "," "problem" problem=STRING "," "solution" solution=STRING (","
		//	"property-impacts" "[" propertyImpacts+=PropertyImpact ("," propertyImpacts+=PropertyImpact)* "]")? (","
		//	"pattern-impacts" "[" patternImpacts+=PatternImpact ("," patternImpacts+=PatternImpact)* "]")? (","
		//	"related-patterns" "[" relatedPatterns+=[Pattern|QualifiedName] ("," relatedPatterns+=[Pattern|QualifiedName])* "]")?
		//	"}";
		public ParserRule getRule() { return rule; }

		//"pattern" name=ID "{" "context" context=STRING "," "problem" problem=STRING "," "solution" solution=STRING (","
		//"property-impacts" "[" propertyImpacts+=PropertyImpact ("," propertyImpacts+=PropertyImpact)* "]")? (","
		//"pattern-impacts" "[" patternImpacts+=PatternImpact ("," patternImpacts+=PatternImpact)* "]")? ("," "related-patterns"
		//"[" relatedPatterns+=[Pattern|QualifiedName] ("," relatedPatterns+=[Pattern|QualifiedName])* "]")? "}"
		public Group getGroup() { return cGroup; }

		//"pattern"
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"context"
		public Keyword getContextKeyword_3() { return cContextKeyword_3; }

		//context=STRING
		public Assignment getContextAssignment_4() { return cContextAssignment_4; }

		//STRING
		public RuleCall getContextSTRINGTerminalRuleCall_4_0() { return cContextSTRINGTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"problem"
		public Keyword getProblemKeyword_6() { return cProblemKeyword_6; }

		//problem=STRING
		public Assignment getProblemAssignment_7() { return cProblemAssignment_7; }

		//STRING
		public RuleCall getProblemSTRINGTerminalRuleCall_7_0() { return cProblemSTRINGTerminalRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//"solution"
		public Keyword getSolutionKeyword_9() { return cSolutionKeyword_9; }

		//solution=STRING
		public Assignment getSolutionAssignment_10() { return cSolutionAssignment_10; }

		//STRING
		public RuleCall getSolutionSTRINGTerminalRuleCall_10_0() { return cSolutionSTRINGTerminalRuleCall_10_0; }

		//("," "property-impacts" "[" propertyImpacts+=PropertyImpact ("," propertyImpacts+=PropertyImpact)* "]")?
		public Group getGroup_11() { return cGroup_11; }

		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }

		//"property-impacts"
		public Keyword getPropertyImpactsKeyword_11_1() { return cPropertyImpactsKeyword_11_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_11_2() { return cLeftSquareBracketKeyword_11_2; }

		//propertyImpacts+=PropertyImpact
		public Assignment getPropertyImpactsAssignment_11_3() { return cPropertyImpactsAssignment_11_3; }

		//PropertyImpact
		public RuleCall getPropertyImpactsPropertyImpactParserRuleCall_11_3_0() { return cPropertyImpactsPropertyImpactParserRuleCall_11_3_0; }

		//("," propertyImpacts+=PropertyImpact)*
		public Group getGroup_11_4() { return cGroup_11_4; }

		//","
		public Keyword getCommaKeyword_11_4_0() { return cCommaKeyword_11_4_0; }

		//propertyImpacts+=PropertyImpact
		public Assignment getPropertyImpactsAssignment_11_4_1() { return cPropertyImpactsAssignment_11_4_1; }

		//PropertyImpact
		public RuleCall getPropertyImpactsPropertyImpactParserRuleCall_11_4_1_0() { return cPropertyImpactsPropertyImpactParserRuleCall_11_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_11_5() { return cRightSquareBracketKeyword_11_5; }

		//("," "pattern-impacts" "[" patternImpacts+=PatternImpact ("," patternImpacts+=PatternImpact)* "]")?
		public Group getGroup_12() { return cGroup_12; }

		//","
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }

		//"pattern-impacts"
		public Keyword getPatternImpactsKeyword_12_1() { return cPatternImpactsKeyword_12_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_12_2() { return cLeftSquareBracketKeyword_12_2; }

		//patternImpacts+=PatternImpact
		public Assignment getPatternImpactsAssignment_12_3() { return cPatternImpactsAssignment_12_3; }

		//PatternImpact
		public RuleCall getPatternImpactsPatternImpactParserRuleCall_12_3_0() { return cPatternImpactsPatternImpactParserRuleCall_12_3_0; }

		//("," patternImpacts+=PatternImpact)*
		public Group getGroup_12_4() { return cGroup_12_4; }

		//","
		public Keyword getCommaKeyword_12_4_0() { return cCommaKeyword_12_4_0; }

		//patternImpacts+=PatternImpact
		public Assignment getPatternImpactsAssignment_12_4_1() { return cPatternImpactsAssignment_12_4_1; }

		//PatternImpact
		public RuleCall getPatternImpactsPatternImpactParserRuleCall_12_4_1_0() { return cPatternImpactsPatternImpactParserRuleCall_12_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_12_5() { return cRightSquareBracketKeyword_12_5; }

		//("," "related-patterns" "[" relatedPatterns+=[Pattern|QualifiedName] ("," relatedPatterns+=[Pattern|QualifiedName])*
		//"]")?
		public Group getGroup_13() { return cGroup_13; }

		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }

		//"related-patterns"
		public Keyword getRelatedPatternsKeyword_13_1() { return cRelatedPatternsKeyword_13_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_13_2() { return cLeftSquareBracketKeyword_13_2; }

		//relatedPatterns+=[Pattern|QualifiedName]
		public Assignment getRelatedPatternsAssignment_13_3() { return cRelatedPatternsAssignment_13_3; }

		//[Pattern|QualifiedName]
		public CrossReference getRelatedPatternsPatternCrossReference_13_3_0() { return cRelatedPatternsPatternCrossReference_13_3_0; }

		//QualifiedName
		public RuleCall getRelatedPatternsPatternQualifiedNameParserRuleCall_13_3_0_1() { return cRelatedPatternsPatternQualifiedNameParserRuleCall_13_3_0_1; }

		//("," relatedPatterns+=[Pattern|QualifiedName])*
		public Group getGroup_13_4() { return cGroup_13_4; }

		//","
		public Keyword getCommaKeyword_13_4_0() { return cCommaKeyword_13_4_0; }

		//relatedPatterns+=[Pattern|QualifiedName]
		public Assignment getRelatedPatternsAssignment_13_4_1() { return cRelatedPatternsAssignment_13_4_1; }

		//[Pattern|QualifiedName]
		public CrossReference getRelatedPatternsPatternCrossReference_13_4_1_0() { return cRelatedPatternsPatternCrossReference_13_4_1_0; }

		//QualifiedName
		public RuleCall getRelatedPatternsPatternQualifiedNameParserRuleCall_13_4_1_0_1() { return cRelatedPatternsPatternQualifiedNameParserRuleCall_13_4_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_13_5() { return cRightSquareBracketKeyword_13_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class PatternImpactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternImpact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetPatternCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetPatternQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTargetPatternCrossReference_0_0.eContents().get(1);
		private final Assignment cImpactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImpactImpactParserRuleCall_1_0 = (RuleCall)cImpactAssignment_1.eContents().get(0);
		
		//PatternImpact:
		//	target=[Pattern|QualifiedName] impact=Impact;
		public ParserRule getRule() { return rule; }

		//target=[Pattern|QualifiedName] impact=Impact
		public Group getGroup() { return cGroup; }

		//target=[Pattern|QualifiedName]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[Pattern|QualifiedName]
		public CrossReference getTargetPatternCrossReference_0_0() { return cTargetPatternCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTargetPatternQualifiedNameParserRuleCall_0_0_1() { return cTargetPatternQualifiedNameParserRuleCall_0_0_1; }

		//impact=Impact
		public Assignment getImpactAssignment_1() { return cImpactAssignment_1; }

		//Impact
		public RuleCall getImpactImpactParserRuleCall_1_0() { return cImpactImpactParserRuleCall_1_0; }
	}

	public class PropertyImpactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyImpact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetPropertyCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetPropertyQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTargetPropertyCrossReference_0_0.eContents().get(1);
		private final Assignment cImpactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImpactImpactParserRuleCall_1_0 = (RuleCall)cImpactAssignment_1.eContents().get(0);
		
		//PropertyImpact returns nsl::PropertyImpact:
		//	target=[nsl::Property|QualifiedName] impact=Impact;
		public ParserRule getRule() { return rule; }

		//target=[nsl::Property|QualifiedName] impact=Impact
		public Group getGroup() { return cGroup; }

		//target=[nsl::Property|QualifiedName]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[nsl::Property|QualifiedName]
		public CrossReference getTargetPropertyCrossReference_0_0() { return cTargetPropertyCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTargetPropertyQualifiedNameParserRuleCall_0_0_1() { return cTargetPropertyQualifiedNameParserRuleCall_0_0_1; }

		//impact=Impact
		public Assignment getImpactAssignment_1() { return cImpactAssignment_1; }

		//Impact
		public RuleCall getImpactImpactParserRuleCall_1_0() { return cImpactImpactParserRuleCall_1_0; }
	}
	
	
	private ARTISTModelElements pARTISTModel;
	private PatternCatalogueElements pPatternCatalogue;
	private PatternElements pPattern;
	private PatternImpactElements pPatternImpact;
	private PropertyImpactElements pPropertyImpact;
	
	private final Grammar grammar;

	private ARTISTCommonGrammarAccess gaARTISTCommon;

	@Inject
	public TSLGrammarAccess(GrammarProvider grammarProvider,
		ARTISTCommonGrammarAccess gaARTISTCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaARTISTCommon = gaARTISTCommon;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.artist.postmigration.nfrvt.lang.tsl.TSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ARTISTCommonGrammarAccess getARTISTCommonGrammarAccess() {
		return gaARTISTCommon;
	}

	
	//ARTISTModel returns common::ARTISTModel:
	//	PatternCatalogue;
	public ARTISTModelElements getARTISTModelAccess() {
		return (pARTISTModel != null) ? pARTISTModel : (pARTISTModel = new ARTISTModelElements());
	}
	
	public ParserRule getARTISTModelRule() {
		return getARTISTModelAccess().getRule();
	}

	//PatternCatalogue:
	//	imports+=ImportNamespace* "pattern-catalogue" name=QualifiedName "{" patterns+=Pattern* "}";
	public PatternCatalogueElements getPatternCatalogueAccess() {
		return (pPatternCatalogue != null) ? pPatternCatalogue : (pPatternCatalogue = new PatternCatalogueElements());
	}
	
	public ParserRule getPatternCatalogueRule() {
		return getPatternCatalogueAccess().getRule();
	}

	//Pattern:
	//	"pattern" name=ID "{" "context" context=STRING "," "problem" problem=STRING "," "solution" solution=STRING (","
	//	"property-impacts" "[" propertyImpacts+=PropertyImpact ("," propertyImpacts+=PropertyImpact)* "]")? (","
	//	"pattern-impacts" "[" patternImpacts+=PatternImpact ("," patternImpacts+=PatternImpact)* "]")? (","
	//	"related-patterns" "[" relatedPatterns+=[Pattern|QualifiedName] ("," relatedPatterns+=[Pattern|QualifiedName])* "]")?
	//	"}";
	public PatternElements getPatternAccess() {
		return (pPattern != null) ? pPattern : (pPattern = new PatternElements());
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//PatternImpact:
	//	target=[Pattern|QualifiedName] impact=Impact;
	public PatternImpactElements getPatternImpactAccess() {
		return (pPatternImpact != null) ? pPatternImpact : (pPatternImpact = new PatternImpactElements());
	}
	
	public ParserRule getPatternImpactRule() {
		return getPatternImpactAccess().getRule();
	}

	//PropertyImpact returns nsl::PropertyImpact:
	//	target=[nsl::Property|QualifiedName] impact=Impact;
	public PropertyImpactElements getPropertyImpactAccess() {
		return (pPropertyImpact != null) ? pPropertyImpact : (pPropertyImpact = new PropertyImpactElements());
	}
	
	public ParserRule getPropertyImpactRule() {
		return getPropertyImpactAccess().getRule();
	}

	//Expression:
	//	Implication;
	public ARTISTCommonGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaARTISTCommon.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Implication:
	//	Disjunction ({Implication.left=current} operator=ImplicationOperator right=Disjunction)*;
	public ARTISTCommonGrammarAccess.ImplicationElements getImplicationAccess() {
		return gaARTISTCommon.getImplicationAccess();
	}
	
	public ParserRule getImplicationRule() {
		return getImplicationAccess().getRule();
	}

	//Disjunction:
	//	Conjunction ({Disjunction.left=current} operator=(OrOperator | XOrOperator) right=Conjunction)*;
	public ARTISTCommonGrammarAccess.DisjunctionElements getDisjunctionAccess() {
		return gaARTISTCommon.getDisjunctionAccess();
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}

	//Conjunction:
	//	Comparison ({Conjunction.left=current} operator=AndOperator right=Comparison)*;
	public ARTISTCommonGrammarAccess.ConjunctionElements getConjunctionAccess() {
		return gaARTISTCommon.getConjunctionAccess();
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Comparison:
	//	BooleanUnit ({Comparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=BooleanUnit)*;
	public ARTISTCommonGrammarAccess.ComparisonElements getComparisonAccess() {
		return gaARTISTCommon.getComparisonAccess();
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//BooleanUnit:
	//	Negation | RelationalExpression | BooleanLiteral;
	public ARTISTCommonGrammarAccess.BooleanUnitElements getBooleanUnitAccess() {
		return gaARTISTCommon.getBooleanUnitAccess();
	}
	
	public ParserRule getBooleanUnitRule() {
		return getBooleanUnitAccess().getRule();
	}

	//Negation:
	//	operator=NotOperator value=BooleanUnit;
	public ARTISTCommonGrammarAccess.NegationElements getNegationAccess() {
		return gaARTISTCommon.getNegationAccess();
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//RelationalExpression:
	//	ComparableExpression (({RelationalExpression.left=current} operator=GreaterThanOperator |
	//	{RelationalExpression.left=current} operator=GreaterOrEqualThanOperator | {RelationalExpression.left=current}
	//	operator=LessOrEqualThanOperator | {RelationalExpression.left=current} operator=LessThanOperator)
	//	right=ComparableExpression)*;
	public ARTISTCommonGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaARTISTCommon.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//ComparableExpression:
	//	ArithmeticExpression | InstanceSpecificationExpression | ObjectSpecificationExpression | NullLiteral | StringLiteral
	//	| UnlimitedLiteral | ParenthesizedExpression;
	public ARTISTCommonGrammarAccess.ComparableExpressionElements getComparableExpressionAccess() {
		return gaARTISTCommon.getComparableExpressionAccess();
	}
	
	public ParserRule getComparableExpressionRule() {
		return getComparableExpressionAccess().getRule();
	}

	//ArithmeticExpression:
	//	AdditiveExpression;
	public ARTISTCommonGrammarAccess.ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return gaARTISTCommon.getArithmeticExpressionAccess();
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}

	//AdditiveExpression:
	//	MultiplicativeExpression ({AdditiveExpression.left=current} operator=(SubstractionOperator | AdditionOperator)
	//	right=MultiplicativeExpression)*;
	public ARTISTCommonGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaARTISTCommon.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression:
	//	NumberExpression ({MultiplicativeExpression.left=current} operator=(MultiplicationOperator | DivisionOperator |
	//	ModulusOperator) right=NumberExpression)*;
	public ARTISTCommonGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaARTISTCommon.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//NumberExpression:
	//	NumberLiteral | NumberFunction;
	public ARTISTCommonGrammarAccess.NumberExpressionElements getNumberExpressionAccess() {
		return gaARTISTCommon.getNumberExpressionAccess();
	}
	
	public ParserRule getNumberExpressionRule() {
		return getNumberExpressionAccess().getRule();
	}

	//NumberFunction:
	//	MaximumFunction | MinimumFunction | AverageFunction | SumFunction | ExponentialFunction | AbsoluteFunction |
	//	NaturalLogarithmFunction | CommonLogarithmFunction;
	public ARTISTCommonGrammarAccess.NumberFunctionElements getNumberFunctionAccess() {
		return gaARTISTCommon.getNumberFunctionAccess();
	}
	
	public ParserRule getNumberFunctionRule() {
		return getNumberFunctionAccess().getRule();
	}

	//MaximumFunction:
	//	operator=MaxOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.MaximumFunctionElements getMaximumFunctionAccess() {
		return gaARTISTCommon.getMaximumFunctionAccess();
	}
	
	public ParserRule getMaximumFunctionRule() {
		return getMaximumFunctionAccess().getRule();
	}

	//MinimumFunction:
	//	operator=MinOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.MinimumFunctionElements getMinimumFunctionAccess() {
		return gaARTISTCommon.getMinimumFunctionAccess();
	}
	
	public ParserRule getMinimumFunctionRule() {
		return getMinimumFunctionAccess().getRule();
	}

	//AverageFunction:
	//	operator=AvgOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.AverageFunctionElements getAverageFunctionAccess() {
		return gaARTISTCommon.getAverageFunctionAccess();
	}
	
	public ParserRule getAverageFunctionRule() {
		return getAverageFunctionAccess().getRule();
	}

	//SumFunction:
	//	operator=SumOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.SumFunctionElements getSumFunctionAccess() {
		return gaARTISTCommon.getSumFunctionAccess();
	}
	
	public ParserRule getSumFunctionRule() {
		return getSumFunctionAccess().getRule();
	}

	//ExponentialFunction:
	//	operator=ExponentialOperator "(" base=NumberExpression "," exponent=NumberExpression ")";
	public ARTISTCommonGrammarAccess.ExponentialFunctionElements getExponentialFunctionAccess() {
		return gaARTISTCommon.getExponentialFunctionAccess();
	}
	
	public ParserRule getExponentialFunctionRule() {
		return getExponentialFunctionAccess().getRule();
	}

	//AbsoluteFunction:
	//	operator=AbsoluteOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.AbsoluteFunctionElements getAbsoluteFunctionAccess() {
		return gaARTISTCommon.getAbsoluteFunctionAccess();
	}
	
	public ParserRule getAbsoluteFunctionRule() {
		return getAbsoluteFunctionAccess().getRule();
	}

	//NaturalLogarithmFunction:
	//	operator=NaturalLogarithmOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.NaturalLogarithmFunctionElements getNaturalLogarithmFunctionAccess() {
		return gaARTISTCommon.getNaturalLogarithmFunctionAccess();
	}
	
	public ParserRule getNaturalLogarithmFunctionRule() {
		return getNaturalLogarithmFunctionAccess().getRule();
	}

	//CommonLogarithmFunction:
	//	operator=CommonLogarithmOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.CommonLogarithmFunctionElements getCommonLogarithmFunctionAccess() {
		return gaARTISTCommon.getCommonLogarithmFunctionAccess();
	}
	
	public ParserRule getCommonLogarithmFunctionRule() {
		return getCommonLogarithmFunctionAccess().getRule();
	}

	//ParenthesizedExpression:
	//	LeftParenthesis value=Expression RightParenthesis;
	public ARTISTCommonGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaARTISTCommon.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//ValueSpecification:
	//	LiteralValueExpression | InstanceSpecificationExpression | ObjectSpecificationExpression;
	public ARTISTCommonGrammarAccess.ValueSpecificationElements getValueSpecificationAccess() {
		return gaARTISTCommon.getValueSpecificationAccess();
	}
	
	public ParserRule getValueSpecificationRule() {
		return getValueSpecificationAccess().getRule();
	}

	//ObjectSpecificationExpression:
	//	type=[uml::DataType|QualifiedName] (value=Collection | value=Tuple);
	public ARTISTCommonGrammarAccess.ObjectSpecificationExpressionElements getObjectSpecificationExpressionAccess() {
		return gaARTISTCommon.getObjectSpecificationExpressionAccess();
	}
	
	public ParserRule getObjectSpecificationExpressionRule() {
		return getObjectSpecificationExpressionAccess().getRule();
	}

	//Collection:
	//	{Collection} "[" (values+=ValueSpecification ("," values+=ValueSpecification)*)? "]";
	public ARTISTCommonGrammarAccess.CollectionElements getCollectionAccess() {
		return gaARTISTCommon.getCollectionAccess();
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}

	//Tuple:
	//	{Tuple} "{" (tuples+=PropertyValuePair ("," tuples+=PropertyValuePair)*)? "}";
	public ARTISTCommonGrammarAccess.TupleElements getTupleAccess() {
		return gaARTISTCommon.getTupleAccess();
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}

	//PropertyValuePair:
	//	property=[uml::Property|QualifiedName] "=" value=ValueSpecification;
	public ARTISTCommonGrammarAccess.PropertyValuePairElements getPropertyValuePairAccess() {
		return gaARTISTCommon.getPropertyValuePairAccess();
	}
	
	public ParserRule getPropertyValuePairRule() {
		return getPropertyValuePairAccess().getRule();
	}

	//InstanceSpecificationExpression:
	//	value=[uml::InstanceSpecification|QualifiedName];
	public ARTISTCommonGrammarAccess.InstanceSpecificationExpressionElements getInstanceSpecificationExpressionAccess() {
		return gaARTISTCommon.getInstanceSpecificationExpressionAccess();
	}
	
	public ParserRule getInstanceSpecificationExpressionRule() {
		return getInstanceSpecificationExpressionAccess().getRule();
	}

	//LiteralValueExpression:
	//	NumberLiteral | BooleanLiteral | NullLiteral | StringLiteral | UnlimitedLiteral;
	public ARTISTCommonGrammarAccess.LiteralValueExpressionElements getLiteralValueExpressionAccess() {
		return gaARTISTCommon.getLiteralValueExpressionAccess();
	}
	
	public ParserRule getLiteralValueExpressionRule() {
		return getLiteralValueExpressionAccess().getRule();
	}

	//BooleanLiteral:
	//	value=EBOOLEAN;
	public ARTISTCommonGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaARTISTCommon.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NumberLiteral:
	//	value=Number;
	public ARTISTCommonGrammarAccess.NumberLiteralElements getNumberLiteralAccess() {
		return gaARTISTCommon.getNumberLiteralAccess();
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//NullLiteral:
	//	value=NULL;
	public ARTISTCommonGrammarAccess.NullLiteralElements getNullLiteralAccess() {
		return gaARTISTCommon.getNullLiteralAccess();
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public ARTISTCommonGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaARTISTCommon.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//UnlimitedLiteral:
	//	value="*";
	public ARTISTCommonGrammarAccess.UnlimitedLiteralElements getUnlimitedLiteralAccess() {
		return gaARTISTCommon.getUnlimitedLiteralAccess();
	}
	
	public ParserRule getUnlimitedLiteralRule() {
		return getUnlimitedLiteralAccess().getRule();
	}

	//OrOperator returns Operator:
	//	{OrOperator} ("or" | "||");
	public ARTISTCommonGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaARTISTCommon.getOrOperatorAccess();
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//XOrOperator returns Operator:
	//	{XOrOperator} ("xor" | "^");
	public ARTISTCommonGrammarAccess.XOrOperatorElements getXOrOperatorAccess() {
		return gaARTISTCommon.getXOrOperatorAccess();
	}
	
	public ParserRule getXOrOperatorRule() {
		return getXOrOperatorAccess().getRule();
	}

	//AndOperator returns Operator:
	//	{AndOperator} ("and" | "&&");
	public ARTISTCommonGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaARTISTCommon.getAndOperatorAccess();
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//ImplicationOperator returns Operator:
	//	{ImplicationOperator} ("=>" | "->");
	public ARTISTCommonGrammarAccess.ImplicationOperatorElements getImplicationOperatorAccess() {
		return gaARTISTCommon.getImplicationOperatorAccess();
	}
	
	public ParserRule getImplicationOperatorRule() {
		return getImplicationOperatorAccess().getRule();
	}

	//EqualsOperator returns Operator:
	//	{EqualsOperator} "==";
	public ARTISTCommonGrammarAccess.EqualsOperatorElements getEqualsOperatorAccess() {
		return gaARTISTCommon.getEqualsOperatorAccess();
	}
	
	public ParserRule getEqualsOperatorRule() {
		return getEqualsOperatorAccess().getRule();
	}

	//NotEqualsOperator returns Operator:
	//	{NotEqualsOperator} ("!=" | "<>");
	public ARTISTCommonGrammarAccess.NotEqualsOperatorElements getNotEqualsOperatorAccess() {
		return gaARTISTCommon.getNotEqualsOperatorAccess();
	}
	
	public ParserRule getNotEqualsOperatorRule() {
		return getNotEqualsOperatorAccess().getRule();
	}

	//NotOperator returns Operator:
	//	{NotOperator} ("!" | "not");
	public ARTISTCommonGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaARTISTCommon.getNotOperatorAccess();
	}
	
	public ParserRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//GreaterThanOperator returns Operator:
	//	{GreaterThanOperator} ">";
	public ARTISTCommonGrammarAccess.GreaterThanOperatorElements getGreaterThanOperatorAccess() {
		return gaARTISTCommon.getGreaterThanOperatorAccess();
	}
	
	public ParserRule getGreaterThanOperatorRule() {
		return getGreaterThanOperatorAccess().getRule();
	}

	//GreaterOrEqualThanOperator returns Operator:
	//	{GreaterOrEqualThanOperator} ">=";
	public ARTISTCommonGrammarAccess.GreaterOrEqualThanOperatorElements getGreaterOrEqualThanOperatorAccess() {
		return gaARTISTCommon.getGreaterOrEqualThanOperatorAccess();
	}
	
	public ParserRule getGreaterOrEqualThanOperatorRule() {
		return getGreaterOrEqualThanOperatorAccess().getRule();
	}

	//LessThanOperator returns Operator:
	//	{LessThanOperator} "<";
	public ARTISTCommonGrammarAccess.LessThanOperatorElements getLessThanOperatorAccess() {
		return gaARTISTCommon.getLessThanOperatorAccess();
	}
	
	public ParserRule getLessThanOperatorRule() {
		return getLessThanOperatorAccess().getRule();
	}

	//LessOrEqualThanOperator returns Operator:
	//	{LessOrEqualThanOperator} "<=";
	public ARTISTCommonGrammarAccess.LessOrEqualThanOperatorElements getLessOrEqualThanOperatorAccess() {
		return gaARTISTCommon.getLessOrEqualThanOperatorAccess();
	}
	
	public ParserRule getLessOrEqualThanOperatorRule() {
		return getLessOrEqualThanOperatorAccess().getRule();
	}

	//AdditionOperator returns Operator:
	//	{AdditionOperator} "+";
	public ARTISTCommonGrammarAccess.AdditionOperatorElements getAdditionOperatorAccess() {
		return gaARTISTCommon.getAdditionOperatorAccess();
	}
	
	public ParserRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}

	//SubstractionOperator returns Operator:
	//	{SubstractionOperator} "-";
	public ARTISTCommonGrammarAccess.SubstractionOperatorElements getSubstractionOperatorAccess() {
		return gaARTISTCommon.getSubstractionOperatorAccess();
	}
	
	public ParserRule getSubstractionOperatorRule() {
		return getSubstractionOperatorAccess().getRule();
	}

	//MultiplicationOperator returns Operator:
	//	{MultiplicationOperator} "*";
	public ARTISTCommonGrammarAccess.MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return gaARTISTCommon.getMultiplicationOperatorAccess();
	}
	
	public ParserRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}

	//DivisionOperator returns Operator:
	//	{DivisionOperator} "/";
	public ARTISTCommonGrammarAccess.DivisionOperatorElements getDivisionOperatorAccess() {
		return gaARTISTCommon.getDivisionOperatorAccess();
	}
	
	public ParserRule getDivisionOperatorRule() {
		return getDivisionOperatorAccess().getRule();
	}

	//ModulusOperator returns Operator:
	//	{ModulusOperator} "%";
	public ARTISTCommonGrammarAccess.ModulusOperatorElements getModulusOperatorAccess() {
		return gaARTISTCommon.getModulusOperatorAccess();
	}
	
	public ParserRule getModulusOperatorRule() {
		return getModulusOperatorAccess().getRule();
	}

	//MaxOperator returns Operator:
	//	{MaxOperator} "max";
	public ARTISTCommonGrammarAccess.MaxOperatorElements getMaxOperatorAccess() {
		return gaARTISTCommon.getMaxOperatorAccess();
	}
	
	public ParserRule getMaxOperatorRule() {
		return getMaxOperatorAccess().getRule();
	}

	//MinOperator returns Operator:
	//	{MinOperator} "min";
	public ARTISTCommonGrammarAccess.MinOperatorElements getMinOperatorAccess() {
		return gaARTISTCommon.getMinOperatorAccess();
	}
	
	public ParserRule getMinOperatorRule() {
		return getMinOperatorAccess().getRule();
	}

	//AvgOperator returns Operator:
	//	{AvgOperator} "avg";
	public ARTISTCommonGrammarAccess.AvgOperatorElements getAvgOperatorAccess() {
		return gaARTISTCommon.getAvgOperatorAccess();
	}
	
	public ParserRule getAvgOperatorRule() {
		return getAvgOperatorAccess().getRule();
	}

	//SumOperator returns Operator:
	//	{SumOperator} "sum";
	public ARTISTCommonGrammarAccess.SumOperatorElements getSumOperatorAccess() {
		return gaARTISTCommon.getSumOperatorAccess();
	}
	
	public ParserRule getSumOperatorRule() {
		return getSumOperatorAccess().getRule();
	}

	//ExponentialOperator returns Operator:
	//	{ExponentialOperator} "exp";
	public ARTISTCommonGrammarAccess.ExponentialOperatorElements getExponentialOperatorAccess() {
		return gaARTISTCommon.getExponentialOperatorAccess();
	}
	
	public ParserRule getExponentialOperatorRule() {
		return getExponentialOperatorAccess().getRule();
	}

	//AbsoluteOperator returns Operator:
	//	{AbsoluteOperator} "abs";
	public ARTISTCommonGrammarAccess.AbsoluteOperatorElements getAbsoluteOperatorAccess() {
		return gaARTISTCommon.getAbsoluteOperatorAccess();
	}
	
	public ParserRule getAbsoluteOperatorRule() {
		return getAbsoluteOperatorAccess().getRule();
	}

	//NaturalLogarithmOperator returns Operator:
	//	{NaturalLogarithmOperator} "ln";
	public ARTISTCommonGrammarAccess.NaturalLogarithmOperatorElements getNaturalLogarithmOperatorAccess() {
		return gaARTISTCommon.getNaturalLogarithmOperatorAccess();
	}
	
	public ParserRule getNaturalLogarithmOperatorRule() {
		return getNaturalLogarithmOperatorAccess().getRule();
	}

	//CommonLogarithmOperator returns Operator:
	//	{CommonLogarithmOperator} "log";
	public ARTISTCommonGrammarAccess.CommonLogarithmOperatorElements getCommonLogarithmOperatorAccess() {
		return gaARTISTCommon.getCommonLogarithmOperatorAccess();
	}
	
	public ParserRule getCommonLogarithmOperatorRule() {
		return getCommonLogarithmOperatorAccess().getRule();
	}

	//LeftParenthesis:
	//	"(";
	public ARTISTCommonGrammarAccess.LeftParenthesisElements getLeftParenthesisAccess() {
		return gaARTISTCommon.getLeftParenthesisAccess();
	}
	
	public ParserRule getLeftParenthesisRule() {
		return getLeftParenthesisAccess().getRule();
	}

	//RightParenthesis:
	//	")";
	public ARTISTCommonGrammarAccess.RightParenthesisElements getRightParenthesisAccess() {
		return gaARTISTCommon.getRightParenthesisAccess();
	}
	
	public ParserRule getRightParenthesisRule() {
		return getRightParenthesisAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public ARTISTCommonGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaARTISTCommon.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Workload:
	//	name=ID "{" "activity" activity=[uml::Activity|QualifiedName] "," "pattern" pattern=STRING "}";
	public ARTISTCommonGrammarAccess.WorkloadElements getWorkloadAccess() {
		return gaARTISTCommon.getWorkloadAccess();
	}
	
	public ParserRule getWorkloadRule() {
		return getWorkloadAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public ARTISTCommonGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaARTISTCommon.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ImportURIorNamespace:
	//	"import" (importURI=STRING | importedNamespace=QualifiedNameWithWildcard);
	public ARTISTCommonGrammarAccess.ImportURIorNamespaceElements getImportURIorNamespaceAccess() {
		return gaARTISTCommon.getImportURIorNamespaceAccess();
	}
	
	public ParserRule getImportURIorNamespaceRule() {
		return getImportURIorNamespaceAccess().getRule();
	}

	//ImportURI:
	//	"import" importURI=STRING;
	public ARTISTCommonGrammarAccess.ImportURIElements getImportURIAccess() {
		return gaARTISTCommon.getImportURIAccess();
	}
	
	public ParserRule getImportURIRule() {
		return getImportURIAccess().getRule();
	}

	//ImportNamespace:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ARTISTCommonGrammarAccess.ImportNamespaceElements getImportNamespaceAccess() {
		return gaARTISTCommon.getImportNamespaceAccess();
	}
	
	public ParserRule getImportNamespaceRule() {
		return getImportNamespaceAccess().getRule();
	}

	//Number returns ecore::EBigDecimal:
	//	INT | POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL | EBIGDECIMAL;
	public ARTISTCommonGrammarAccess.NumberElements getNumberAccess() {
		return gaARTISTCommon.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Impact returns ecore::EBigDecimal:
	//	POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL;
	public ARTISTCommonGrammarAccess.ImpactElements getImpactAccess() {
		return gaARTISTCommon.getImpactAccess();
	}
	
	public ParserRule getImpactRule() {
		return getImpactAccess().getRule();
	}

	//EBooleanObject returns ecore::EBooleanObject:
	//	NULL | EBOOLEAN;
	public ARTISTCommonGrammarAccess.EBooleanObjectElements getEBooleanObjectAccess() {
		return gaARTISTCommon.getEBooleanObjectAccess();
	}
	
	public ParserRule getEBooleanObjectRule() {
		return getEBooleanObjectAccess().getRule();
	}

	//terminal EBOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getEBOOLEANRule() {
		return gaARTISTCommon.getEBOOLEANRule();
	} 

	//terminal NULL:
	//	"null";
	public TerminalRule getNULLRule() {
		return gaARTISTCommon.getNULLRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaARTISTCommon.getINTRule();
	} 

	//terminal POSITIVE_SMALL_DECIMAL returns ecore::EBigDecimal:
	//	"1" ("." "0"+)? | "0" ("." "0".."9"+)? | "." "0".."9"+;
	public TerminalRule getPOSITIVE_SMALL_DECIMALRule() {
		return gaARTISTCommon.getPOSITIVE_SMALL_DECIMALRule();
	} 

	//terminal SMALL_DECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? POSITIVE_SMALL_DECIMAL;
	public TerminalRule getSMALL_DECIMALRule() {
		return gaARTISTCommon.getSMALL_DECIMALRule();
	} 

	//terminal EBIGDECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? (INT | "." INT | INT "." INT);
	public TerminalRule getEBIGDECIMALRule() {
		return gaARTISTCommon.getEBIGDECIMALRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "Â§") ("a".."z" | "A".."Z" |
	//	"_" | "0".."9" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "Â§")*;
	public TerminalRule getIDRule() {
		return gaARTISTCommon.getIDRule();
	} 

	//terminal DATE_TIME returns ecore::EDate: // time zone not working: (('+'|'-') INT ((':' INT) | INT)?)?
	//	INT "-" INT "-" INT ("T" INT ":" INT (":" INT ("." INT)?)?)?;
	public TerminalRule getDATE_TIMERule() {
		return gaARTISTCommon.getDATE_TIMERule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaARTISTCommon.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaARTISTCommon.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaARTISTCommon.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaARTISTCommon.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaARTISTCommon.getANY_OTHERRule();
	} 
}
