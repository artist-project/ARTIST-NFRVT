/*
* generated by Xtext
*/
grammar InternalGML;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package eu.artist.postmigration.nfrvt.lang.gml.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package eu.artist.postmigration.nfrvt.lang.gml.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import eu.artist.postmigration.nfrvt.lang.gml.services.GMLGrammarAccess;

}

@parser::members {
 
 	private GMLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GMLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleARTISTModel
entryRuleARTISTModel 
:
{ before(grammarAccess.getARTISTModelRule()); }
	 ruleARTISTModel
{ after(grammarAccess.getARTISTModelRule()); } 
	 EOF 
;

// Rule ARTISTModel
ruleARTISTModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getARTISTModelAccess().getGoalModelParserRuleCall()); }
	ruleGoalModel
{ after(grammarAccess.getARTISTModelAccess().getGoalModelParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoalModel
entryRuleGoalModel 
:
{ before(grammarAccess.getGoalModelRule()); }
	 ruleGoalModel
{ after(grammarAccess.getGoalModelRule()); } 
	 EOF 
;

// Rule GoalModel
ruleGoalModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalModelAccess().getGroup()); }
(rule__GoalModel__Group__0)
{ after(grammarAccess.getGoalModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWorkload
entryRuleWorkload 
:
{ before(grammarAccess.getWorkloadRule()); }
	 ruleWorkload
{ after(grammarAccess.getWorkloadRule()); } 
	 EOF 
;

// Rule Workload
ruleWorkload
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWorkloadAccess().getGroup()); }
(rule__Workload__Group__0)
{ after(grammarAccess.getWorkloadAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAppliedProperty
entryRuleAppliedProperty 
:
{ before(grammarAccess.getAppliedPropertyRule()); }
	 ruleAppliedProperty
{ after(grammarAccess.getAppliedPropertyRule()); } 
	 EOF 
;

// Rule AppliedProperty
ruleAppliedProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAppliedPropertyAccess().getAlternatives()); }
(rule__AppliedProperty__Alternatives)
{ after(grammarAccess.getAppliedPropertyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAppliedQualitativeProperty
entryRuleAppliedQualitativeProperty 
:
{ before(grammarAccess.getAppliedQualitativePropertyRule()); }
	 ruleAppliedQualitativeProperty
{ after(grammarAccess.getAppliedQualitativePropertyRule()); } 
	 EOF 
;

// Rule AppliedQualitativeProperty
ruleAppliedQualitativeProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getGroup()); }
(rule__AppliedQualitativeProperty__Group__0)
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAppliedQuantitativeProperty
entryRuleAppliedQuantitativeProperty 
:
{ before(grammarAccess.getAppliedQuantitativePropertyRule()); }
	 ruleAppliedQuantitativeProperty
{ after(grammarAccess.getAppliedQuantitativePropertyRule()); } 
	 EOF 
;

// Rule AppliedQuantitativeProperty
ruleAppliedQuantitativeProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup()); }
(rule__AppliedQuantitativeProperty__Group__0)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoal
entryRuleGoal 
:
{ before(grammarAccess.getGoalRule()); }
	 ruleGoal
{ after(grammarAccess.getGoalRule()); } 
	 EOF 
;

// Rule Goal
ruleGoal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalAccess().getAlternatives()); }
(rule__Goal__Alternatives)
{ after(grammarAccess.getGoalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSoftGoal
entryRuleSoftGoal 
:
{ before(grammarAccess.getSoftGoalRule()); }
	 ruleSoftGoal
{ after(grammarAccess.getSoftGoalRule()); } 
	 EOF 
;

// Rule SoftGoal
ruleSoftGoal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSoftGoalAccess().getGroup()); }
(rule__SoftGoal__Group__0)
{ after(grammarAccess.getSoftGoalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSoftGoalImpact
entryRuleSoftGoalImpact 
:
{ before(grammarAccess.getSoftGoalImpactRule()); }
	 ruleSoftGoalImpact
{ after(grammarAccess.getSoftGoalImpactRule()); } 
	 EOF 
;

// Rule SoftGoalImpact
ruleSoftGoalImpact
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSoftGoalImpactAccess().getGroup()); }
(rule__SoftGoalImpact__Group__0)
{ after(grammarAccess.getSoftGoalImpactAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHardGoal
entryRuleHardGoal 
:
{ before(grammarAccess.getHardGoalRule()); }
	 ruleHardGoal
{ after(grammarAccess.getHardGoalRule()); } 
	 EOF 
;

// Rule HardGoal
ruleHardGoal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHardGoalAccess().getGroup()); }
(rule__HardGoal__Group__0)
{ after(grammarAccess.getHardGoalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompositeGoal
entryRuleCompositeGoal 
:
{ before(grammarAccess.getCompositeGoalRule()); }
	 ruleCompositeGoal
{ after(grammarAccess.getCompositeGoalRule()); } 
	 EOF 
;

// Rule CompositeGoal
ruleCompositeGoal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompositeGoalAccess().getGroup()); }
(rule__CompositeGoal__Group__0)
{ after(grammarAccess.getCompositeGoalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoalExpression
entryRuleGoalExpression 
:
{ before(grammarAccess.getGoalExpressionRule()); }
	 ruleGoalExpression
{ after(grammarAccess.getGoalExpressionRule()); } 
	 EOF 
;

// Rule GoalExpression
ruleGoalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalExpressionAccess().getGoalImplicationParserRuleCall()); }
	ruleGoalImplication
{ after(grammarAccess.getGoalExpressionAccess().getGoalImplicationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoalImplication
entryRuleGoalImplication 
:
{ before(grammarAccess.getGoalImplicationRule()); }
	 ruleGoalImplication
{ after(grammarAccess.getGoalImplicationRule()); } 
	 EOF 
;

// Rule GoalImplication
ruleGoalImplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalImplicationAccess().getGroup()); }
(rule__GoalImplication__Group__0)
{ after(grammarAccess.getGoalImplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoalDisjunction
entryRuleGoalDisjunction 
:
{ before(grammarAccess.getGoalDisjunctionRule()); }
	 ruleGoalDisjunction
{ after(grammarAccess.getGoalDisjunctionRule()); } 
	 EOF 
;

// Rule GoalDisjunction
ruleGoalDisjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalDisjunctionAccess().getGroup()); }
(rule__GoalDisjunction__Group__0)
{ after(grammarAccess.getGoalDisjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoalConjunction
entryRuleGoalConjunction 
:
{ before(grammarAccess.getGoalConjunctionRule()); }
	 ruleGoalConjunction
{ after(grammarAccess.getGoalConjunctionRule()); } 
	 EOF 
;

// Rule GoalConjunction
ruleGoalConjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalConjunctionAccess().getGroup()); }
(rule__GoalConjunction__Group__0)
{ after(grammarAccess.getGoalConjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoalComparison
entryRuleGoalComparison 
:
{ before(grammarAccess.getGoalComparisonRule()); }
	 ruleGoalComparison
{ after(grammarAccess.getGoalComparisonRule()); } 
	 EOF 
;

// Rule GoalComparison
ruleGoalComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalComparisonAccess().getGroup()); }
(rule__GoalComparison__Group__0)
{ after(grammarAccess.getGoalComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoalBooleanUnit
entryRuleGoalBooleanUnit 
:
{ before(grammarAccess.getGoalBooleanUnitRule()); }
	 ruleGoalBooleanUnit
{ after(grammarAccess.getGoalBooleanUnitRule()); } 
	 EOF 
;

// Rule GoalBooleanUnit
ruleGoalBooleanUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalBooleanUnitAccess().getAlternatives()); }
(rule__GoalBooleanUnit__Alternatives)
{ after(grammarAccess.getGoalBooleanUnitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoalNegation
entryRuleGoalNegation 
:
{ before(grammarAccess.getGoalNegationRule()); }
	 ruleGoalNegation
{ after(grammarAccess.getGoalNegationRule()); } 
	 EOF 
;

// Rule GoalNegation
ruleGoalNegation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalNegationAccess().getGroup()); }
(rule__GoalNegation__Group__0)
{ after(grammarAccess.getGoalNegationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoalBooleanLiteral
entryRuleGoalBooleanLiteral 
:
{ before(grammarAccess.getGoalBooleanLiteralRule()); }
	 ruleGoalBooleanLiteral
{ after(grammarAccess.getGoalBooleanLiteralRule()); } 
	 EOF 
;

// Rule GoalBooleanLiteral
ruleGoalBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalBooleanLiteralAccess().getValueAssignment()); }
(rule__GoalBooleanLiteral__ValueAssignment)
{ after(grammarAccess.getGoalBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoalReference
entryRuleGoalReference 
:
{ before(grammarAccess.getGoalReferenceRule()); }
	 ruleGoalReference
{ after(grammarAccess.getGoalReferenceRule()); } 
	 EOF 
;

// Rule GoalReference
ruleGoalReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalReferenceAccess().getGroup()); }
(rule__GoalReference__Group__0)
{ after(grammarAccess.getGoalReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedGoalExpression
entryRuleParenthesizedGoalExpression 
:
{ before(grammarAccess.getParenthesizedGoalExpressionRule()); }
	 ruleParenthesizedGoalExpression
{ after(grammarAccess.getParenthesizedGoalExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedGoalExpression
ruleParenthesizedGoalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedGoalExpressionAccess().getGroup()); }
(rule__ParenthesizedGoalExpression__Group__0)
{ after(grammarAccess.getParenthesizedGoalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberExpression
entryRuleNumberExpression 
:
{ before(grammarAccess.getNumberExpressionRule()); }
	 ruleNumberExpression
{ after(grammarAccess.getNumberExpressionRule()); } 
	 EOF 
;

// Rule NumberExpression
ruleNumberExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberExpressionAccess().getAlternatives()); }
(rule__NumberExpression__Alternatives)
{ after(grammarAccess.getNumberExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAppliedQuantitativePropertyExpression
entryRuleAppliedQuantitativePropertyExpression 
:
{ before(grammarAccess.getAppliedQuantitativePropertyExpressionRule()); }
	 ruleAppliedQuantitativePropertyExpression
{ after(grammarAccess.getAppliedQuantitativePropertyExpressionRule()); } 
	 EOF 
;

// Rule AppliedQuantitativePropertyExpression
ruleAppliedQuantitativePropertyExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getGroup()); }
(rule__AppliedQuantitativePropertyExpression__Group__0)
{ after(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getImplicationParserRuleCall()); }
	ruleImplication
{ after(grammarAccess.getExpressionAccess().getImplicationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImplication
entryRuleImplication 
:
{ before(grammarAccess.getImplicationRule()); }
	 ruleImplication
{ after(grammarAccess.getImplicationRule()); } 
	 EOF 
;

// Rule Implication
ruleImplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplicationAccess().getGroup()); }
(rule__Implication__Group__0)
{ after(grammarAccess.getImplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDisjunction
entryRuleDisjunction 
:
{ before(grammarAccess.getDisjunctionRule()); }
	 ruleDisjunction
{ after(grammarAccess.getDisjunctionRule()); } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDisjunctionAccess().getGroup()); }
(rule__Disjunction__Group__0)
{ after(grammarAccess.getDisjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConjunction
entryRuleConjunction 
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConjunctionAccess().getGroup()); }
(rule__Conjunction__Group__0)
{ after(grammarAccess.getConjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanUnit
entryRuleBooleanUnit 
:
{ before(grammarAccess.getBooleanUnitRule()); }
	 ruleBooleanUnit
{ after(grammarAccess.getBooleanUnitRule()); } 
	 EOF 
;

// Rule BooleanUnit
ruleBooleanUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanUnitAccess().getAlternatives()); }
(rule__BooleanUnit__Alternatives)
{ after(grammarAccess.getBooleanUnitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegation
entryRuleNegation 
:
{ before(grammarAccess.getNegationRule()); }
	 ruleNegation
{ after(grammarAccess.getNegationRule()); } 
	 EOF 
;

// Rule Negation
ruleNegation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegationAccess().getGroup()); }
(rule__Negation__Group__0)
{ after(grammarAccess.getNegationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparableExpression
entryRuleComparableExpression 
:
{ before(grammarAccess.getComparableExpressionRule()); }
	 ruleComparableExpression
{ after(grammarAccess.getComparableExpressionRule()); } 
	 EOF 
;

// Rule ComparableExpression
ruleComparableExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparableExpressionAccess().getAlternatives()); }
(rule__ComparableExpression__Alternatives)
{ after(grammarAccess.getComparableExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression 
:
{ before(grammarAccess.getArithmeticExpressionRule()); }
	 ruleArithmeticExpression
{ after(grammarAccess.getArithmeticExpressionRule()); } 
	 EOF 
;

// Rule ArithmeticExpression
ruleArithmeticExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArithmeticExpressionAccess().getAdditiveExpressionParserRuleCall()); }
	ruleAdditiveExpression
{ after(grammarAccess.getArithmeticExpressionAccess().getAdditiveExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberFunction
entryRuleNumberFunction 
:
{ before(grammarAccess.getNumberFunctionRule()); }
	 ruleNumberFunction
{ after(grammarAccess.getNumberFunctionRule()); } 
	 EOF 
;

// Rule NumberFunction
ruleNumberFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberFunctionAccess().getAlternatives()); }
(rule__NumberFunction__Alternatives)
{ after(grammarAccess.getNumberFunctionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMaximumFunction
entryRuleMaximumFunction 
:
{ before(grammarAccess.getMaximumFunctionRule()); }
	 ruleMaximumFunction
{ after(grammarAccess.getMaximumFunctionRule()); } 
	 EOF 
;

// Rule MaximumFunction
ruleMaximumFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMaximumFunctionAccess().getGroup()); }
(rule__MaximumFunction__Group__0)
{ after(grammarAccess.getMaximumFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMinimumFunction
entryRuleMinimumFunction 
:
{ before(grammarAccess.getMinimumFunctionRule()); }
	 ruleMinimumFunction
{ after(grammarAccess.getMinimumFunctionRule()); } 
	 EOF 
;

// Rule MinimumFunction
ruleMinimumFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMinimumFunctionAccess().getGroup()); }
(rule__MinimumFunction__Group__0)
{ after(grammarAccess.getMinimumFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAverageFunction
entryRuleAverageFunction 
:
{ before(grammarAccess.getAverageFunctionRule()); }
	 ruleAverageFunction
{ after(grammarAccess.getAverageFunctionRule()); } 
	 EOF 
;

// Rule AverageFunction
ruleAverageFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAverageFunctionAccess().getGroup()); }
(rule__AverageFunction__Group__0)
{ after(grammarAccess.getAverageFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSumFunction
entryRuleSumFunction 
:
{ before(grammarAccess.getSumFunctionRule()); }
	 ruleSumFunction
{ after(grammarAccess.getSumFunctionRule()); } 
	 EOF 
;

// Rule SumFunction
ruleSumFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSumFunctionAccess().getGroup()); }
(rule__SumFunction__Group__0)
{ after(grammarAccess.getSumFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExponentialFunction
entryRuleExponentialFunction 
:
{ before(grammarAccess.getExponentialFunctionRule()); }
	 ruleExponentialFunction
{ after(grammarAccess.getExponentialFunctionRule()); } 
	 EOF 
;

// Rule ExponentialFunction
ruleExponentialFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExponentialFunctionAccess().getGroup()); }
(rule__ExponentialFunction__Group__0)
{ after(grammarAccess.getExponentialFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbsoluteFunction
entryRuleAbsoluteFunction 
:
{ before(grammarAccess.getAbsoluteFunctionRule()); }
	 ruleAbsoluteFunction
{ after(grammarAccess.getAbsoluteFunctionRule()); } 
	 EOF 
;

// Rule AbsoluteFunction
ruleAbsoluteFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbsoluteFunctionAccess().getGroup()); }
(rule__AbsoluteFunction__Group__0)
{ after(grammarAccess.getAbsoluteFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNaturalLogarithmFunction
entryRuleNaturalLogarithmFunction 
:
{ before(grammarAccess.getNaturalLogarithmFunctionRule()); }
	 ruleNaturalLogarithmFunction
{ after(grammarAccess.getNaturalLogarithmFunctionRule()); } 
	 EOF 
;

// Rule NaturalLogarithmFunction
ruleNaturalLogarithmFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNaturalLogarithmFunctionAccess().getGroup()); }
(rule__NaturalLogarithmFunction__Group__0)
{ after(grammarAccess.getNaturalLogarithmFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommonLogarithmFunction
entryRuleCommonLogarithmFunction 
:
{ before(grammarAccess.getCommonLogarithmFunctionRule()); }
	 ruleCommonLogarithmFunction
{ after(grammarAccess.getCommonLogarithmFunctionRule()); } 
	 EOF 
;

// Rule CommonLogarithmFunction
ruleCommonLogarithmFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommonLogarithmFunctionAccess().getGroup()); }
(rule__CommonLogarithmFunction__Group__0)
{ after(grammarAccess.getCommonLogarithmFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression 
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
(rule__ParenthesizedExpression__Group__0)
{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueSpecification
entryRuleValueSpecification 
:
{ before(grammarAccess.getValueSpecificationRule()); }
	 ruleValueSpecification
{ after(grammarAccess.getValueSpecificationRule()); } 
	 EOF 
;

// Rule ValueSpecification
ruleValueSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueSpecificationAccess().getAlternatives()); }
(rule__ValueSpecification__Alternatives)
{ after(grammarAccess.getValueSpecificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleObjectSpecificationExpression
entryRuleObjectSpecificationExpression 
:
{ before(grammarAccess.getObjectSpecificationExpressionRule()); }
	 ruleObjectSpecificationExpression
{ after(grammarAccess.getObjectSpecificationExpressionRule()); } 
	 EOF 
;

// Rule ObjectSpecificationExpression
ruleObjectSpecificationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObjectSpecificationExpressionAccess().getGroup()); }
(rule__ObjectSpecificationExpression__Group__0)
{ after(grammarAccess.getObjectSpecificationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollection
entryRuleCollection 
:
{ before(grammarAccess.getCollectionRule()); }
	 ruleCollection
{ after(grammarAccess.getCollectionRule()); } 
	 EOF 
;

// Rule Collection
ruleCollection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCollectionAccess().getGroup()); }
(rule__Collection__Group__0)
{ after(grammarAccess.getCollectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTuple
entryRuleTuple 
:
{ before(grammarAccess.getTupleRule()); }
	 ruleTuple
{ after(grammarAccess.getTupleRule()); } 
	 EOF 
;

// Rule Tuple
ruleTuple
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTupleAccess().getGroup()); }
(rule__Tuple__Group__0)
{ after(grammarAccess.getTupleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyValuePair
entryRulePropertyValuePair 
:
{ before(grammarAccess.getPropertyValuePairRule()); }
	 rulePropertyValuePair
{ after(grammarAccess.getPropertyValuePairRule()); } 
	 EOF 
;

// Rule PropertyValuePair
rulePropertyValuePair
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyValuePairAccess().getGroup()); }
(rule__PropertyValuePair__Group__0)
{ after(grammarAccess.getPropertyValuePairAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstanceSpecificationExpression
entryRuleInstanceSpecificationExpression 
:
{ before(grammarAccess.getInstanceSpecificationExpressionRule()); }
	 ruleInstanceSpecificationExpression
{ after(grammarAccess.getInstanceSpecificationExpressionRule()); } 
	 EOF 
;

// Rule InstanceSpecificationExpression
ruleInstanceSpecificationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstanceSpecificationExpressionAccess().getValueAssignment()); }
(rule__InstanceSpecificationExpression__ValueAssignment)
{ after(grammarAccess.getInstanceSpecificationExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralValueExpression
entryRuleLiteralValueExpression 
:
{ before(grammarAccess.getLiteralValueExpressionRule()); }
	 ruleLiteralValueExpression
{ after(grammarAccess.getLiteralValueExpressionRule()); } 
	 EOF 
;

// Rule LiteralValueExpression
ruleLiteralValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralValueExpressionAccess().getAlternatives()); }
(rule__LiteralValueExpression__Alternatives)
{ after(grammarAccess.getLiteralValueExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
(rule__NumberLiteral__ValueAssignment)
{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullLiteral
entryRuleNullLiteral 
:
{ before(grammarAccess.getNullLiteralRule()); }
	 ruleNullLiteral
{ after(grammarAccess.getNullLiteralRule()); } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullLiteralAccess().getValueAssignment()); }
(rule__NullLiteral__ValueAssignment)
{ after(grammarAccess.getNullLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnlimitedLiteral
entryRuleUnlimitedLiteral 
:
{ before(grammarAccess.getUnlimitedLiteralRule()); }
	 ruleUnlimitedLiteral
{ after(grammarAccess.getUnlimitedLiteralRule()); } 
	 EOF 
;

// Rule UnlimitedLiteral
ruleUnlimitedLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnlimitedLiteralAccess().getValueAssignment()); }
(rule__UnlimitedLiteral__ValueAssignment)
{ after(grammarAccess.getUnlimitedLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrOperator
entryRuleOrOperator 
:
{ before(grammarAccess.getOrOperatorRule()); }
	 ruleOrOperator
{ after(grammarAccess.getOrOperatorRule()); } 
	 EOF 
;

// Rule OrOperator
ruleOrOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrOperatorAccess().getGroup()); }
(rule__OrOperator__Group__0)
{ after(grammarAccess.getOrOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXOrOperator
entryRuleXOrOperator 
:
{ before(grammarAccess.getXOrOperatorRule()); }
	 ruleXOrOperator
{ after(grammarAccess.getXOrOperatorRule()); } 
	 EOF 
;

// Rule XOrOperator
ruleXOrOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXOrOperatorAccess().getGroup()); }
(rule__XOrOperator__Group__0)
{ after(grammarAccess.getXOrOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndOperator
entryRuleAndOperator 
:
{ before(grammarAccess.getAndOperatorRule()); }
	 ruleAndOperator
{ after(grammarAccess.getAndOperatorRule()); } 
	 EOF 
;

// Rule AndOperator
ruleAndOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndOperatorAccess().getGroup()); }
(rule__AndOperator__Group__0)
{ after(grammarAccess.getAndOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImplicationOperator
entryRuleImplicationOperator 
:
{ before(grammarAccess.getImplicationOperatorRule()); }
	 ruleImplicationOperator
{ after(grammarAccess.getImplicationOperatorRule()); } 
	 EOF 
;

// Rule ImplicationOperator
ruleImplicationOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplicationOperatorAccess().getGroup()); }
(rule__ImplicationOperator__Group__0)
{ after(grammarAccess.getImplicationOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualsOperator
entryRuleEqualsOperator 
:
{ before(grammarAccess.getEqualsOperatorRule()); }
	 ruleEqualsOperator
{ after(grammarAccess.getEqualsOperatorRule()); } 
	 EOF 
;

// Rule EqualsOperator
ruleEqualsOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualsOperatorAccess().getGroup()); }
(rule__EqualsOperator__Group__0)
{ after(grammarAccess.getEqualsOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotEqualsOperator
entryRuleNotEqualsOperator 
:
{ before(grammarAccess.getNotEqualsOperatorRule()); }
	 ruleNotEqualsOperator
{ after(grammarAccess.getNotEqualsOperatorRule()); } 
	 EOF 
;

// Rule NotEqualsOperator
ruleNotEqualsOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotEqualsOperatorAccess().getGroup()); }
(rule__NotEqualsOperator__Group__0)
{ after(grammarAccess.getNotEqualsOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotOperator
entryRuleNotOperator 
:
{ before(grammarAccess.getNotOperatorRule()); }
	 ruleNotOperator
{ after(grammarAccess.getNotOperatorRule()); } 
	 EOF 
;

// Rule NotOperator
ruleNotOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotOperatorAccess().getGroup()); }
(rule__NotOperator__Group__0)
{ after(grammarAccess.getNotOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGreaterThanOperator
entryRuleGreaterThanOperator 
:
{ before(grammarAccess.getGreaterThanOperatorRule()); }
	 ruleGreaterThanOperator
{ after(grammarAccess.getGreaterThanOperatorRule()); } 
	 EOF 
;

// Rule GreaterThanOperator
ruleGreaterThanOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGreaterThanOperatorAccess().getGroup()); }
(rule__GreaterThanOperator__Group__0)
{ after(grammarAccess.getGreaterThanOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGreaterOrEqualThanOperator
entryRuleGreaterOrEqualThanOperator 
:
{ before(grammarAccess.getGreaterOrEqualThanOperatorRule()); }
	 ruleGreaterOrEqualThanOperator
{ after(grammarAccess.getGreaterOrEqualThanOperatorRule()); } 
	 EOF 
;

// Rule GreaterOrEqualThanOperator
ruleGreaterOrEqualThanOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGreaterOrEqualThanOperatorAccess().getGroup()); }
(rule__GreaterOrEqualThanOperator__Group__0)
{ after(grammarAccess.getGreaterOrEqualThanOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLessThanOperator
entryRuleLessThanOperator 
:
{ before(grammarAccess.getLessThanOperatorRule()); }
	 ruleLessThanOperator
{ after(grammarAccess.getLessThanOperatorRule()); } 
	 EOF 
;

// Rule LessThanOperator
ruleLessThanOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLessThanOperatorAccess().getGroup()); }
(rule__LessThanOperator__Group__0)
{ after(grammarAccess.getLessThanOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLessOrEqualThanOperator
entryRuleLessOrEqualThanOperator 
:
{ before(grammarAccess.getLessOrEqualThanOperatorRule()); }
	 ruleLessOrEqualThanOperator
{ after(grammarAccess.getLessOrEqualThanOperatorRule()); } 
	 EOF 
;

// Rule LessOrEqualThanOperator
ruleLessOrEqualThanOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLessOrEqualThanOperatorAccess().getGroup()); }
(rule__LessOrEqualThanOperator__Group__0)
{ after(grammarAccess.getLessOrEqualThanOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditionOperator
entryRuleAdditionOperator 
:
{ before(grammarAccess.getAdditionOperatorRule()); }
	 ruleAdditionOperator
{ after(grammarAccess.getAdditionOperatorRule()); } 
	 EOF 
;

// Rule AdditionOperator
ruleAdditionOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionOperatorAccess().getGroup()); }
(rule__AdditionOperator__Group__0)
{ after(grammarAccess.getAdditionOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubstractionOperator
entryRuleSubstractionOperator 
:
{ before(grammarAccess.getSubstractionOperatorRule()); }
	 ruleSubstractionOperator
{ after(grammarAccess.getSubstractionOperatorRule()); } 
	 EOF 
;

// Rule SubstractionOperator
ruleSubstractionOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubstractionOperatorAccess().getGroup()); }
(rule__SubstractionOperator__Group__0)
{ after(grammarAccess.getSubstractionOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicationOperator
entryRuleMultiplicationOperator 
:
{ before(grammarAccess.getMultiplicationOperatorRule()); }
	 ruleMultiplicationOperator
{ after(grammarAccess.getMultiplicationOperatorRule()); } 
	 EOF 
;

// Rule MultiplicationOperator
ruleMultiplicationOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationOperatorAccess().getGroup()); }
(rule__MultiplicationOperator__Group__0)
{ after(grammarAccess.getMultiplicationOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivisionOperator
entryRuleDivisionOperator 
:
{ before(grammarAccess.getDivisionOperatorRule()); }
	 ruleDivisionOperator
{ after(grammarAccess.getDivisionOperatorRule()); } 
	 EOF 
;

// Rule DivisionOperator
ruleDivisionOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivisionOperatorAccess().getGroup()); }
(rule__DivisionOperator__Group__0)
{ after(grammarAccess.getDivisionOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModulusOperator
entryRuleModulusOperator 
:
{ before(grammarAccess.getModulusOperatorRule()); }
	 ruleModulusOperator
{ after(grammarAccess.getModulusOperatorRule()); } 
	 EOF 
;

// Rule ModulusOperator
ruleModulusOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModulusOperatorAccess().getGroup()); }
(rule__ModulusOperator__Group__0)
{ after(grammarAccess.getModulusOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMaxOperator
entryRuleMaxOperator 
:
{ before(grammarAccess.getMaxOperatorRule()); }
	 ruleMaxOperator
{ after(grammarAccess.getMaxOperatorRule()); } 
	 EOF 
;

// Rule MaxOperator
ruleMaxOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMaxOperatorAccess().getGroup()); }
(rule__MaxOperator__Group__0)
{ after(grammarAccess.getMaxOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMinOperator
entryRuleMinOperator 
:
{ before(grammarAccess.getMinOperatorRule()); }
	 ruleMinOperator
{ after(grammarAccess.getMinOperatorRule()); } 
	 EOF 
;

// Rule MinOperator
ruleMinOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMinOperatorAccess().getGroup()); }
(rule__MinOperator__Group__0)
{ after(grammarAccess.getMinOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAvgOperator
entryRuleAvgOperator 
:
{ before(grammarAccess.getAvgOperatorRule()); }
	 ruleAvgOperator
{ after(grammarAccess.getAvgOperatorRule()); } 
	 EOF 
;

// Rule AvgOperator
ruleAvgOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAvgOperatorAccess().getGroup()); }
(rule__AvgOperator__Group__0)
{ after(grammarAccess.getAvgOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSumOperator
entryRuleSumOperator 
:
{ before(grammarAccess.getSumOperatorRule()); }
	 ruleSumOperator
{ after(grammarAccess.getSumOperatorRule()); } 
	 EOF 
;

// Rule SumOperator
ruleSumOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSumOperatorAccess().getGroup()); }
(rule__SumOperator__Group__0)
{ after(grammarAccess.getSumOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExponentialOperator
entryRuleExponentialOperator 
:
{ before(grammarAccess.getExponentialOperatorRule()); }
	 ruleExponentialOperator
{ after(grammarAccess.getExponentialOperatorRule()); } 
	 EOF 
;

// Rule ExponentialOperator
ruleExponentialOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExponentialOperatorAccess().getGroup()); }
(rule__ExponentialOperator__Group__0)
{ after(grammarAccess.getExponentialOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbsoluteOperator
entryRuleAbsoluteOperator 
:
{ before(grammarAccess.getAbsoluteOperatorRule()); }
	 ruleAbsoluteOperator
{ after(grammarAccess.getAbsoluteOperatorRule()); } 
	 EOF 
;

// Rule AbsoluteOperator
ruleAbsoluteOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbsoluteOperatorAccess().getGroup()); }
(rule__AbsoluteOperator__Group__0)
{ after(grammarAccess.getAbsoluteOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNaturalLogarithmOperator
entryRuleNaturalLogarithmOperator 
:
{ before(grammarAccess.getNaturalLogarithmOperatorRule()); }
	 ruleNaturalLogarithmOperator
{ after(grammarAccess.getNaturalLogarithmOperatorRule()); } 
	 EOF 
;

// Rule NaturalLogarithmOperator
ruleNaturalLogarithmOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNaturalLogarithmOperatorAccess().getGroup()); }
(rule__NaturalLogarithmOperator__Group__0)
{ after(grammarAccess.getNaturalLogarithmOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommonLogarithmOperator
entryRuleCommonLogarithmOperator 
:
{ before(grammarAccess.getCommonLogarithmOperatorRule()); }
	 ruleCommonLogarithmOperator
{ after(grammarAccess.getCommonLogarithmOperatorRule()); } 
	 EOF 
;

// Rule CommonLogarithmOperator
ruleCommonLogarithmOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommonLogarithmOperatorAccess().getGroup()); }
(rule__CommonLogarithmOperator__Group__0)
{ after(grammarAccess.getCommonLogarithmOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLeftParenthesis
entryRuleLeftParenthesis 
:
{ before(grammarAccess.getLeftParenthesisRule()); }
	 ruleLeftParenthesis
{ after(grammarAccess.getLeftParenthesisRule()); } 
	 EOF 
;

// Rule LeftParenthesis
ruleLeftParenthesis
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLeftParenthesisAccess().getLeftParenthesisKeyword()); }

	'(' 

{ after(grammarAccess.getLeftParenthesisAccess().getLeftParenthesisKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRightParenthesis
entryRuleRightParenthesis 
:
{ before(grammarAccess.getRightParenthesisRule()); }
	 ruleRightParenthesis
{ after(grammarAccess.getRightParenthesisRule()); } 
	 EOF 
;

// Rule RightParenthesis
ruleRightParenthesis
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRightParenthesisAccess().getRightParenthesisKeyword()); }

	')' 

{ after(grammarAccess.getRightParenthesisAccess().getRightParenthesisKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard 
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
(rule__QualifiedNameWithWildcard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleImportNamespace
entryRuleImportNamespace 
:
{ before(grammarAccess.getImportNamespaceRule()); }
	 ruleImportNamespace
{ after(grammarAccess.getImportNamespaceRule()); } 
	 EOF 
;

// Rule ImportNamespace
ruleImportNamespace
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportNamespaceAccess().getGroup()); }
(rule__ImportNamespace__Group__0)
{ after(grammarAccess.getImportNamespaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getAlternatives()); }
(rule__Number__Alternatives)
{ after(grammarAccess.getNumberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImpact
entryRuleImpact 
:
{ before(grammarAccess.getImpactRule()); }
	 ruleImpact
{ after(grammarAccess.getImpactRule()); } 
	 EOF 
;

// Rule Impact
ruleImpact
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImpactAccess().getAlternatives()); }
(rule__Impact__Alternatives)
{ after(grammarAccess.getImpactAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule GoalKind
ruleGoalKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalKindAccess().getAlternatives()); }
(rule__GoalKind__Alternatives)
{ after(grammarAccess.getGoalKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AppliedProperty__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedPropertyAccess().getAppliedQualitativePropertyParserRuleCall_0()); }
	ruleAppliedQualitativeProperty
{ after(grammarAccess.getAppliedPropertyAccess().getAppliedQualitativePropertyParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAppliedPropertyAccess().getAppliedQuantitativePropertyParserRuleCall_1()); }
	ruleAppliedQuantitativeProperty
{ after(grammarAccess.getAppliedPropertyAccess().getAppliedQuantitativePropertyParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__FunctionAlternatives_5_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionMinOperatorParserRuleCall_5_2_0_0()); }
	ruleMinOperator
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionMinOperatorParserRuleCall_5_2_0_0()); }
)

    |(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionMaxOperatorParserRuleCall_5_2_0_1()); }
	ruleMaxOperator
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionMaxOperatorParserRuleCall_5_2_0_1()); }
)

    |(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionAvgOperatorParserRuleCall_5_2_0_2()); }
	ruleAvgOperator
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionAvgOperatorParserRuleCall_5_2_0_2()); }
)

    |(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionSumOperatorParserRuleCall_5_2_0_3()); }
	ruleSumOperator
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionSumOperatorParserRuleCall_5_2_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Goal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalAccess().getSoftGoalParserRuleCall_0()); }
	ruleSoftGoal
{ after(grammarAccess.getGoalAccess().getSoftGoalParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGoalAccess().getHardGoalParserRuleCall_1()); }
	ruleHardGoal
{ after(grammarAccess.getGoalAccess().getHardGoalParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getGoalAccess().getCompositeGoalParserRuleCall_2()); }
	ruleCompositeGoal
{ after(grammarAccess.getGoalAccess().getCompositeGoalParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalDisjunction__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalDisjunctionAccess().getOperatorOrOperatorParserRuleCall_1_1_0_0()); }
	ruleOrOperator
{ after(grammarAccess.getGoalDisjunctionAccess().getOperatorOrOperatorParserRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getGoalDisjunctionAccess().getOperatorXOrOperatorParserRuleCall_1_1_0_1()); }
	ruleXOrOperator
{ after(grammarAccess.getGoalDisjunctionAccess().getOperatorXOrOperatorParserRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalComparison__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalComparisonAccess().getOperatorEqualsOperatorParserRuleCall_1_1_0_0()); }
	ruleEqualsOperator
{ after(grammarAccess.getGoalComparisonAccess().getOperatorEqualsOperatorParserRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getGoalComparisonAccess().getOperatorNotEqualsOperatorParserRuleCall_1_1_0_1()); }
	ruleNotEqualsOperator
{ after(grammarAccess.getGoalComparisonAccess().getOperatorNotEqualsOperatorParserRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalBooleanUnit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalBooleanUnitAccess().getGoalNegationParserRuleCall_0()); }
	ruleGoalNegation
{ after(grammarAccess.getGoalBooleanUnitAccess().getGoalNegationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGoalBooleanUnitAccess().getGoalBooleanLiteralParserRuleCall_1()); }
	ruleGoalBooleanLiteral
{ after(grammarAccess.getGoalBooleanUnitAccess().getGoalBooleanLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getGoalBooleanUnitAccess().getGoalReferenceParserRuleCall_2()); }
	ruleGoalReference
{ after(grammarAccess.getGoalBooleanUnitAccess().getGoalReferenceParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getGoalBooleanUnitAccess().getParenthesizedGoalExpressionParserRuleCall_3()); }
	ruleParenthesizedGoalExpression
{ after(grammarAccess.getGoalBooleanUnitAccess().getParenthesizedGoalExpressionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberExpressionAccess().getNumberLiteralParserRuleCall_0()); }
	ruleNumberLiteral
{ after(grammarAccess.getNumberExpressionAccess().getNumberLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberExpressionAccess().getNumberFunctionParserRuleCall_1()); }
	ruleNumberFunction
{ after(grammarAccess.getNumberExpressionAccess().getNumberFunctionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNumberExpressionAccess().getAppliedQuantitativePropertyExpressionParserRuleCall_2()); }
	ruleAppliedQuantitativePropertyExpression
{ after(grammarAccess.getNumberExpressionAccess().getAppliedQuantitativePropertyExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getOperatorOrOperatorParserRuleCall_1_1_0_0()); }
	ruleOrOperator
{ after(grammarAccess.getDisjunctionAccess().getOperatorOrOperatorParserRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getDisjunctionAccess().getOperatorXOrOperatorParserRuleCall_1_1_0_1()); }
	ruleXOrOperator
{ after(grammarAccess.getDisjunctionAccess().getOperatorXOrOperatorParserRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorEqualsOperatorParserRuleCall_1_1_0_0()); }
	ruleEqualsOperator
{ after(grammarAccess.getComparisonAccess().getOperatorEqualsOperatorParserRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorNotEqualsOperatorParserRuleCall_1_1_0_1()); }
	ruleNotEqualsOperator
{ after(grammarAccess.getComparisonAccess().getOperatorNotEqualsOperatorParserRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanUnit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanUnitAccess().getNegationParserRuleCall_0()); }
	ruleNegation
{ after(grammarAccess.getBooleanUnitAccess().getNegationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBooleanUnitAccess().getRelationalExpressionParserRuleCall_1()); }
	ruleRelationalExpression
{ after(grammarAccess.getBooleanUnitAccess().getRelationalExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBooleanUnitAccess().getBooleanLiteralParserRuleCall_2()); }
	ruleBooleanLiteral
{ after(grammarAccess.getBooleanUnitAccess().getBooleanLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
(rule__RelationalExpression__Group_1_0_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_1()); }
(rule__RelationalExpression__Group_1_0_1__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_2()); }
(rule__RelationalExpression__Group_1_0_2__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_2()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_3()); }
(rule__RelationalExpression__Group_1_0_3__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparableExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparableExpressionAccess().getArithmeticExpressionParserRuleCall_0()); }
	ruleArithmeticExpression
{ after(grammarAccess.getComparableExpressionAccess().getArithmeticExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getComparableExpressionAccess().getInstanceSpecificationExpressionParserRuleCall_1()); }
	ruleInstanceSpecificationExpression
{ after(grammarAccess.getComparableExpressionAccess().getInstanceSpecificationExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getComparableExpressionAccess().getObjectSpecificationExpressionParserRuleCall_2()); }
	ruleObjectSpecificationExpression
{ after(grammarAccess.getComparableExpressionAccess().getObjectSpecificationExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getComparableExpressionAccess().getNullLiteralParserRuleCall_3()); }
	ruleNullLiteral
{ after(grammarAccess.getComparableExpressionAccess().getNullLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getComparableExpressionAccess().getStringLiteralParserRuleCall_4()); }
	ruleStringLiteral
{ after(grammarAccess.getComparableExpressionAccess().getStringLiteralParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getComparableExpressionAccess().getUnlimitedLiteralParserRuleCall_5()); }
	ruleUnlimitedLiteral
{ after(grammarAccess.getComparableExpressionAccess().getUnlimitedLiteralParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getComparableExpressionAccess().getParenthesizedExpressionParserRuleCall_6()); }
	ruleParenthesizedExpression
{ after(grammarAccess.getComparableExpressionAccess().getParenthesizedExpressionParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorSubstractionOperatorParserRuleCall_1_1_0_0()); }
	ruleSubstractionOperator
{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorSubstractionOperatorParserRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditionOperatorParserRuleCall_1_1_0_1()); }
	ruleAdditionOperator
{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditionOperatorParserRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicationOperatorParserRuleCall_1_1_0_0()); }
	ruleMultiplicationOperator
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicationOperatorParserRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorDivisionOperatorParserRuleCall_1_1_0_1()); }
	ruleDivisionOperator
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorDivisionOperatorParserRuleCall_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorModulusOperatorParserRuleCall_1_1_0_2()); }
	ruleModulusOperator
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorModulusOperatorParserRuleCall_1_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberFunction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberFunctionAccess().getMaximumFunctionParserRuleCall_0()); }
	ruleMaximumFunction
{ after(grammarAccess.getNumberFunctionAccess().getMaximumFunctionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberFunctionAccess().getMinimumFunctionParserRuleCall_1()); }
	ruleMinimumFunction
{ after(grammarAccess.getNumberFunctionAccess().getMinimumFunctionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNumberFunctionAccess().getAverageFunctionParserRuleCall_2()); }
	ruleAverageFunction
{ after(grammarAccess.getNumberFunctionAccess().getAverageFunctionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNumberFunctionAccess().getSumFunctionParserRuleCall_3()); }
	ruleSumFunction
{ after(grammarAccess.getNumberFunctionAccess().getSumFunctionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getNumberFunctionAccess().getExponentialFunctionParserRuleCall_4()); }
	ruleExponentialFunction
{ after(grammarAccess.getNumberFunctionAccess().getExponentialFunctionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getNumberFunctionAccess().getAbsoluteFunctionParserRuleCall_5()); }
	ruleAbsoluteFunction
{ after(grammarAccess.getNumberFunctionAccess().getAbsoluteFunctionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getNumberFunctionAccess().getNaturalLogarithmFunctionParserRuleCall_6()); }
	ruleNaturalLogarithmFunction
{ after(grammarAccess.getNumberFunctionAccess().getNaturalLogarithmFunctionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getNumberFunctionAccess().getCommonLogarithmFunctionParserRuleCall_7()); }
	ruleCommonLogarithmFunction
{ after(grammarAccess.getNumberFunctionAccess().getCommonLogarithmFunctionParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSpecification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueSpecificationAccess().getLiteralValueExpressionParserRuleCall_0()); }
	ruleLiteralValueExpression
{ after(grammarAccess.getValueSpecificationAccess().getLiteralValueExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueSpecificationAccess().getInstanceSpecificationExpressionParserRuleCall_1()); }
	ruleInstanceSpecificationExpression
{ after(grammarAccess.getValueSpecificationAccess().getInstanceSpecificationExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueSpecificationAccess().getObjectSpecificationExpressionParserRuleCall_2()); }
	ruleObjectSpecificationExpression
{ after(grammarAccess.getValueSpecificationAccess().getObjectSpecificationExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSpecificationExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectSpecificationExpressionAccess().getValueAssignment_1_0()); }
(rule__ObjectSpecificationExpression__ValueAssignment_1_0)
{ after(grammarAccess.getObjectSpecificationExpressionAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getObjectSpecificationExpressionAccess().getValueAssignment_1_1()); }
(rule__ObjectSpecificationExpression__ValueAssignment_1_1)
{ after(grammarAccess.getObjectSpecificationExpressionAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValueExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralValueExpressionAccess().getNumberLiteralParserRuleCall_0()); }
	ruleNumberLiteral
{ after(grammarAccess.getLiteralValueExpressionAccess().getNumberLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralValueExpressionAccess().getBooleanLiteralParserRuleCall_1()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralValueExpressionAccess().getBooleanLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralValueExpressionAccess().getNullLiteralParserRuleCall_2()); }
	ruleNullLiteral
{ after(grammarAccess.getLiteralValueExpressionAccess().getNullLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralValueExpressionAccess().getStringLiteralParserRuleCall_3()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralValueExpressionAccess().getStringLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralValueExpressionAccess().getUnlimitedLiteralParserRuleCall_4()); }
	ruleUnlimitedLiteral
{ after(grammarAccess.getLiteralValueExpressionAccess().getUnlimitedLiteralParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperatorAccess().getOrKeyword_1_0()); }

	'or' 

{ after(grammarAccess.getOrOperatorAccess().getOrKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getOrOperatorAccess().getVerticalLineVerticalLineKeyword_1_1()); }

	'||' 

{ after(grammarAccess.getOrOperatorAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XOrOperator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOrOperatorAccess().getXorKeyword_1_0()); }

	'xor' 

{ after(grammarAccess.getXOrOperatorAccess().getXorKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getXOrOperatorAccess().getCircumflexAccentKeyword_1_1()); }

	'^' 

{ after(grammarAccess.getXOrOperatorAccess().getCircumflexAccentKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperatorAccess().getAndKeyword_1_0()); }

	'and' 

{ after(grammarAccess.getAndOperatorAccess().getAndKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getAndOperatorAccess().getAmpersandAmpersandKeyword_1_1()); }

	'&&' 

{ after(grammarAccess.getAndOperatorAccess().getAmpersandAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationOperator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationOperatorAccess().getEqualsSignGreaterThanSignKeyword_1_0()); }

	'=>' 

{ after(grammarAccess.getImplicationOperatorAccess().getEqualsSignGreaterThanSignKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getImplicationOperatorAccess().getHyphenMinusGreaterThanSignKeyword_1_1()); }

	'->' 

{ after(grammarAccess.getImplicationOperatorAccess().getHyphenMinusGreaterThanSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqualsOperator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEqualsOperatorAccess().getExclamationMarkEqualsSignKeyword_1_0()); }

	'!=' 

{ after(grammarAccess.getNotEqualsOperatorAccess().getExclamationMarkEqualsSignKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getNotEqualsOperatorAccess().getLessThanSignGreaterThanSignKeyword_1_1()); }

	'<>' 

{ after(grammarAccess.getNotEqualsOperatorAccess().getLessThanSignGreaterThanSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperatorAccess().getExclamationMarkKeyword_1_0()); }

	'!' 

{ after(grammarAccess.getNotOperatorAccess().getExclamationMarkKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getNotOperatorAccess().getNotKeyword_1_1()); }

	'not' 

{ after(grammarAccess.getNotOperatorAccess().getNotKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getPOSITIVE_SMALL_DECIMALTerminalRuleCall_1()); }
	RULE_POSITIVE_SMALL_DECIMAL
{ after(grammarAccess.getNumberAccess().getPOSITIVE_SMALL_DECIMALTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getSMALL_DECIMALTerminalRuleCall_2()); }
	RULE_SMALL_DECIMAL
{ after(grammarAccess.getNumberAccess().getSMALL_DECIMALTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getEBIGDECIMALTerminalRuleCall_3()); }
	RULE_EBIGDECIMAL
{ after(grammarAccess.getNumberAccess().getEBIGDECIMALTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Impact__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpactAccess().getPOSITIVE_SMALL_DECIMALTerminalRuleCall_0()); }
	RULE_POSITIVE_SMALL_DECIMAL
{ after(grammarAccess.getImpactAccess().getPOSITIVE_SMALL_DECIMALTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getImpactAccess().getSMALL_DECIMALTerminalRuleCall_1()); }
	RULE_SMALL_DECIMAL
{ after(grammarAccess.getImpactAccess().getSMALL_DECIMALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalKindAccess().getREQUIREDEnumLiteralDeclaration_0()); }
(	'required' 
)
{ after(grammarAccess.getGoalKindAccess().getREQUIREDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getGoalKindAccess().getOFFEREDEnumLiteralDeclaration_1()); }
(	'offered' 
)
{ after(grammarAccess.getGoalKindAccess().getOFFEREDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getGoalKindAccess().getCONTRACTEnumLiteralDeclaration_2()); }
(	'contract' 
)
{ after(grammarAccess.getGoalKindAccess().getCONTRACTEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__GoalModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__0__Impl
	rule__GoalModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getImportsAssignment_0()); }
(rule__GoalModel__ImportsAssignment_0)*
{ after(grammarAccess.getGoalModelAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__1__Impl
	rule__GoalModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGoalmodelKeyword_1()); }

	'goalmodel' 

{ after(grammarAccess.getGoalModelAccess().getGoalmodelKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__2__Impl
	rule__GoalModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getNameAssignment_2()); }
(rule__GoalModel__NameAssignment_2)
{ after(grammarAccess.getGoalModelAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__3__Impl
	rule__GoalModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getGoalModelAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__4__Impl
	rule__GoalModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getWorkloadsKeyword_4()); }

	'workloads' 

{ after(grammarAccess.getGoalModelAccess().getWorkloadsKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__5__Impl
	rule__GoalModel__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getLeftSquareBracketKeyword_5()); }

	'[' 

{ after(grammarAccess.getGoalModelAccess().getLeftSquareBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__6__Impl
	rule__GoalModel__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGroup_6()); }
(rule__GoalModel__Group_6__0)?
{ after(grammarAccess.getGoalModelAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__7__Impl
	rule__GoalModel__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getRightSquareBracketKeyword_7()); }

	']' 

{ after(grammarAccess.getGoalModelAccess().getRightSquareBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__8__Impl
	rule__GoalModel__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getAppliedPropertiesKeyword_8()); }

	'applied-properties' 

{ after(grammarAccess.getGoalModelAccess().getAppliedPropertiesKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__9__Impl
	rule__GoalModel__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getLeftSquareBracketKeyword_9()); }

	'[' 

{ after(grammarAccess.getGoalModelAccess().getLeftSquareBracketKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__10__Impl
	rule__GoalModel__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGroup_10()); }
(rule__GoalModel__Group_10__0)?
{ after(grammarAccess.getGoalModelAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__11__Impl
	rule__GoalModel__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getRightSquareBracketKeyword_11()); }

	']' 

{ after(grammarAccess.getGoalModelAccess().getRightSquareBracketKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__12__Impl
	rule__GoalModel__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGoalsKeyword_12()); }

	'goals' 

{ after(grammarAccess.getGoalModelAccess().getGoalsKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__13__Impl
	rule__GoalModel__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getLeftSquareBracketKeyword_13()); }

	'[' 

{ after(grammarAccess.getGoalModelAccess().getLeftSquareBracketKeyword_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__14
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__14__Impl
	rule__GoalModel__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__14__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGroup_14()); }
(rule__GoalModel__Group_14__0)?
{ after(grammarAccess.getGoalModelAccess().getGroup_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__15
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__15__Impl
	rule__GoalModel__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__15__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getRightSquareBracketKeyword_15()); }

	']' 

{ after(grammarAccess.getGoalModelAccess().getRightSquareBracketKeyword_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group__16
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group__16__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group__16__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getRightCurlyBracketKeyword_16()); }

	'}' 

{ after(grammarAccess.getGoalModelAccess().getRightCurlyBracketKeyword_16()); }
)

;
finally {
	restoreStackSize(stackSize);
}




































rule__GoalModel__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_6__0__Impl
	rule__GoalModel__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getWorkloadsAssignment_6_0()); }
(rule__GoalModel__WorkloadsAssignment_6_0)
{ after(grammarAccess.getGoalModelAccess().getWorkloadsAssignment_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGroup_6_1()); }
(rule__GoalModel__Group_6_1__0)*
{ after(grammarAccess.getGoalModelAccess().getGroup_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoalModel__Group_6_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_6_1__0__Impl
	rule__GoalModel__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_6_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getCommaKeyword_6_1_0()); }

	',' 

{ after(grammarAccess.getGoalModelAccess().getCommaKeyword_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group_6_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_6_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getWorkloadsAssignment_6_1_1()); }
(rule__GoalModel__WorkloadsAssignment_6_1_1)
{ after(grammarAccess.getGoalModelAccess().getWorkloadsAssignment_6_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoalModel__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_10__0__Impl
	rule__GoalModel__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getAppliedPropertiesAssignment_10_0()); }
(rule__GoalModel__AppliedPropertiesAssignment_10_0)
{ after(grammarAccess.getGoalModelAccess().getAppliedPropertiesAssignment_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGroup_10_1()); }
(rule__GoalModel__Group_10_1__0)*
{ after(grammarAccess.getGoalModelAccess().getGroup_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoalModel__Group_10_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_10_1__0__Impl
	rule__GoalModel__Group_10_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_10_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getCommaKeyword_10_1_0()); }

	',' 

{ after(grammarAccess.getGoalModelAccess().getCommaKeyword_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group_10_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_10_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_10_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getAppliedPropertiesAssignment_10_1_1()); }
(rule__GoalModel__AppliedPropertiesAssignment_10_1_1)
{ after(grammarAccess.getGoalModelAccess().getAppliedPropertiesAssignment_10_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoalModel__Group_14__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_14__0__Impl
	rule__GoalModel__Group_14__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_14__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGoalsAssignment_14_0()); }
(rule__GoalModel__GoalsAssignment_14_0)
{ after(grammarAccess.getGoalModelAccess().getGoalsAssignment_14_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group_14__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_14__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_14__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGroup_14_1()); }
(rule__GoalModel__Group_14_1__0)*
{ after(grammarAccess.getGoalModelAccess().getGroup_14_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoalModel__Group_14_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_14_1__0__Impl
	rule__GoalModel__Group_14_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_14_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getCommaKeyword_14_1_0()); }

	',' 

{ after(grammarAccess.getGoalModelAccess().getCommaKeyword_14_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalModel__Group_14_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalModel__Group_14_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__Group_14_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGoalsAssignment_14_1_1()); }
(rule__GoalModel__GoalsAssignment_14_1_1)
{ after(grammarAccess.getGoalModelAccess().getGoalsAssignment_14_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Workload__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Workload__Group__0__Impl
	rule__Workload__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getNameAssignment_0()); }
(rule__Workload__NameAssignment_0)
{ after(grammarAccess.getWorkloadAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Workload__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Workload__Group__1__Impl
	rule__Workload__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getWorkloadAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Workload__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Workload__Group__2__Impl
	rule__Workload__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getActivityKeyword_2()); }

	'activity' 

{ after(grammarAccess.getWorkloadAccess().getActivityKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Workload__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Workload__Group__3__Impl
	rule__Workload__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getActivityAssignment_3()); }
(rule__Workload__ActivityAssignment_3)
{ after(grammarAccess.getWorkloadAccess().getActivityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Workload__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Workload__Group__4__Impl
	rule__Workload__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getCommaKeyword_4()); }

	',' 

{ after(grammarAccess.getWorkloadAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Workload__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Workload__Group__5__Impl
	rule__Workload__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getPatternKeyword_5()); }

	'pattern' 

{ after(grammarAccess.getWorkloadAccess().getPatternKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Workload__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Workload__Group__6__Impl
	rule__Workload__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getPatternAssignment_6()); }
(rule__Workload__PatternAssignment_6)
{ after(grammarAccess.getWorkloadAccess().getPatternAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Workload__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Workload__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getWorkloadAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__AppliedQualitativeProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group__0__Impl
	rule__AppliedQualitativeProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getQualitativeKeyword_0()); }

	'qualitative' 

{ after(grammarAccess.getAppliedQualitativePropertyAccess().getQualitativeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group__1__Impl
	rule__AppliedQualitativeProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getNameAssignment_1()); }
(rule__AppliedQualitativeProperty__NameAssignment_1)
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group__2__Impl
	rule__AppliedQualitativeProperty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAppliedQualitativePropertyAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group__3__Impl
	rule__AppliedQualitativeProperty__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getPropertyKeyword_3()); }

	'property' 

{ after(grammarAccess.getAppliedQualitativePropertyAccess().getPropertyKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group__4__Impl
	rule__AppliedQualitativeProperty__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getPropertyAssignment_4()); }
(rule__AppliedQualitativeProperty__PropertyAssignment_4)
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getPropertyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group__5__Impl
	rule__AppliedQualitativeProperty__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getGroup_5()); }
(rule__AppliedQualitativeProperty__Group_5__0)?
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getAppliedQualitativePropertyAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__AppliedQualitativeProperty__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group_5__0__Impl
	rule__AppliedQualitativeProperty__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getAppliedQualitativePropertyAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group_5__1__Impl
	rule__AppliedQualitativeProperty__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getContextKeyword_5_1()); }

	'context' 

{ after(grammarAccess.getAppliedQualitativePropertyAccess().getContextKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group_5__2__Impl
	rule__AppliedQualitativeProperty__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getLeftSquareBracketKeyword_5_2()); }

	'[' 

{ after(grammarAccess.getAppliedQualitativePropertyAccess().getLeftSquareBracketKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group_5__3__Impl
	rule__AppliedQualitativeProperty__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getGroup_5_3()); }
(rule__AppliedQualitativeProperty__Group_5_3__0)?
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getGroup_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group_5__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group_5__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getRightSquareBracketKeyword_5_4()); }

	']' 

{ after(grammarAccess.getAppliedQualitativePropertyAccess().getRightSquareBracketKeyword_5_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AppliedQualitativeProperty__Group_5_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group_5_3__0__Impl
	rule__AppliedQualitativeProperty__Group_5_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group_5_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getContextAssignment_5_3_0()); }
(rule__AppliedQualitativeProperty__ContextAssignment_5_3_0)
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getContextAssignment_5_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group_5_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group_5_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group_5_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getGroup_5_3_1()); }
(rule__AppliedQualitativeProperty__Group_5_3_1__0)*
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getGroup_5_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AppliedQualitativeProperty__Group_5_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group_5_3_1__0__Impl
	rule__AppliedQualitativeProperty__Group_5_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group_5_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getCommaKeyword_5_3_1_0()); }

	',' 

{ after(grammarAccess.getAppliedQualitativePropertyAccess().getCommaKeyword_5_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQualitativeProperty__Group_5_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQualitativeProperty__Group_5_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__Group_5_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getContextAssignment_5_3_1_1()); }
(rule__AppliedQualitativeProperty__ContextAssignment_5_3_1_1)
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getContextAssignment_5_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AppliedQuantitativeProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group__0__Impl
	rule__AppliedQuantitativeProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getQuantitativeKeyword_0()); }

	'quantitative' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getQuantitativeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group__1__Impl
	rule__AppliedQuantitativeProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getNameAssignment_1()); }
(rule__AppliedQuantitativeProperty__NameAssignment_1)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group__2__Impl
	rule__AppliedQuantitativeProperty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group__3__Impl
	rule__AppliedQuantitativeProperty__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getPropertyKeyword_3()); }

	'property' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getPropertyKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group__4__Impl
	rule__AppliedQuantitativeProperty__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getPropertyAssignment_4()); }
(rule__AppliedQuantitativeProperty__PropertyAssignment_4)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getPropertyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group__5__Impl
	rule__AppliedQuantitativeProperty__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup_5()); }
(rule__AppliedQuantitativeProperty__Group_5__0)?
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group__6__Impl
	rule__AppliedQuantitativeProperty__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup_6()); }
(rule__AppliedQuantitativeProperty__Group_6__0)?
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group__7__Impl
	rule__AppliedQuantitativeProperty__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup_7()); }
(rule__AppliedQuantitativeProperty__Group_7__0)?
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__AppliedQuantitativeProperty__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_5__0__Impl
	rule__AppliedQuantitativeProperty__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_5__1__Impl
	rule__AppliedQuantitativeProperty__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionKeyword_5_1()); }

	'function' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionAssignment_5_2()); }
(rule__AppliedQuantitativeProperty__FunctionAssignment_5_2)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AppliedQuantitativeProperty__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_6__0__Impl
	rule__AppliedQuantitativeProperty__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getCommaKeyword_6_0()); }

	',' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_6__1__Impl
	rule__AppliedQuantitativeProperty__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getContextKeyword_6_1()); }

	'context' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getContextKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_6__2__Impl
	rule__AppliedQuantitativeProperty__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getLeftSquareBracketKeyword_6_2()); }

	'[' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getLeftSquareBracketKeyword_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group_6__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_6__3__Impl
	rule__AppliedQuantitativeProperty__Group_6__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_6__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup_6_3()); }
(rule__AppliedQuantitativeProperty__Group_6_3__0)?
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup_6_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group_6__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_6__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_6__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getRightSquareBracketKeyword_6_4()); }

	']' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getRightSquareBracketKeyword_6_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AppliedQuantitativeProperty__Group_6_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_6_3__0__Impl
	rule__AppliedQuantitativeProperty__Group_6_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_6_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getContextAssignment_6_3_0()); }
(rule__AppliedQuantitativeProperty__ContextAssignment_6_3_0)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getContextAssignment_6_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group_6_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_6_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_6_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup_6_3_1()); }
(rule__AppliedQuantitativeProperty__Group_6_3_1__0)*
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getGroup_6_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AppliedQuantitativeProperty__Group_6_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_6_3_1__0__Impl
	rule__AppliedQuantitativeProperty__Group_6_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_6_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getCommaKeyword_6_3_1_0()); }

	',' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getCommaKeyword_6_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group_6_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_6_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_6_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getContextAssignment_6_3_1_1()); }
(rule__AppliedQuantitativeProperty__ContextAssignment_6_3_1_1)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getContextAssignment_6_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AppliedQuantitativeProperty__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_7__0__Impl
	rule__AppliedQuantitativeProperty__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getCommaKeyword_7_0()); }

	',' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getCommaKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_7__1__Impl
	rule__AppliedQuantitativeProperty__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getWorkloadKeyword_7_1()); }

	'workload' 

{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getWorkloadKeyword_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativeProperty__Group_7__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativeProperty__Group_7__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__Group_7__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getWorkloadAssignment_7_2()); }
(rule__AppliedQuantitativeProperty__WorkloadAssignment_7_2)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getWorkloadAssignment_7_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SoftGoal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__0__Impl
	rule__SoftGoal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getSoftgoalKeyword_0()); }

	'softgoal' 

{ after(grammarAccess.getSoftGoalAccess().getSoftgoalKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__1__Impl
	rule__SoftGoal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getNameAssignment_1()); }
(rule__SoftGoal__NameAssignment_1)
{ after(grammarAccess.getSoftGoalAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__2__Impl
	rule__SoftGoal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getSoftGoalAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__3__Impl
	rule__SoftGoal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getKindKeyword_3()); }

	'kind' 

{ after(grammarAccess.getSoftGoalAccess().getKindKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__4__Impl
	rule__SoftGoal__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getKindAssignment_4()); }
(rule__SoftGoal__KindAssignment_4)
{ after(grammarAccess.getSoftGoalAccess().getKindAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__5__Impl
	rule__SoftGoal__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getSoftGoalAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__6__Impl
	rule__SoftGoal__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getPriorityKeyword_6()); }

	'priority' 

{ after(grammarAccess.getSoftGoalAccess().getPriorityKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__7__Impl
	rule__SoftGoal__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getPriorityAssignment_7()); }
(rule__SoftGoal__PriorityAssignment_7)
{ after(grammarAccess.getSoftGoalAccess().getPriorityAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__8__Impl
	rule__SoftGoal__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getCommaKeyword_8()); }

	',' 

{ after(grammarAccess.getSoftGoalAccess().getCommaKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__9__Impl
	rule__SoftGoal__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getPropertyKeyword_9()); }

	'property' 

{ after(grammarAccess.getSoftGoalAccess().getPropertyKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__10__Impl
	rule__SoftGoal__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getDollarSignKeyword_10()); }

	'$' 

{ after(grammarAccess.getSoftGoalAccess().getDollarSignKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__11__Impl
	rule__SoftGoal__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getPropertyAssignment_11()); }
(rule__SoftGoal__PropertyAssignment_11)
{ after(grammarAccess.getSoftGoalAccess().getPropertyAssignment_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__12__Impl
	rule__SoftGoal__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getCommaKeyword_12()); }

	',' 

{ after(grammarAccess.getSoftGoalAccess().getCommaKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__13__Impl
	rule__SoftGoal__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getThresholdKeyword_13()); }

	'threshold' 

{ after(grammarAccess.getSoftGoalAccess().getThresholdKeyword_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__14
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__14__Impl
	rule__SoftGoal__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__14__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getThresholdAssignment_14()); }
(rule__SoftGoal__ThresholdAssignment_14)
{ after(grammarAccess.getSoftGoalAccess().getThresholdAssignment_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__15
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__15__Impl
	rule__SoftGoal__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__15__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getGroup_15()); }
(rule__SoftGoal__Group_15__0)?
{ after(grammarAccess.getSoftGoalAccess().getGroup_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group__16
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group__16__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group__16__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getRightCurlyBracketKeyword_16()); }

	'}' 

{ after(grammarAccess.getSoftGoalAccess().getRightCurlyBracketKeyword_16()); }
)

;
finally {
	restoreStackSize(stackSize);
}




































rule__SoftGoal__Group_15__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group_15__0__Impl
	rule__SoftGoal__Group_15__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group_15__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getCommaKeyword_15_0()); }

	',' 

{ after(grammarAccess.getSoftGoalAccess().getCommaKeyword_15_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group_15__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group_15__1__Impl
	rule__SoftGoal__Group_15__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group_15__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getImpactsKeyword_15_1()); }

	'impacts' 

{ after(grammarAccess.getSoftGoalAccess().getImpactsKeyword_15_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group_15__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group_15__2__Impl
	rule__SoftGoal__Group_15__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group_15__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getLeftSquareBracketKeyword_15_2()); }

	'[' 

{ after(grammarAccess.getSoftGoalAccess().getLeftSquareBracketKeyword_15_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group_15__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group_15__3__Impl
	rule__SoftGoal__Group_15__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group_15__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getImpactsAssignment_15_3()); }
(rule__SoftGoal__ImpactsAssignment_15_3)
{ after(grammarAccess.getSoftGoalAccess().getImpactsAssignment_15_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group_15__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group_15__4__Impl
	rule__SoftGoal__Group_15__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group_15__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getGroup_15_4()); }
(rule__SoftGoal__Group_15_4__0)*
{ after(grammarAccess.getSoftGoalAccess().getGroup_15_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group_15__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group_15__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group_15__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getRightSquareBracketKeyword_15_5()); }

	']' 

{ after(grammarAccess.getSoftGoalAccess().getRightSquareBracketKeyword_15_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SoftGoal__Group_15_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group_15_4__0__Impl
	rule__SoftGoal__Group_15_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group_15_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getCommaKeyword_15_4_0()); }

	',' 

{ after(grammarAccess.getSoftGoalAccess().getCommaKeyword_15_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoal__Group_15_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoal__Group_15_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__Group_15_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getImpactsAssignment_15_4_1()); }
(rule__SoftGoal__ImpactsAssignment_15_4_1)
{ after(grammarAccess.getSoftGoalAccess().getImpactsAssignment_15_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SoftGoalImpact__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoalImpact__Group__0__Impl
	rule__SoftGoalImpact__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoalImpact__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalImpactAccess().getTargetAssignment_0()); }
(rule__SoftGoalImpact__TargetAssignment_0)
{ after(grammarAccess.getSoftGoalImpactAccess().getTargetAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SoftGoalImpact__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SoftGoalImpact__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoalImpact__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalImpactAccess().getImpactAssignment_1()); }
(rule__SoftGoalImpact__ImpactAssignment_1)
{ after(grammarAccess.getSoftGoalImpactAccess().getImpactAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HardGoal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__0__Impl
	rule__HardGoal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getHardgoalKeyword_0()); }

	'hardgoal' 

{ after(grammarAccess.getHardGoalAccess().getHardgoalKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__1__Impl
	rule__HardGoal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getNameAssignment_1()); }
(rule__HardGoal__NameAssignment_1)
{ after(grammarAccess.getHardGoalAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__2__Impl
	rule__HardGoal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getHardGoalAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__3__Impl
	rule__HardGoal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getKindKeyword_3()); }

	'kind' 

{ after(grammarAccess.getHardGoalAccess().getKindKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__4__Impl
	rule__HardGoal__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getKindAssignment_4()); }
(rule__HardGoal__KindAssignment_4)
{ after(grammarAccess.getHardGoalAccess().getKindAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__5__Impl
	rule__HardGoal__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getHardGoalAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__6__Impl
	rule__HardGoal__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getPriorityKeyword_6()); }

	'priority' 

{ after(grammarAccess.getHardGoalAccess().getPriorityKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__7__Impl
	rule__HardGoal__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getPriorityAssignment_7()); }
(rule__HardGoal__PriorityAssignment_7)
{ after(grammarAccess.getHardGoalAccess().getPriorityAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__8__Impl
	rule__HardGoal__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getCommaKeyword_8()); }

	',' 

{ after(grammarAccess.getHardGoalAccess().getCommaKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__9__Impl
	rule__HardGoal__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getConditionKeyword_9()); }

	'condition' 

{ after(grammarAccess.getHardGoalAccess().getConditionKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__10__Impl
	rule__HardGoal__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getConditionAssignment_10()); }
(rule__HardGoal__ConditionAssignment_10)
{ after(grammarAccess.getHardGoalAccess().getConditionAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__11__Impl
	rule__HardGoal__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getGroup_11()); }
(rule__HardGoal__Group_11__0)?
{ after(grammarAccess.getHardGoalAccess().getGroup_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getRightCurlyBracketKeyword_12()); }

	'}' 

{ after(grammarAccess.getHardGoalAccess().getRightCurlyBracketKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}




























rule__HardGoal__Group_11__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group_11__0__Impl
	rule__HardGoal__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group_11__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getCommaKeyword_11_0()); }

	',' 

{ after(grammarAccess.getHardGoalAccess().getCommaKeyword_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group_11__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group_11__1__Impl
	rule__HardGoal__Group_11__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group_11__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getSuccessRateKeyword_11_1()); }

	'successRate' 

{ after(grammarAccess.getHardGoalAccess().getSuccessRateKeyword_11_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HardGoal__Group_11__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HardGoal__Group_11__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__Group_11__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getSuccessRateAssignment_11_2()); }
(rule__HardGoal__SuccessRateAssignment_11_2)
{ after(grammarAccess.getHardGoalAccess().getSuccessRateAssignment_11_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompositeGoal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__0__Impl
	rule__CompositeGoal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getCompositeKeyword_0()); }

	'composite' 

{ after(grammarAccess.getCompositeGoalAccess().getCompositeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__1__Impl
	rule__CompositeGoal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getNameAssignment_1()); }
(rule__CompositeGoal__NameAssignment_1)
{ after(grammarAccess.getCompositeGoalAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__2__Impl
	rule__CompositeGoal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getCompositeGoalAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__3__Impl
	rule__CompositeGoal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getKindKeyword_3()); }

	'kind' 

{ after(grammarAccess.getCompositeGoalAccess().getKindKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__4__Impl
	rule__CompositeGoal__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getKindAssignment_4()); }
(rule__CompositeGoal__KindAssignment_4)
{ after(grammarAccess.getCompositeGoalAccess().getKindAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__5__Impl
	rule__CompositeGoal__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getCompositeGoalAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__6__Impl
	rule__CompositeGoal__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getPriorityKeyword_6()); }

	'priority' 

{ after(grammarAccess.getCompositeGoalAccess().getPriorityKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__7__Impl
	rule__CompositeGoal__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getPriorityAssignment_7()); }
(rule__CompositeGoal__PriorityAssignment_7)
{ after(grammarAccess.getCompositeGoalAccess().getPriorityAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__8__Impl
	rule__CompositeGoal__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getCommaKeyword_8()); }

	',' 

{ after(grammarAccess.getCompositeGoalAccess().getCommaKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__9__Impl
	rule__CompositeGoal__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getConditionKeyword_9()); }

	'condition' 

{ after(grammarAccess.getCompositeGoalAccess().getConditionKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__10__Impl
	rule__CompositeGoal__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getConditionAssignment_10()); }
(rule__CompositeGoal__ConditionAssignment_10)
{ after(grammarAccess.getCompositeGoalAccess().getConditionAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeGoal__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeGoal__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getRightCurlyBracketKeyword_11()); }

	'}' 

{ after(grammarAccess.getCompositeGoalAccess().getRightCurlyBracketKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


























rule__GoalImplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalImplication__Group__0__Impl
	rule__GoalImplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalImplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalImplicationAccess().getGoalDisjunctionParserRuleCall_0()); }
	ruleGoalDisjunction
{ after(grammarAccess.getGoalImplicationAccess().getGoalDisjunctionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalImplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalImplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalImplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalImplicationAccess().getGroup_1()); }
(rule__GoalImplication__Group_1__0)*
{ after(grammarAccess.getGoalImplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoalImplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalImplication__Group_1__0__Impl
	rule__GoalImplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalImplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalImplicationAccess().getGoalImplicationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getGoalImplicationAccess().getGoalImplicationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalImplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalImplication__Group_1__1__Impl
	rule__GoalImplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalImplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalImplicationAccess().getOperatorAssignment_1_1()); }
(rule__GoalImplication__OperatorAssignment_1_1)
{ after(grammarAccess.getGoalImplicationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalImplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalImplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalImplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalImplicationAccess().getRightAssignment_1_2()); }
(rule__GoalImplication__RightAssignment_1_2)
{ after(grammarAccess.getGoalImplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GoalDisjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalDisjunction__Group__0__Impl
	rule__GoalDisjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalDisjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalDisjunctionAccess().getGoalConjunctionParserRuleCall_0()); }
	ruleGoalConjunction
{ after(grammarAccess.getGoalDisjunctionAccess().getGoalConjunctionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalDisjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalDisjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalDisjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalDisjunctionAccess().getGroup_1()); }
(rule__GoalDisjunction__Group_1__0)*
{ after(grammarAccess.getGoalDisjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoalDisjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalDisjunction__Group_1__0__Impl
	rule__GoalDisjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalDisjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalDisjunctionAccess().getGoalDisjunctionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getGoalDisjunctionAccess().getGoalDisjunctionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalDisjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalDisjunction__Group_1__1__Impl
	rule__GoalDisjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalDisjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalDisjunctionAccess().getOperatorAssignment_1_1()); }
(rule__GoalDisjunction__OperatorAssignment_1_1)
{ after(grammarAccess.getGoalDisjunctionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalDisjunction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalDisjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalDisjunction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalDisjunctionAccess().getRightAssignment_1_2()); }
(rule__GoalDisjunction__RightAssignment_1_2)
{ after(grammarAccess.getGoalDisjunctionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GoalConjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalConjunction__Group__0__Impl
	rule__GoalConjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalConjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalConjunctionAccess().getGoalComparisonParserRuleCall_0()); }
	ruleGoalComparison
{ after(grammarAccess.getGoalConjunctionAccess().getGoalComparisonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalConjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalConjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalConjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalConjunctionAccess().getGroup_1()); }
(rule__GoalConjunction__Group_1__0)*
{ after(grammarAccess.getGoalConjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoalConjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalConjunction__Group_1__0__Impl
	rule__GoalConjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalConjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalConjunctionAccess().getGoalConjunctionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getGoalConjunctionAccess().getGoalConjunctionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalConjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalConjunction__Group_1__1__Impl
	rule__GoalConjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalConjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalConjunctionAccess().getOperatorAssignment_1_1()); }
(rule__GoalConjunction__OperatorAssignment_1_1)
{ after(grammarAccess.getGoalConjunctionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalConjunction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalConjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalConjunction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalConjunctionAccess().getRightAssignment_1_2()); }
(rule__GoalConjunction__RightAssignment_1_2)
{ after(grammarAccess.getGoalConjunctionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GoalComparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalComparison__Group__0__Impl
	rule__GoalComparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalComparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalComparisonAccess().getGoalBooleanUnitParserRuleCall_0()); }
	ruleGoalBooleanUnit
{ after(grammarAccess.getGoalComparisonAccess().getGoalBooleanUnitParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalComparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalComparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalComparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalComparisonAccess().getGroup_1()); }
(rule__GoalComparison__Group_1__0)*
{ after(grammarAccess.getGoalComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoalComparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalComparison__Group_1__0__Impl
	rule__GoalComparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalComparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalComparisonAccess().getGoalComparisonLeftAction_1_0()); }
(

)
{ after(grammarAccess.getGoalComparisonAccess().getGoalComparisonLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalComparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalComparison__Group_1__1__Impl
	rule__GoalComparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalComparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalComparisonAccess().getOperatorAssignment_1_1()); }
(rule__GoalComparison__OperatorAssignment_1_1)
{ after(grammarAccess.getGoalComparisonAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalComparison__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalComparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalComparison__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalComparisonAccess().getRightAssignment_1_2()); }
(rule__GoalComparison__RightAssignment_1_2)
{ after(grammarAccess.getGoalComparisonAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GoalNegation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalNegation__Group__0__Impl
	rule__GoalNegation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalNegation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalNegationAccess().getOperatorAssignment_0()); }
(rule__GoalNegation__OperatorAssignment_0)
{ after(grammarAccess.getGoalNegationAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalNegation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalNegation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalNegation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalNegationAccess().getValueAssignment_1()); }
(rule__GoalNegation__ValueAssignment_1)
{ after(grammarAccess.getGoalNegationAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoalReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalReference__Group__0__Impl
	rule__GoalReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalReferenceAccess().getGoalReferenceAction_0()); }
(

)
{ after(grammarAccess.getGoalReferenceAccess().getGoalReferenceAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalReference__Group__1__Impl
	rule__GoalReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalReferenceAccess().getDollarSignKeyword_1()); }

	'$' 

{ after(grammarAccess.getGoalReferenceAccess().getDollarSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoalReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoalReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoalReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalReferenceAccess().getValueAssignment_2()); }
(rule__GoalReference__ValueAssignment_2)
{ after(grammarAccess.getGoalReferenceAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParenthesizedGoalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedGoalExpression__Group__0__Impl
	rule__ParenthesizedGoalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedGoalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedGoalExpressionAccess().getParenthesizedGoalExpressionAction_0()); }
(

)
{ after(grammarAccess.getParenthesizedGoalExpressionAccess().getParenthesizedGoalExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedGoalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedGoalExpression__Group__1__Impl
	rule__ParenthesizedGoalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedGoalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedGoalExpressionAccess().getLeftParenthesisParserRuleCall_1()); }
	ruleLeftParenthesis
{ after(grammarAccess.getParenthesizedGoalExpressionAccess().getLeftParenthesisParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedGoalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedGoalExpression__Group__2__Impl
	rule__ParenthesizedGoalExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedGoalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedGoalExpressionAccess().getValueAssignment_2()); }
(rule__ParenthesizedGoalExpression__ValueAssignment_2)
{ after(grammarAccess.getParenthesizedGoalExpressionAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedGoalExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedGoalExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedGoalExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedGoalExpressionAccess().getRightParenthesisParserRuleCall_3()); }
	ruleRightParenthesis
{ after(grammarAccess.getParenthesizedGoalExpressionAccess().getRightParenthesisParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AppliedQuantitativePropertyExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativePropertyExpression__Group__0__Impl
	rule__AppliedQuantitativePropertyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativePropertyExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getAppliedQuantitativePropertyExpressionAction_0()); }
(

)
{ after(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getAppliedQuantitativePropertyExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativePropertyExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativePropertyExpression__Group__1__Impl
	rule__AppliedQuantitativePropertyExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativePropertyExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getDollarSignKeyword_1()); }

	'$' 

{ after(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getDollarSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliedQuantitativePropertyExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliedQuantitativePropertyExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativePropertyExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getValueAssignment_2()); }
(rule__AppliedQuantitativePropertyExpression__ValueAssignment_2)
{ after(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Implication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group__0__Impl
	rule__Implication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0()); }
	ruleDisjunction
{ after(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getGroup_1()); }
(rule__Implication__Group_1__0)*
{ after(grammarAccess.getImplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Implication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group_1__0__Impl
	rule__Implication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getImplicationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getImplicationAccess().getImplicationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group_1__1__Impl
	rule__Implication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getOperatorAssignment_1_1()); }
(rule__Implication__OperatorAssignment_1_1)
{ after(grammarAccess.getImplicationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getRightAssignment_1_2()); }
(rule__Implication__RightAssignment_1_2)
{ after(grammarAccess.getImplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Disjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group__0__Impl
	rule__Disjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); }
	ruleConjunction
{ after(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getGroup_1()); }
(rule__Disjunction__Group_1__0)*
{ after(grammarAccess.getDisjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Disjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1__0__Impl
	rule__Disjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1__1__Impl
	rule__Disjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getOperatorAssignment_1_1()); }
(rule__Disjunction__OperatorAssignment_1_1)
{ after(grammarAccess.getDisjunctionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2()); }
(rule__Disjunction__RightAssignment_1_2)
{ after(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Conjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__0__Impl
	rule__Conjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
{ after(grammarAccess.getConjunctionAccess().getComparisonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getGroup_1()); }
(rule__Conjunction__Group_1__0)*
{ after(grammarAccess.getConjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__0__Impl
	rule__Conjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getConjunctionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getConjunctionAccess().getConjunctionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__1__Impl
	rule__Conjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getOperatorAssignment_1_1()); }
(rule__Conjunction__OperatorAssignment_1_1)
{ after(grammarAccess.getConjunctionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
(rule__Conjunction__RightAssignment_1_2)
{ after(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getBooleanUnitParserRuleCall_0()); }
	ruleBooleanUnit
{ after(grammarAccess.getComparisonAccess().getBooleanUnitParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
(rule__Comparison__Group_1__0)*
{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorAssignment_1_1()); }
(rule__Comparison__OperatorAssignment_1_1)
{ after(grammarAccess.getComparisonAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
(rule__Comparison__RightAssignment_1_2)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Negation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group__0__Impl
	rule__Negation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getOperatorAssignment_0()); }
(rule__Negation__OperatorAssignment_0)
{ after(grammarAccess.getNegationAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getValueAssignment_1()); }
(rule__Negation__ValueAssignment_1)
{ after(grammarAccess.getNegationAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getComparableExpressionParserRuleCall_0()); }
	ruleComparableExpression
{ after(grammarAccess.getRelationalExpressionAccess().getComparableExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_0()); }
(rule__RelationalExpression__Alternatives_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1()); }
(rule__RelationalExpression__RightAssignment_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__0__Impl
	rule__RelationalExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__RelationalExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_1__0__Impl
	rule__RelationalExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_1_1()); }
(rule__RelationalExpression__OperatorAssignment_1_0_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_2__0__Impl
	rule__RelationalExpression__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_2_1()); }
(rule__RelationalExpression__OperatorAssignment_1_0_2_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_3__0__Impl
	rule__RelationalExpression__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_3_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_3_1()); }
(rule__RelationalExpression__OperatorAssignment_1_0_3_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AdditiveExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
(rule__AdditiveExpression__RightAssignment_1_2)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getNumberExpressionParserRuleCall_0()); }
	ruleNumberExpression
{ after(grammarAccess.getMultiplicativeExpressionAccess().getNumberExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1()); }
(rule__MultiplicativeExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
(rule__MultiplicativeExpression__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MaximumFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaximumFunction__Group__0__Impl
	rule__MaximumFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaximumFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaximumFunctionAccess().getOperatorAssignment_0()); }
(rule__MaximumFunction__OperatorAssignment_0)
{ after(grammarAccess.getMaximumFunctionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaximumFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaximumFunction__Group__1__Impl
	rule__MaximumFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MaximumFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaximumFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMaximumFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaximumFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaximumFunction__Group__2__Impl
	rule__MaximumFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MaximumFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaximumFunctionAccess().getValuesAssignment_2()); }
(rule__MaximumFunction__ValuesAssignment_2)
{ after(grammarAccess.getMaximumFunctionAccess().getValuesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaximumFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaximumFunction__Group__3__Impl
	rule__MaximumFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MaximumFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaximumFunctionAccess().getGroup_3()); }
(rule__MaximumFunction__Group_3__0)*
{ after(grammarAccess.getMaximumFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaximumFunction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaximumFunction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaximumFunction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaximumFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getMaximumFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MaximumFunction__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaximumFunction__Group_3__0__Impl
	rule__MaximumFunction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaximumFunction__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaximumFunctionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getMaximumFunctionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaximumFunction__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaximumFunction__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaximumFunction__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaximumFunctionAccess().getValuesAssignment_3_1()); }
(rule__MaximumFunction__ValuesAssignment_3_1)
{ after(grammarAccess.getMaximumFunctionAccess().getValuesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MinimumFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinimumFunction__Group__0__Impl
	rule__MinimumFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinimumFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinimumFunctionAccess().getOperatorAssignment_0()); }
(rule__MinimumFunction__OperatorAssignment_0)
{ after(grammarAccess.getMinimumFunctionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinimumFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinimumFunction__Group__1__Impl
	rule__MinimumFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MinimumFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinimumFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMinimumFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinimumFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinimumFunction__Group__2__Impl
	rule__MinimumFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MinimumFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinimumFunctionAccess().getValuesAssignment_2()); }
(rule__MinimumFunction__ValuesAssignment_2)
{ after(grammarAccess.getMinimumFunctionAccess().getValuesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinimumFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinimumFunction__Group__3__Impl
	rule__MinimumFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MinimumFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinimumFunctionAccess().getGroup_3()); }
(rule__MinimumFunction__Group_3__0)*
{ after(grammarAccess.getMinimumFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinimumFunction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinimumFunction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinimumFunction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinimumFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getMinimumFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MinimumFunction__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinimumFunction__Group_3__0__Impl
	rule__MinimumFunction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinimumFunction__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinimumFunctionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getMinimumFunctionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinimumFunction__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinimumFunction__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinimumFunction__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinimumFunctionAccess().getValuesAssignment_3_1()); }
(rule__MinimumFunction__ValuesAssignment_3_1)
{ after(grammarAccess.getMinimumFunctionAccess().getValuesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AverageFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AverageFunction__Group__0__Impl
	rule__AverageFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AverageFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAverageFunctionAccess().getOperatorAssignment_0()); }
(rule__AverageFunction__OperatorAssignment_0)
{ after(grammarAccess.getAverageFunctionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AverageFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AverageFunction__Group__1__Impl
	rule__AverageFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AverageFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAverageFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAverageFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AverageFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AverageFunction__Group__2__Impl
	rule__AverageFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AverageFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAverageFunctionAccess().getValuesAssignment_2()); }
(rule__AverageFunction__ValuesAssignment_2)
{ after(grammarAccess.getAverageFunctionAccess().getValuesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AverageFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AverageFunction__Group__3__Impl
	rule__AverageFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AverageFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAverageFunctionAccess().getGroup_3()); }
(rule__AverageFunction__Group_3__0)*
{ after(grammarAccess.getAverageFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AverageFunction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AverageFunction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AverageFunction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAverageFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAverageFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AverageFunction__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AverageFunction__Group_3__0__Impl
	rule__AverageFunction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AverageFunction__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAverageFunctionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getAverageFunctionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AverageFunction__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AverageFunction__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AverageFunction__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAverageFunctionAccess().getValuesAssignment_3_1()); }
(rule__AverageFunction__ValuesAssignment_3_1)
{ after(grammarAccess.getAverageFunctionAccess().getValuesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SumFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumFunction__Group__0__Impl
	rule__SumFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SumFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumFunctionAccess().getOperatorAssignment_0()); }
(rule__SumFunction__OperatorAssignment_0)
{ after(grammarAccess.getSumFunctionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumFunction__Group__1__Impl
	rule__SumFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SumFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSumFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumFunction__Group__2__Impl
	rule__SumFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SumFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumFunctionAccess().getValuesAssignment_2()); }
(rule__SumFunction__ValuesAssignment_2)
{ after(grammarAccess.getSumFunctionAccess().getValuesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumFunction__Group__3__Impl
	rule__SumFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SumFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumFunctionAccess().getGroup_3()); }
(rule__SumFunction__Group_3__0)*
{ after(grammarAccess.getSumFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumFunction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumFunction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SumFunction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getSumFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SumFunction__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumFunction__Group_3__0__Impl
	rule__SumFunction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SumFunction__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumFunctionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getSumFunctionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumFunction__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumFunction__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SumFunction__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumFunctionAccess().getValuesAssignment_3_1()); }
(rule__SumFunction__ValuesAssignment_3_1)
{ after(grammarAccess.getSumFunctionAccess().getValuesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExponentialFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExponentialFunction__Group__0__Impl
	rule__ExponentialFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialFunctionAccess().getOperatorAssignment_0()); }
(rule__ExponentialFunction__OperatorAssignment_0)
{ after(grammarAccess.getExponentialFunctionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentialFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExponentialFunction__Group__1__Impl
	rule__ExponentialFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getExponentialFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentialFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExponentialFunction__Group__2__Impl
	rule__ExponentialFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialFunctionAccess().getBaseAssignment_2()); }
(rule__ExponentialFunction__BaseAssignment_2)
{ after(grammarAccess.getExponentialFunctionAccess().getBaseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentialFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExponentialFunction__Group__3__Impl
	rule__ExponentialFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialFunctionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getExponentialFunctionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentialFunction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExponentialFunction__Group__4__Impl
	rule__ExponentialFunction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialFunction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialFunctionAccess().getExponentAssignment_4()); }
(rule__ExponentialFunction__ExponentAssignment_4)
{ after(grammarAccess.getExponentialFunctionAccess().getExponentAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentialFunction__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExponentialFunction__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialFunction__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialFunctionAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getExponentialFunctionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AbsoluteFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbsoluteFunction__Group__0__Impl
	rule__AbsoluteFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteFunctionAccess().getOperatorAssignment_0()); }
(rule__AbsoluteFunction__OperatorAssignment_0)
{ after(grammarAccess.getAbsoluteFunctionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbsoluteFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbsoluteFunction__Group__1__Impl
	rule__AbsoluteFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAbsoluteFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbsoluteFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbsoluteFunction__Group__2__Impl
	rule__AbsoluteFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteFunctionAccess().getValueAssignment_2()); }
(rule__AbsoluteFunction__ValueAssignment_2)
{ after(grammarAccess.getAbsoluteFunctionAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbsoluteFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbsoluteFunction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteFunctionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getAbsoluteFunctionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NaturalLogarithmFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NaturalLogarithmFunction__Group__0__Impl
	rule__NaturalLogarithmFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalLogarithmFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLogarithmFunctionAccess().getOperatorAssignment_0()); }
(rule__NaturalLogarithmFunction__OperatorAssignment_0)
{ after(grammarAccess.getNaturalLogarithmFunctionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NaturalLogarithmFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NaturalLogarithmFunction__Group__1__Impl
	rule__NaturalLogarithmFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalLogarithmFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLogarithmFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getNaturalLogarithmFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NaturalLogarithmFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NaturalLogarithmFunction__Group__2__Impl
	rule__NaturalLogarithmFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalLogarithmFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLogarithmFunctionAccess().getValueAssignment_2()); }
(rule__NaturalLogarithmFunction__ValueAssignment_2)
{ after(grammarAccess.getNaturalLogarithmFunctionAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NaturalLogarithmFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NaturalLogarithmFunction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalLogarithmFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLogarithmFunctionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getNaturalLogarithmFunctionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CommonLogarithmFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommonLogarithmFunction__Group__0__Impl
	rule__CommonLogarithmFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommonLogarithmFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommonLogarithmFunctionAccess().getOperatorAssignment_0()); }
(rule__CommonLogarithmFunction__OperatorAssignment_0)
{ after(grammarAccess.getCommonLogarithmFunctionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommonLogarithmFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommonLogarithmFunction__Group__1__Impl
	rule__CommonLogarithmFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommonLogarithmFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommonLogarithmFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getCommonLogarithmFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommonLogarithmFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommonLogarithmFunction__Group__2__Impl
	rule__CommonLogarithmFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CommonLogarithmFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommonLogarithmFunctionAccess().getValueAssignment_2()); }
(rule__CommonLogarithmFunction__ValueAssignment_2)
{ after(grammarAccess.getCommonLogarithmFunctionAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommonLogarithmFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommonLogarithmFunction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommonLogarithmFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommonLogarithmFunctionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getCommonLogarithmFunctionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ParenthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisParserRuleCall_0()); }
	ruleLeftParenthesis
{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getValueAssignment_1()); }
(rule__ParenthesizedExpression__ValueAssignment_1)
{ after(grammarAccess.getParenthesizedExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisParserRuleCall_2()); }
	ruleRightParenthesis
{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ObjectSpecificationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectSpecificationExpression__Group__0__Impl
	rule__ObjectSpecificationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSpecificationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectSpecificationExpressionAccess().getTypeAssignment_0()); }
(rule__ObjectSpecificationExpression__TypeAssignment_0)
{ after(grammarAccess.getObjectSpecificationExpressionAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectSpecificationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectSpecificationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSpecificationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectSpecificationExpressionAccess().getAlternatives_1()); }
(rule__ObjectSpecificationExpression__Alternatives_1)
{ after(grammarAccess.getObjectSpecificationExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Collection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group__0__Impl
	rule__Collection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getCollectionAction_0()); }
(

)
{ after(grammarAccess.getCollectionAccess().getCollectionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group__1__Impl
	rule__Collection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getCollectionAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group__2__Impl
	rule__Collection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getGroup_2()); }
(rule__Collection__Group_2__0)?
{ after(grammarAccess.getCollectionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getCollectionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Collection__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group_2__0__Impl
	rule__Collection__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getValuesAssignment_2_0()); }
(rule__Collection__ValuesAssignment_2_0)
{ after(grammarAccess.getCollectionAccess().getValuesAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getGroup_2_1()); }
(rule__Collection__Group_2_1__0)*
{ after(grammarAccess.getCollectionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Collection__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group_2_1__0__Impl
	rule__Collection__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getCollectionAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getValuesAssignment_2_1_1()); }
(rule__Collection__ValuesAssignment_2_1_1)
{ after(grammarAccess.getCollectionAccess().getValuesAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tuple__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__0__Impl
	rule__Tuple__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getTupleAction_0()); }
(

)
{ after(grammarAccess.getTupleAccess().getTupleAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__1__Impl
	rule__Tuple__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getTupleAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__2__Impl
	rule__Tuple__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getGroup_2()); }
(rule__Tuple__Group_2__0)?
{ after(grammarAccess.getTupleAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getTupleAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Tuple__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2__0__Impl
	rule__Tuple__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getTuplesAssignment_2_0()); }
(rule__Tuple__TuplesAssignment_2_0)
{ after(grammarAccess.getTupleAccess().getTuplesAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getGroup_2_1()); }
(rule__Tuple__Group_2_1__0)*
{ after(grammarAccess.getTupleAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tuple__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2_1__0__Impl
	rule__Tuple__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getTupleAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getTuplesAssignment_2_1_1()); }
(rule__Tuple__TuplesAssignment_2_1_1)
{ after(grammarAccess.getTupleAccess().getTuplesAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyValuePair__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyValuePair__Group__0__Impl
	rule__PropertyValuePair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValuePair__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValuePairAccess().getPropertyAssignment_0()); }
(rule__PropertyValuePair__PropertyAssignment_0)
{ after(grammarAccess.getPropertyValuePairAccess().getPropertyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyValuePair__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyValuePair__Group__1__Impl
	rule__PropertyValuePair__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValuePair__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValuePairAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getPropertyValuePairAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyValuePair__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyValuePair__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValuePair__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValuePairAccess().getValueAssignment_2()); }
(rule__PropertyValuePair__ValueAssignment_2)
{ after(grammarAccess.getPropertyValuePairAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrOperator__Group__0__Impl
	rule__OrOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperatorAccess().getOrOperatorAction_0()); }
(

)
{ after(grammarAccess.getOrOperatorAccess().getOrOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperatorAccess().getAlternatives_1()); }
(rule__OrOperator__Alternatives_1)
{ after(grammarAccess.getOrOperatorAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XOrOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XOrOperator__Group__0__Impl
	rule__XOrOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XOrOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOrOperatorAccess().getXOrOperatorAction_0()); }
(

)
{ after(grammarAccess.getXOrOperatorAccess().getXOrOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XOrOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XOrOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XOrOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOrOperatorAccess().getAlternatives_1()); }
(rule__XOrOperator__Alternatives_1)
{ after(grammarAccess.getXOrOperatorAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndOperator__Group__0__Impl
	rule__AndOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperatorAccess().getAndOperatorAction_0()); }
(

)
{ after(grammarAccess.getAndOperatorAccess().getAndOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperatorAccess().getAlternatives_1()); }
(rule__AndOperator__Alternatives_1)
{ after(grammarAccess.getAndOperatorAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImplicationOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplicationOperator__Group__0__Impl
	rule__ImplicationOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationOperatorAccess().getImplicationOperatorAction_0()); }
(

)
{ after(grammarAccess.getImplicationOperatorAccess().getImplicationOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImplicationOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplicationOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationOperatorAccess().getAlternatives_1()); }
(rule__ImplicationOperator__Alternatives_1)
{ after(grammarAccess.getImplicationOperatorAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualsOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsOperator__Group__0__Impl
	rule__EqualsOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsOperatorAccess().getEqualsOperatorAction_0()); }
(

)
{ after(grammarAccess.getEqualsOperatorAccess().getEqualsOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsOperatorAccess().getEqualsSignEqualsSignKeyword_1()); }

	'==' 

{ after(grammarAccess.getEqualsOperatorAccess().getEqualsSignEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NotEqualsOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotEqualsOperator__Group__0__Impl
	rule__NotEqualsOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqualsOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEqualsOperatorAccess().getNotEqualsOperatorAction_0()); }
(

)
{ after(grammarAccess.getNotEqualsOperatorAccess().getNotEqualsOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotEqualsOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotEqualsOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqualsOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEqualsOperatorAccess().getAlternatives_1()); }
(rule__NotEqualsOperator__Alternatives_1)
{ after(grammarAccess.getNotEqualsOperatorAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NotOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotOperator__Group__0__Impl
	rule__NotOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperatorAccess().getNotOperatorAction_0()); }
(

)
{ after(grammarAccess.getNotOperatorAccess().getNotOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperatorAccess().getAlternatives_1()); }
(rule__NotOperator__Alternatives_1)
{ after(grammarAccess.getNotOperatorAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GreaterThanOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GreaterThanOperator__Group__0__Impl
	rule__GreaterThanOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterThanOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreaterThanOperatorAccess().getGreaterThanOperatorAction_0()); }
(

)
{ after(grammarAccess.getGreaterThanOperatorAccess().getGreaterThanOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GreaterThanOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GreaterThanOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterThanOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreaterThanOperatorAccess().getGreaterThanSignKeyword_1()); }

	'>' 

{ after(grammarAccess.getGreaterThanOperatorAccess().getGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GreaterOrEqualThanOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GreaterOrEqualThanOperator__Group__0__Impl
	rule__GreaterOrEqualThanOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqualThanOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreaterOrEqualThanOperatorAccess().getGreaterOrEqualThanOperatorAction_0()); }
(

)
{ after(grammarAccess.getGreaterOrEqualThanOperatorAccess().getGreaterOrEqualThanOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GreaterOrEqualThanOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GreaterOrEqualThanOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqualThanOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreaterOrEqualThanOperatorAccess().getGreaterThanSignEqualsSignKeyword_1()); }

	'>=' 

{ after(grammarAccess.getGreaterOrEqualThanOperatorAccess().getGreaterThanSignEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LessThanOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LessThanOperator__Group__0__Impl
	rule__LessThanOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LessThanOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLessThanOperatorAccess().getLessThanOperatorAction_0()); }
(

)
{ after(grammarAccess.getLessThanOperatorAccess().getLessThanOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LessThanOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LessThanOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LessThanOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLessThanOperatorAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getLessThanOperatorAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LessOrEqualThanOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LessOrEqualThanOperator__Group__0__Impl
	rule__LessOrEqualThanOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqualThanOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLessOrEqualThanOperatorAccess().getLessOrEqualThanOperatorAction_0()); }
(

)
{ after(grammarAccess.getLessOrEqualThanOperatorAccess().getLessOrEqualThanOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LessOrEqualThanOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LessOrEqualThanOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqualThanOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLessOrEqualThanOperatorAccess().getLessThanSignEqualsSignKeyword_1()); }

	'<=' 

{ after(grammarAccess.getLessOrEqualThanOperatorAccess().getLessThanSignEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditionOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionOperator__Group__0__Impl
	rule__AdditionOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionOperatorAccess().getAdditionOperatorAction_0()); }
(

)
{ after(grammarAccess.getAdditionOperatorAccess().getAdditionOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionOperatorAccess().getPlusSignKeyword_1()); }

	'+' 

{ after(grammarAccess.getAdditionOperatorAccess().getPlusSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubstractionOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubstractionOperator__Group__0__Impl
	rule__SubstractionOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstractionOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubstractionOperatorAccess().getSubstractionOperatorAction_0()); }
(

)
{ after(grammarAccess.getSubstractionOperatorAccess().getSubstractionOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubstractionOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubstractionOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstractionOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubstractionOperatorAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getSubstractionOperatorAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicationOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationOperator__Group__0__Impl
	rule__MultiplicationOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationOperatorAccess().getMultiplicationOperatorAction_0()); }
(

)
{ after(grammarAccess.getMultiplicationOperatorAccess().getMultiplicationOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationOperatorAccess().getAsteriskKeyword_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationOperatorAccess().getAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DivisionOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivisionOperator__Group__0__Impl
	rule__DivisionOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionOperatorAccess().getDivisionOperatorAction_0()); }
(

)
{ after(grammarAccess.getDivisionOperatorAccess().getDivisionOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivisionOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivisionOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionOperatorAccess().getSolidusKeyword_1()); }

	'/' 

{ after(grammarAccess.getDivisionOperatorAccess().getSolidusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModulusOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModulusOperator__Group__0__Impl
	rule__ModulusOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModulusOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModulusOperatorAccess().getModulusOperatorAction_0()); }
(

)
{ after(grammarAccess.getModulusOperatorAccess().getModulusOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModulusOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModulusOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModulusOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModulusOperatorAccess().getPercentSignKeyword_1()); }

	'%' 

{ after(grammarAccess.getModulusOperatorAccess().getPercentSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MaxOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxOperator__Group__0__Impl
	rule__MaxOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxOperatorAccess().getMaxOperatorAction_0()); }
(

)
{ after(grammarAccess.getMaxOperatorAccess().getMaxOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaxOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaxOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaxOperatorAccess().getMaxKeyword_1()); }

	'max' 

{ after(grammarAccess.getMaxOperatorAccess().getMaxKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MinOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinOperator__Group__0__Impl
	rule__MinOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinOperatorAccess().getMinOperatorAction_0()); }
(

)
{ after(grammarAccess.getMinOperatorAccess().getMinOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinOperatorAccess().getMinKeyword_1()); }

	'min' 

{ after(grammarAccess.getMinOperatorAccess().getMinKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AvgOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgOperator__Group__0__Impl
	rule__AvgOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgOperatorAccess().getAvgOperatorAction_0()); }
(

)
{ after(grammarAccess.getAvgOperatorAccess().getAvgOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AvgOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AvgOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AvgOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvgOperatorAccess().getAvgKeyword_1()); }

	'avg' 

{ after(grammarAccess.getAvgOperatorAccess().getAvgKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SumOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumOperator__Group__0__Impl
	rule__SumOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SumOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumOperatorAccess().getSumOperatorAction_0()); }
(

)
{ after(grammarAccess.getSumOperatorAccess().getSumOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SumOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumOperatorAccess().getSumKeyword_1()); }

	'sum' 

{ after(grammarAccess.getSumOperatorAccess().getSumKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExponentialOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExponentialOperator__Group__0__Impl
	rule__ExponentialOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialOperatorAccess().getExponentialOperatorAction_0()); }
(

)
{ after(grammarAccess.getExponentialOperatorAccess().getExponentialOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentialOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExponentialOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialOperatorAccess().getExpKeyword_1()); }

	'exp' 

{ after(grammarAccess.getExponentialOperatorAccess().getExpKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AbsoluteOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbsoluteOperator__Group__0__Impl
	rule__AbsoluteOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteOperatorAccess().getAbsoluteOperatorAction_0()); }
(

)
{ after(grammarAccess.getAbsoluteOperatorAccess().getAbsoluteOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbsoluteOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbsoluteOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteOperatorAccess().getAbsKeyword_1()); }

	'abs' 

{ after(grammarAccess.getAbsoluteOperatorAccess().getAbsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NaturalLogarithmOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NaturalLogarithmOperator__Group__0__Impl
	rule__NaturalLogarithmOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalLogarithmOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLogarithmOperatorAccess().getNaturalLogarithmOperatorAction_0()); }
(

)
{ after(grammarAccess.getNaturalLogarithmOperatorAccess().getNaturalLogarithmOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NaturalLogarithmOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NaturalLogarithmOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalLogarithmOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLogarithmOperatorAccess().getLnKeyword_1()); }

	'ln' 

{ after(grammarAccess.getNaturalLogarithmOperatorAccess().getLnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CommonLogarithmOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommonLogarithmOperator__Group__0__Impl
	rule__CommonLogarithmOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommonLogarithmOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommonLogarithmOperatorAccess().getCommonLogarithmOperatorAction_0()); }
(

)
{ after(grammarAccess.getCommonLogarithmOperatorAccess().getCommonLogarithmOperatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommonLogarithmOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommonLogarithmOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommonLogarithmOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommonLogarithmOperatorAccess().getLogKeyword_1()); }

	'log' 

{ after(grammarAccess.getCommonLogarithmOperatorAccess().getLogKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
(
	'.' 
)
{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ImportNamespace__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportNamespace__Group__0__Impl
	rule__ImportNamespace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportNamespace__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportNamespaceAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportNamespaceAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportNamespace__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportNamespace__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportNamespace__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportNamespaceAccess().getImportedNamespaceAssignment_1()); }
(rule__ImportNamespace__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportNamespaceAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__GoalModel__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getImportsImportNamespaceParserRuleCall_0_0()); }
	ruleImportNamespace{ after(grammarAccess.getGoalModelAccess().getImportsImportNamespaceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getGoalModelAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__WorkloadsAssignment_6_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getWorkloadsWorkloadParserRuleCall_6_0_0()); }
	ruleWorkload{ after(grammarAccess.getGoalModelAccess().getWorkloadsWorkloadParserRuleCall_6_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__WorkloadsAssignment_6_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getWorkloadsWorkloadParserRuleCall_6_1_1_0()); }
	ruleWorkload{ after(grammarAccess.getGoalModelAccess().getWorkloadsWorkloadParserRuleCall_6_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__AppliedPropertiesAssignment_10_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getAppliedPropertiesAppliedPropertyParserRuleCall_10_0_0()); }
	ruleAppliedProperty{ after(grammarAccess.getGoalModelAccess().getAppliedPropertiesAppliedPropertyParserRuleCall_10_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__AppliedPropertiesAssignment_10_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getAppliedPropertiesAppliedPropertyParserRuleCall_10_1_1_0()); }
	ruleAppliedProperty{ after(grammarAccess.getGoalModelAccess().getAppliedPropertiesAppliedPropertyParserRuleCall_10_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__GoalsAssignment_14_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGoalsGoalParserRuleCall_14_0_0()); }
	ruleGoal{ after(grammarAccess.getGoalModelAccess().getGoalsGoalParserRuleCall_14_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalModel__GoalsAssignment_14_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalModelAccess().getGoalsGoalParserRuleCall_14_1_1_0()); }
	ruleGoal{ after(grammarAccess.getGoalModelAccess().getGoalsGoalParserRuleCall_14_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getWorkloadAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__ActivityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getActivityActivityCrossReference_3_0()); }
(
{ before(grammarAccess.getWorkloadAccess().getActivityActivityQualifiedNameParserRuleCall_3_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getWorkloadAccess().getActivityActivityQualifiedNameParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getWorkloadAccess().getActivityActivityCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Workload__PatternAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkloadAccess().getPatternSTRINGTerminalRuleCall_6_0()); }
	RULE_STRING{ after(grammarAccess.getWorkloadAccess().getPatternSTRINGTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAppliedQualitativePropertyAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__PropertyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getPropertyQualitativePropertyCrossReference_4_0()); }
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getPropertyQualitativePropertyQualifiedNameParserRuleCall_4_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getAppliedQualitativePropertyAccess().getPropertyQualitativePropertyQualifiedNameParserRuleCall_4_0_1()); }
)
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getPropertyQualitativePropertyCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__ContextAssignment_5_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getContextNamedElementCrossReference_5_3_0_0()); }
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getContextNamedElementQualifiedNameParserRuleCall_5_3_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getAppliedQualitativePropertyAccess().getContextNamedElementQualifiedNameParserRuleCall_5_3_0_0_1()); }
)
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getContextNamedElementCrossReference_5_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQualitativeProperty__ContextAssignment_5_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getContextNamedElementCrossReference_5_3_1_1_0()); }
(
{ before(grammarAccess.getAppliedQualitativePropertyAccess().getContextNamedElementQualifiedNameParserRuleCall_5_3_1_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getAppliedQualitativePropertyAccess().getContextNamedElementQualifiedNameParserRuleCall_5_3_1_1_0_1()); }
)
{ after(grammarAccess.getAppliedQualitativePropertyAccess().getContextNamedElementCrossReference_5_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__PropertyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getPropertyQuantitativePropertyCrossReference_4_0()); }
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getPropertyQuantitativePropertyQualifiedNameParserRuleCall_4_0_1()); }
)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getPropertyQuantitativePropertyCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__FunctionAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionAlternatives_5_2_0()); }
(rule__AppliedQuantitativeProperty__FunctionAlternatives_5_2_0)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getFunctionAlternatives_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__ContextAssignment_6_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getContextNamedElementCrossReference_6_3_0_0()); }
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getContextNamedElementQualifiedNameParserRuleCall_6_3_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getContextNamedElementQualifiedNameParserRuleCall_6_3_0_0_1()); }
)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getContextNamedElementCrossReference_6_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__ContextAssignment_6_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getContextNamedElementCrossReference_6_3_1_1_0()); }
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getContextNamedElementQualifiedNameParserRuleCall_6_3_1_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getContextNamedElementQualifiedNameParserRuleCall_6_3_1_1_0_1()); }
)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getContextNamedElementCrossReference_6_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativeProperty__WorkloadAssignment_7_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getWorkloadWorkloadCrossReference_7_2_0()); }
(
{ before(grammarAccess.getAppliedQuantitativePropertyAccess().getWorkloadWorkloadQualifiedNameParserRuleCall_7_2_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getWorkloadWorkloadQualifiedNameParserRuleCall_7_2_0_1()); }
)
{ after(grammarAccess.getAppliedQuantitativePropertyAccess().getWorkloadWorkloadCrossReference_7_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSoftGoalAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__KindAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getKindGoalKindEnumRuleCall_4_0()); }
	ruleGoalKind{ after(grammarAccess.getSoftGoalAccess().getKindGoalKindEnumRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__PriorityAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getPriorityINTTerminalRuleCall_7_0()); }
	RULE_INT{ after(grammarAccess.getSoftGoalAccess().getPriorityINTTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__PropertyAssignment_11
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getPropertyAppliedQualitativePropertyCrossReference_11_0()); }
(
{ before(grammarAccess.getSoftGoalAccess().getPropertyAppliedQualitativePropertyQualifiedNameParserRuleCall_11_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getSoftGoalAccess().getPropertyAppliedQualitativePropertyQualifiedNameParserRuleCall_11_0_1()); }
)
{ after(grammarAccess.getSoftGoalAccess().getPropertyAppliedQualitativePropertyCrossReference_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__ThresholdAssignment_14
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getThresholdImpactParserRuleCall_14_0()); }
	ruleImpact{ after(grammarAccess.getSoftGoalAccess().getThresholdImpactParserRuleCall_14_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__ImpactsAssignment_15_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getImpactsSoftGoalImpactParserRuleCall_15_3_0()); }
	ruleSoftGoalImpact{ after(grammarAccess.getSoftGoalAccess().getImpactsSoftGoalImpactParserRuleCall_15_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoal__ImpactsAssignment_15_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalAccess().getImpactsSoftGoalImpactParserRuleCall_15_4_1_0()); }
	ruleSoftGoalImpact{ after(grammarAccess.getSoftGoalAccess().getImpactsSoftGoalImpactParserRuleCall_15_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoalImpact__TargetAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalImpactAccess().getTargetSoftGoalCrossReference_0_0()); }
(
{ before(grammarAccess.getSoftGoalImpactAccess().getTargetSoftGoalQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getSoftGoalImpactAccess().getTargetSoftGoalQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getSoftGoalImpactAccess().getTargetSoftGoalCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SoftGoalImpact__ImpactAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSoftGoalImpactAccess().getImpactImpactParserRuleCall_1_0()); }
	ruleImpact{ after(grammarAccess.getSoftGoalImpactAccess().getImpactImpactParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getHardGoalAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__KindAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getKindGoalKindEnumRuleCall_4_0()); }
	ruleGoalKind{ after(grammarAccess.getHardGoalAccess().getKindGoalKindEnumRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__PriorityAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getPriorityINTTerminalRuleCall_7_0()); }
	RULE_INT{ after(grammarAccess.getHardGoalAccess().getPriorityINTTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__ConditionAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getConditionExpressionParserRuleCall_10_0()); }
	ruleExpression{ after(grammarAccess.getHardGoalAccess().getConditionExpressionParserRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HardGoal__SuccessRateAssignment_11_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHardGoalAccess().getSuccessRatePOSITIVE_SMALL_DECIMALTerminalRuleCall_11_2_0()); }
	RULE_POSITIVE_SMALL_DECIMAL{ after(grammarAccess.getHardGoalAccess().getSuccessRatePOSITIVE_SMALL_DECIMALTerminalRuleCall_11_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCompositeGoalAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__KindAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getKindGoalKindEnumRuleCall_4_0()); }
	ruleGoalKind{ after(grammarAccess.getCompositeGoalAccess().getKindGoalKindEnumRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__PriorityAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getPriorityINTTerminalRuleCall_7_0()); }
	RULE_INT{ after(grammarAccess.getCompositeGoalAccess().getPriorityINTTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeGoal__ConditionAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeGoalAccess().getConditionGoalExpressionParserRuleCall_10_0()); }
	ruleGoalExpression{ after(grammarAccess.getCompositeGoalAccess().getConditionGoalExpressionParserRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalImplication__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalImplicationAccess().getOperatorImplicationOperatorParserRuleCall_1_1_0()); }
	ruleImplicationOperator{ after(grammarAccess.getGoalImplicationAccess().getOperatorImplicationOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalImplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalImplicationAccess().getRightGoalDisjunctionParserRuleCall_1_2_0()); }
	ruleGoalDisjunction{ after(grammarAccess.getGoalImplicationAccess().getRightGoalDisjunctionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalDisjunction__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalDisjunctionAccess().getOperatorAlternatives_1_1_0()); }
(rule__GoalDisjunction__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getGoalDisjunctionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalDisjunction__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalDisjunctionAccess().getRightGoalConjunctionParserRuleCall_1_2_0()); }
	ruleGoalConjunction{ after(grammarAccess.getGoalDisjunctionAccess().getRightGoalConjunctionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalConjunction__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalConjunctionAccess().getOperatorAndOperatorParserRuleCall_1_1_0()); }
	ruleAndOperator{ after(grammarAccess.getGoalConjunctionAccess().getOperatorAndOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalConjunction__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalConjunctionAccess().getRightGoalComparisonParserRuleCall_1_2_0()); }
	ruleGoalComparison{ after(grammarAccess.getGoalConjunctionAccess().getRightGoalComparisonParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalComparison__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalComparisonAccess().getOperatorAlternatives_1_1_0()); }
(rule__GoalComparison__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getGoalComparisonAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalComparison__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalComparisonAccess().getRightGoalBooleanUnitParserRuleCall_1_2_0()); }
	ruleGoalBooleanUnit{ after(grammarAccess.getGoalComparisonAccess().getRightGoalBooleanUnitParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalNegation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalNegationAccess().getOperatorNotOperatorParserRuleCall_0_0()); }
	ruleNotOperator{ after(grammarAccess.getGoalNegationAccess().getOperatorNotOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalNegation__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalNegationAccess().getValueGoalBooleanUnitParserRuleCall_1_0()); }
	ruleGoalBooleanUnit{ after(grammarAccess.getGoalNegationAccess().getValueGoalBooleanUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalBooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalBooleanLiteralAccess().getValueEBOOLEANTerminalRuleCall_0()); }
	RULE_EBOOLEAN{ after(grammarAccess.getGoalBooleanLiteralAccess().getValueEBOOLEANTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoalReference__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalReferenceAccess().getValueGoalCrossReference_2_0()); }
(
{ before(grammarAccess.getGoalReferenceAccess().getValueGoalQualifiedNameParserRuleCall_2_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getGoalReferenceAccess().getValueGoalQualifiedNameParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getGoalReferenceAccess().getValueGoalCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedGoalExpression__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedGoalExpressionAccess().getValueGoalExpressionParserRuleCall_2_0()); }
	ruleGoalExpression{ after(grammarAccess.getParenthesizedGoalExpressionAccess().getValueGoalExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppliedQuantitativePropertyExpression__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getValueAppliedQuantitativePropertyCrossReference_2_0()); }
(
{ before(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getValueAppliedQuantitativePropertyQualifiedNameParserRuleCall_2_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getValueAppliedQuantitativePropertyQualifiedNameParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getAppliedQuantitativePropertyExpressionAccess().getValueAppliedQuantitativePropertyCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getOperatorImplicationOperatorParserRuleCall_1_1_0()); }
	ruleImplicationOperator{ after(grammarAccess.getImplicationAccess().getOperatorImplicationOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getRightDisjunctionParserRuleCall_1_2_0()); }
	ruleDisjunction{ after(grammarAccess.getImplicationAccess().getRightDisjunctionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getOperatorAlternatives_1_1_0()); }
(rule__Disjunction__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getDisjunctionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); }
	ruleConjunction{ after(grammarAccess.getDisjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getOperatorAndOperatorParserRuleCall_1_1_0()); }
	ruleAndOperator{ after(grammarAccess.getConjunctionAccess().getOperatorAndOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightComparisonParserRuleCall_1_2_0()); }
	ruleComparison{ after(grammarAccess.getConjunctionAccess().getRightComparisonParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorAlternatives_1_1_0()); }
(rule__Comparison__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getComparisonAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightBooleanUnitParserRuleCall_1_2_0()); }
	ruleBooleanUnit{ after(grammarAccess.getComparisonAccess().getRightBooleanUnitParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getOperatorNotOperatorParserRuleCall_0_0()); }
	ruleNotOperator{ after(grammarAccess.getNegationAccess().getOperatorNotOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getValueBooleanUnitParserRuleCall_1_0()); }
	ruleBooleanUnit{ after(grammarAccess.getNegationAccess().getValueBooleanUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanOperatorParserRuleCall_1_0_0_1_0()); }
	ruleGreaterThanOperator{ after(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanOperatorParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterOrEqualThanOperatorParserRuleCall_1_0_1_1_0()); }
	ruleGreaterOrEqualThanOperator{ after(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterOrEqualThanOperatorParserRuleCall_1_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorLessOrEqualThanOperatorParserRuleCall_1_0_2_1_0()); }
	ruleLessOrEqualThanOperator{ after(grammarAccess.getRelationalExpressionAccess().getOperatorLessOrEqualThanOperatorParserRuleCall_1_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_0_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanOperatorParserRuleCall_1_0_3_1_0()); }
	ruleLessThanOperator{ after(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanOperatorParserRuleCall_1_0_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightComparableExpressionParserRuleCall_1_1_0()); }
	ruleComparableExpression{ after(grammarAccess.getRelationalExpressionAccess().getRightComparableExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__AdditiveExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__MultiplicativeExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightNumberExpressionParserRuleCall_1_2_0()); }
	ruleNumberExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightNumberExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MaximumFunction__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaximumFunctionAccess().getOperatorMaxOperatorParserRuleCall_0_0()); }
	ruleMaxOperator{ after(grammarAccess.getMaximumFunctionAccess().getOperatorMaxOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MaximumFunction__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaximumFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); }
	ruleNumberExpression{ after(grammarAccess.getMaximumFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MaximumFunction__ValuesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaximumFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); }
	ruleNumberExpression{ after(grammarAccess.getMaximumFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MinimumFunction__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinimumFunctionAccess().getOperatorMinOperatorParserRuleCall_0_0()); }
	ruleMinOperator{ after(grammarAccess.getMinimumFunctionAccess().getOperatorMinOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MinimumFunction__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinimumFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); }
	ruleNumberExpression{ after(grammarAccess.getMinimumFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MinimumFunction__ValuesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinimumFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); }
	ruleNumberExpression{ after(grammarAccess.getMinimumFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AverageFunction__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAverageFunctionAccess().getOperatorAvgOperatorParserRuleCall_0_0()); }
	ruleAvgOperator{ after(grammarAccess.getAverageFunctionAccess().getOperatorAvgOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AverageFunction__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAverageFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); }
	ruleNumberExpression{ after(grammarAccess.getAverageFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AverageFunction__ValuesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAverageFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); }
	ruleNumberExpression{ after(grammarAccess.getAverageFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumFunction__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumFunctionAccess().getOperatorSumOperatorParserRuleCall_0_0()); }
	ruleSumOperator{ after(grammarAccess.getSumFunctionAccess().getOperatorSumOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumFunction__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); }
	ruleNumberExpression{ after(grammarAccess.getSumFunctionAccess().getValuesNumberExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumFunction__ValuesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); }
	ruleNumberExpression{ after(grammarAccess.getSumFunctionAccess().getValuesNumberExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialFunction__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialFunctionAccess().getOperatorExponentialOperatorParserRuleCall_0_0()); }
	ruleExponentialOperator{ after(grammarAccess.getExponentialFunctionAccess().getOperatorExponentialOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialFunction__BaseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialFunctionAccess().getBaseNumberExpressionParserRuleCall_2_0()); }
	ruleNumberExpression{ after(grammarAccess.getExponentialFunctionAccess().getBaseNumberExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentialFunction__ExponentAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentialFunctionAccess().getExponentNumberExpressionParserRuleCall_4_0()); }
	ruleNumberExpression{ after(grammarAccess.getExponentialFunctionAccess().getExponentNumberExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteFunction__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteFunctionAccess().getOperatorAbsoluteOperatorParserRuleCall_0_0()); }
	ruleAbsoluteOperator{ after(grammarAccess.getAbsoluteFunctionAccess().getOperatorAbsoluteOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteFunction__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteFunctionAccess().getValueNumberExpressionParserRuleCall_2_0()); }
	ruleNumberExpression{ after(grammarAccess.getAbsoluteFunctionAccess().getValueNumberExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalLogarithmFunction__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLogarithmFunctionAccess().getOperatorNaturalLogarithmOperatorParserRuleCall_0_0()); }
	ruleNaturalLogarithmOperator{ after(grammarAccess.getNaturalLogarithmFunctionAccess().getOperatorNaturalLogarithmOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalLogarithmFunction__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLogarithmFunctionAccess().getValueNumberExpressionParserRuleCall_2_0()); }
	ruleNumberExpression{ after(grammarAccess.getNaturalLogarithmFunctionAccess().getValueNumberExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommonLogarithmFunction__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommonLogarithmFunctionAccess().getOperatorCommonLogarithmOperatorParserRuleCall_0_0()); }
	ruleCommonLogarithmOperator{ after(grammarAccess.getCommonLogarithmFunctionAccess().getOperatorCommonLogarithmOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommonLogarithmFunction__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommonLogarithmFunctionAccess().getValueNumberExpressionParserRuleCall_2_0()); }
	ruleNumberExpression{ after(grammarAccess.getCommonLogarithmFunctionAccess().getValueNumberExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getValueExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getParenthesizedExpressionAccess().getValueExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSpecificationExpression__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectSpecificationExpressionAccess().getTypeDataTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getObjectSpecificationExpressionAccess().getTypeDataTypeQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getObjectSpecificationExpressionAccess().getTypeDataTypeQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getObjectSpecificationExpressionAccess().getTypeDataTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSpecificationExpression__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectSpecificationExpressionAccess().getValueCollectionParserRuleCall_1_0_0()); }
	ruleCollection{ after(grammarAccess.getObjectSpecificationExpressionAccess().getValueCollectionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSpecificationExpression__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectSpecificationExpressionAccess().getValueTupleParserRuleCall_1_1_0()); }
	ruleTuple{ after(grammarAccess.getObjectSpecificationExpressionAccess().getValueTupleParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__ValuesAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getValuesValueSpecificationParserRuleCall_2_0_0()); }
	ruleValueSpecification{ after(grammarAccess.getCollectionAccess().getValuesValueSpecificationParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__ValuesAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getValuesValueSpecificationParserRuleCall_2_1_1_0()); }
	ruleValueSpecification{ after(grammarAccess.getCollectionAccess().getValuesValueSpecificationParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__TuplesAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getTuplesPropertyValuePairParserRuleCall_2_0_0()); }
	rulePropertyValuePair{ after(grammarAccess.getTupleAccess().getTuplesPropertyValuePairParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__TuplesAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getTuplesPropertyValuePairParserRuleCall_2_1_1_0()); }
	rulePropertyValuePair{ after(grammarAccess.getTupleAccess().getTuplesPropertyValuePairParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValuePair__PropertyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValuePairAccess().getPropertyPropertyCrossReference_0_0()); }
(
{ before(grammarAccess.getPropertyValuePairAccess().getPropertyPropertyQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getPropertyValuePairAccess().getPropertyPropertyQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPropertyValuePairAccess().getPropertyPropertyCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValuePair__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValuePairAccess().getValueValueSpecificationParserRuleCall_2_0()); }
	ruleValueSpecification{ after(grammarAccess.getPropertyValuePairAccess().getValueValueSpecificationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceSpecificationExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceSpecificationExpressionAccess().getValueInstanceSpecificationCrossReference_0()); }
(
{ before(grammarAccess.getInstanceSpecificationExpressionAccess().getValueInstanceSpecificationQualifiedNameParserRuleCall_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getInstanceSpecificationExpressionAccess().getValueInstanceSpecificationQualifiedNameParserRuleCall_0_1()); }
)
{ after(grammarAccess.getInstanceSpecificationExpressionAccess().getValueInstanceSpecificationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueEBOOLEANTerminalRuleCall_0()); }
	RULE_EBOOLEAN{ after(grammarAccess.getBooleanLiteralAccess().getValueEBOOLEANTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); }
	ruleNumber{ after(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getValueNULLTerminalRuleCall_0()); }
	RULE_NULL{ after(grammarAccess.getNullLiteralAccess().getValueNULLTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnlimitedLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnlimitedLiteralAccess().getValueAsteriskKeyword_0()); }
(
{ before(grammarAccess.getUnlimitedLiteralAccess().getValueAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getUnlimitedLiteralAccess().getValueAsteriskKeyword_0()); }
)

{ after(grammarAccess.getUnlimitedLiteralAccess().getValueAsteriskKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ImportNamespace__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportNamespaceAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildcard{ after(grammarAccess.getImportNamespaceAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_EBOOLEAN : ('true'|'false');

RULE_NULL : 'null';

RULE_INT : ('0'..'9')+;

RULE_POSITIVE_SMALL_DECIMAL : ('1' ('.' '0'+)?|'0' ('.' ('0'..'9')+)?|'.' ('0'..'9')+);

RULE_SMALL_DECIMAL : ('+'|'-')? RULE_POSITIVE_SMALL_DECIMAL;

RULE_EBIGDECIMAL : ('+'|'-')? (RULE_INT|'.' RULE_INT|RULE_INT '.' RULE_INT);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'+'|'-'|'%'|'*'|'/'|'#'|'>'|'<'|'='|'\u00A7') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'+'|'-'|'%'|'*'|'/'|'#'|'>'|'<'|'='|'\u00A7')*;

RULE_DATE_TIME : RULE_INT '-' RULE_INT '-' RULE_INT ('T' RULE_INT ':' RULE_INT (':' RULE_INT ('.' RULE_INT)?)?)?;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


